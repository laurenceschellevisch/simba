//-----------------------------------------------------------------//
//--               SRL Resource Library                          --//
//--                      Fishing routines                       --//
//-----------------------------------------------------------------//
// * function FindFishingEquipmentColor(Equipment: string): Integer; // by Dankness, rewritten by Wizzup? and edit by NaumanAkhlaQ
// * function FindWhirlPoolXY(X, Y: Integer): Boolean;             // by Rasta Magician
// * function FindWhirlPoolMS: Boolean;                            // by Rasta Magician
// * procedure HandleWhirlPool;                                    // by Dankness and Wizzup?
// * function FindFishSpotsTPA(var VTPA:TPointArray): Boolean;     // by Rasta Magician, fixed by Marpis
// * Function FindFishSpot(var xx, yy: integer; which: string): Boolean;  // by Rasta Magician
// * procedure SetupFishing;                                       // by SRL


const
  WhirlPoolAcc = 1.0;
  
{*******************************************************************************
function FindFishingEquipmentColor(Equipment: String): Integer;
By: Dankness, rewritten by Wizzup? and edit by NaumanAkhlaQ
Description: Finds Net, Lobster Cage, Fishing Rod, Fly Fishing Rod or Harpoon color.
*******************************************************************************}
function FindFishingEquipmentColor(Equipment: string): Integer;
var
  iX, iY: Integer;
  Arr: TStringArray;
begin
  Result := -1;
  Arr := ['smallnet', 'fishingrod', 'flyfishingrod', 'cage', 'harpoon'];
  if InStrArrEx(LowerCase(Equipment), Arr, iX) then
  begin
    if FindTransparentBitmapTolerance(srl_GetBitmap(iX + 42), iX, iY, clBlack, MIX1, MIY1, MIX2, MIY2, 25) then
    begin
      Result := GetColor(iX, iY);
      srl_Warn('FindFishingEquipmentColor', 'Equipment found at ' + IntToStr(iX) +
        ', ' + IntToStr(iY) + '. Found color: ' + IntToStr(Result) + '.', warn_Debug);
    end;
  end else
    srl_Warn('FindFishingEquipmentColor', '"' + Equipment + '" is an invalid equpment name!', warn_AllVersions);
end;

{*******************************************************************************
function FindWhirlPoolXY(X, Y: Integer): Boolean;
By: Rasta Magician
Description: Finds Whirlpools at the fishing spot located at X, Y.
*******************************************************************************}
function FindWhirlPoolXY(X, Y: Integer): Boolean;
var
  arP: TPointArray;
  ararP: T2DPointArray;
  tmpCTS, i, arL: Integer;
begin
  Result := False;
  if (not LoggedIn) then exit;
  tmpCTS := GetColorToleranceSpeed;
  ColorToleranceSpeed(2);
  SetColorSpeed2Modifiers(1.21, 1.58);

  FindColorsTolerance(arP, 13940675, X - 25, Y - 25, X + 25, Y + 25, 15);
  ColorToleranceSpeed(tmpCTS);
  SetColorSpeed2Modifiers(0.2, 0.2);
    
  if (Length(arP) < 1) then exit;

  SortTPAFrom(arP, Point(MSCX, MSCY));
  ararP := SplitTPA(arP, 5);
  arL := High(ararP);

  for i := 0 to arL do
  begin
    if (Length(ararP[i]) > Round(300 * WhirlPoolAcc)) then
    begin
      Result := True;
      //srl_Warn('FindWhirlPoolXY', 'Whirpool Points: ' + IntToStr(Length(ararP[i])), warn_Debug);
      Exit;
    end;
  end;
end;

{*******************************************************************************
function FindWhirlPoolMS: Boolean;
by: Rasta Magician
Description: Returns true if whirpool found in the spots around your player in
  which he might be fishing in. Does not search one specific spot like XY.
*******************************************************************************}
function FindWhirlPoolMS: Boolean;
var
  arP: TPointArray;
  ararP: T2DPointArray;
  tmpCTS, i, arL: Integer;
begin
  if not LoggedIn then exit;
  Result := False;
  tmpCTS := GetColorToleranceSpeed;
  ColorToleranceSpeed(2);
  SetColorSpeed2Modifiers(1.21, 1.58);

  FindColorsTolerance(arP, 13940675, MSCX - 50, MSCY - 50, MSCX + 50, MSCY + 50, 15);
  begin
    ColorToleranceSpeed(tmpCTS);
    SetColorSpeed2Modifiers(0.2, 0.2);
    Exit;
  end;

  SortTPAFrom(arP, Point(MSCX, MSCY));
  ararP := SplitTPA(arP, 5);
  arL := High(ararP);

  for i := 0 to arL do
  begin
    if (Length(ararP[i]) > Round(300 * WhirlPoolAcc)) then
    begin
      Result := True;
      Status('Whirpool Points: '+IntToStr(Length(ararP[i])));
      Break;
    end;
  end;

  ColorToleranceSpeed(tmpCTS);
  SetColorSpeed2Modifiers(0.2, 0.2);
end;

{*******************************************************************************
procedure HandleWhirlPool;
By: Wizzup and Dankness
Description: Finds and Handles Whirlpools by Standing still and waiting
*******************************************************************************}
procedure HandleWhirlPool;
var
  Tab: Byte;
begin
  if (not LoggedIn) then exit;
  if (FindWhirlPoolMS) then
  begin
    Mouse(MMCX + 1, MMCY + 1, 3, 3, True);
    srl_Warn('HandleWhirlPool', 'Whirlpool found!', warn_Debug);
    Tab := GetCurrentTab;
    repeat
      if SRL_HasProc(srl_AntiBan) then
        srl_Procs[srl_AntiBan]()
      else
      begin
        if (Random(3) = 0) then
          HoverSkill('fishing', False);
        if (Random(3) = 0) then
          SleepAndMoveMouse(5000 + Random(1000));
      end;
    until not FindWhirlPoolMS;
    GameTab(Tab);
  end;
end;

{*******************************************************************************
function FindFishSpotsTPA(var VTPA:TPointArray): Boolean;
By: Rasta Magician, fixed by Marpis
Description: Finds all possible Fish Spots and stores them in the given TPA
             Returns true if found at least one, false if none
*******************************************************************************}
function FindFishSpotsTPA(var VTPA:TPointArray): Boolean;
var
  TPA, tempTPA:  TPointArray;
  ATPA: T2DPointArray;
  i, tmpCTS, VTPASize, T: Integer;
  TP: TPoint;
  
begin
  Result := False;
  if (not LoggedIn) then exit;

  tmpCTS := GetColorToleranceSpeed;
  ColorToleranceSpeed(2);
  SetColorSpeed2Modifiers(0.12, 0.27);

  T := GetSystemTime + 700;
  repeat
    FindColorsSpiralTolerance(MSCX, MSCY, tempTPA, 11117214, MSX1, MSY1, MSX2, MSY2, 3);
    TPA := CombineTPA(tempTPA, TPA);
  until(GetSystemTime > T);

  ColorToleranceSpeed(tmpCTS);
  SetColorSpeed2Modifiers(0.2, 0.2);

  if (Length(TPA) < 1) then exit;

  VTPASize := 1;
  SetLength(VTPA, 1);
  ATPA := SplitTPA(TPA, 10);
  SortATPAFrom(ATPA, Point(MSCX, MSCY));
  SortATPAFromFirstPoint(ATPA, Point(MSCX, MSCY));
  for i := 0 to High(ATPA) do
  begin
    TP := MiddleTPA(ATPA[i]);

    VTPA[VTPASize - 1] := TP;
    Inc(VTPASize);
    SetLength(VTPA, VTPASize);
  end;
  Result := (VTPASize > 1);
end;

{*******************************************************************************
function FindFishSpot(var xx, yy: integer; which: string): Boolean;
By: Rasta Magician
Description: Finds a fishing spot, according to your needs.
             Stores (x, y) coordinates to the given variables.
             which:
               'harpoon'          -> Harpoon fishing
               'cage', 'lobster'  -> Cage Fishing
               'fly', 'flyfish'   -> Fly Fishing
               'rod', 'bait'      -> Bait Fishing
               'net'              -> Net Fishing
*******************************************************************************}
function FindFishSpot(var X, Y: Integer; Which: string): Boolean;
var
  TPA:  TPointArray;
  s: string;
  i: integer;
begin
  if (not FindFishSpotsTPA(TPA)) then exit;

  case lowercase(which) of
    'harpoon':         S := 'arpoon Fis';
    'cage', 'lobster': S := 'age Fis';
    'fly', 'flyfish':  S := 'ure Fis';
    'rod', 'bait':     S := 'ait Fis';
    'net':             S := 'et Fis';
  end;

  for i := 0 to High(TPA) do
  begin
    MMouse(TPA[i].x, TPA[i].y, 5, 5);
    if WaitUpText(S, 375) then
    begin
      GetMousePos(X, Y);
      Wait(Random(100));
      Result := True;
      Exit;
    end else
    begin
      GetMousePos(X, Y);
      Mouse(X, Y, 0, 0, False);
      if WaitOptionEx(S, 'all', Nothing, 375) then
      begin
        ChooseOption('ancel');
        Result := True;
        Exit;
      end;
      ChooseOption('ancel');
    end;
  end;
end;

{*******************************************************************************
procedure SetupSRLFishing;
By: SRL
Description: Loads Fishing Bitmaps into memory.
*******************************************************************************}
procedure SetupFishing;
begin
  srl_LoadBitmapRange(41, 45);
end;

