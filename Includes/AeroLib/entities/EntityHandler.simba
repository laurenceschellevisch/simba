{
=============
EntityHandler
=============
}

Type TEntity = record
  Bounds      : TBox;
  BasePnt     : TPoint;
  tCol,tTol,
  bCol,bTol   : Integer;
  FullTPA     : TPointArray;
  tHMod,tSMod,
  bHMod,bSMod : Extended;
end;

Procedure TEntity.define(PntT, PntB: TPoint);
var
  pC,pAC : TColEx;
  tTPA   : TPointArray;
  pCols  : TIntegerArray;
begin
  pC.create(getColor(PntT.X,PntT.Y), 20);
  pC.findAllIn(toBox(PntT.X-15,PntT.Y-20,PntT.X+15,PntT.Y+25), tTPA);

  getColorsWrap(tTPA, pCols);
  clearSameIntegers(pCols);
  pAC.autoCreate(pCols);
  Self.tCol  := pAC.Col;
  Self.tTol  := pAC.Tol;
  Self.tHMod := pAC.hMod;
  Self.tSMod := pAC.sMod;

  tTPA  := [];
  pCols := [];

  pC.create(getColor(PntB.X,PntB.Y), 20);
  pC.findAllIn(toBox(PntB.X-15,PntB.Y-20,PntB.X+15,PntB.Y+25), tTPA);
  getColorsWrap(tTPA, pCols);
  clearSameIntegers(pCols);
  pAC.autoCreate(pCols);
  Self.bCol    := pAC.Col;
  Self.bTol    := pAC.Tol;
  Self.bHMod   := pAC.hMod;
  Self.bSMod   := pAC.sMod;
  Self.BasePnt := Point(round((PntT.X+PntB.X)/2), round((PntT.Y+PntB.Y)/2));
end;

function isPlayerWalking(): Boolean; forward;
Procedure TEntity.update();
var
  pC        : TColEx;
  pPnt      : TPoint;
  tTPA,
  bTPA,fTPA : TPointArray;
  atpa      : T2DPointArray;
begin
  while isPlayerWalking() do
    Wait(1);

  self.FullTPA := [];
  pPnt := self.BasePnt;

  pC.create(self.tCol, self.tTol, self.tHMod, self.tSMod);
  pC.findAllIn(toBox(pPnt.X-20,pPnt.Y-40,pPnt.X+20,pPnt.Y+40), tTPA);

  pC.create(self.bCol, self.bTol, self.bHMod, self.bSMod);
  pC.findAllIn(toBox(pPnt.X-20,pPnt.Y-40,pPnt.X+20,pPnt.Y+40), bTPA);

  combineTPAWrap(tTPA, bTPA, fTPA);
  if (length(fTPA) < 1) then
  begin
    Writeln('[TEntity]: Colors not found...');
    Exit;
  end;

  atpa := clusterTPA(fTPA, 7);
  sortATPAFromMidPoint(atpa, fTPA.midPnt());
  self.FullTPA := atpa[0];
  self.BasePnt := self.FullTPA.midPnt();

  if (distance(self.BasePnt.X, self.BasePnt.Y, MSCX, MSCY) > 75) then
  begin
    sortATPAFromMidPoint(atpa, Point(MSCX,MSCY));
    self.FullTPA := atpa[0];
    self.BasePnt := self.FullTPA.midPnt();
  end;

  self.Bounds := self.FullTPA.getBounds();
end;
