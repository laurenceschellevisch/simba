{$DEFINE SMART}
{$i AeroLib/AeroLib.Simba}
{$i Reflection/Reflection.Simba}

var
reflectPlayer: TReflectLocalPlayer;
invItem: TReflectInvItem;
s: String;
t: String;
u: String;
v: String;
w: String;
xco, yco:integer;
i: Integer;
trades: Integer;
banks: Integer;
view: String;
Proggy1: Integer;
TimeRan: String;

function R_TileOnMS(Tile : TPoint; var OutputPoint : TPoint; x : integer = 0; y : integer = 0; z : integer = 0):boolean;
var tempB : TBox;
begin
  OutputPoint := TReflectionTiles.TileToMS(Tile, x, y, z);
  tempB := intToBox(MSX1, MSY1, MSX2, MSY2);
  result := PointInBox(OutputPoint, tempB);
end;

procedure randomMouseInput(pnt:Tpoint; ranx, rany:integer);
begin
  case random(3) of
    0:humanMMouse(pnt, ranx, rany);
    1:missMouse(pnt, ranx, rany);
    2:mouse(pnt, ranx, rany, mouse_move);
  end;
end;

 function R_InteractTile(tile:Tpoint; action:string; x:integer = 0; y:integer = 0; z:integer = 0):boolean;
var RSTile : TPoint;
begin
  if R_TileOnMS(Tile, RSTile, x, y, z) then begin
    randomMouseInput(rsTile, 3, 3);
    if(Reflect.Text.IsUpText(action)) then begin
      FastClick(mouse_left);
      result := didClick(true, 1000);
    end else begin
      if TReflectionText.OptionExists(action) then begin
        FastClick(mouse_right);
        result := Reflect.Text.ChooseOption(action);
      end;
      if not result then
        randomMouseInput(Point(MSCX, MSCY), 500, 500);
    end;
  end;
end;

Procedure getTile;
var
  OurTile   : TPoint;
begin
  OurTile := Reflect.Tiles.GetGlobalTile;
  writeln('Point('+ IntToStr(OurTile.x) + ',' + IntToStr(OurTile.y) +')');
end;

function dismissAllRandoms : boolean;
var i, j, me_indice:integer;
    _npcs:TReflectNPCArray;
    randoms:tstringarray;
begin
  randoms := ['dunce', 'molly', 'niles', 'miles', 'giles', 'sandwich lady',
  'drunken dwarf', 'highwayman', 'dr jekyll', 'cap''n hand', 'security guard',
  'rick turpentine', 'mysterious old man', 'frog', 'null', 'mime', 'sergeant damien', 'freaky forester','strange plant',
   'postie pete', 'tilt', 'flippa', 'leo', 'pillory guard', 'evil bob'];
  _npcs.GetAll;
  me_indice := TReflectLocalPlayer.GetPlayerIndex;
  for i:=0 to high(_npcs) do begin
    if (_npcs[i].getInteractingIndex = me_indice) then begin
      for j:=0 to high(randoms) do begin
        if (pos(randoms[j], lowercase(_npcs[i].getName)) > 0) then begin
          if R_InteractTile(_npcs[i].getTile, 'Dismiss', 0, 0, 50) then begin
            FFlag(0);
            sleep(500+random(2000));
            writeln('Dismissed random: '+_npcs[i].getname+'  Time Running: '+TimeRunning);
            result := True;
          end;
        end;
      end;
    end;
  end;
end;
procedure AntiBanned;
begin
OS_Smart.__Graphics.DrawClippedText('Antiban in progress ' , 'SmallCharsNS', point(20,149), clBlue);
sleep(10+random(5000));
  case random(750) of
    1:HoverSkill('random', False);
    2:hoverSkill('random', false);
    //3:pickUpMouse;
    4:SleepAndMoveMouse(random(2500));
    5:randomMovement;
    6:compassMovement(0, 360, false);
    7:boredHuman;
    8:sleep(500+random(5000));
    9:randomFKeys(false);
    10:randomTab(false);
    11:checkMovingObjs(false);
    12:checkMovingObjs(false);
    13:MMouseOffClient('rand');
    14:MMouseOffClient('top');
    15:MMouseOffClient('bottom');
    16:MMouseOffClient('left');
    17:MMouseOffClient('right');
    18:HoverSkill('random', False);
  end;
  OS_Smart.__Graphics.Clear;
end;



  Procedure paint;
  begin
   TimeRan := MsToTime(GetTimeRunning, 2);
  OS_Smart.__Graphics.Clear;
  OS_Smart.__Graphics.DrawClippedText('Number of Trades: ' + IntToStr(trades), 'SmallCharsNS', point(20,31), clWhite);
  OS_Smart.__Graphics.DrawClippedText('Number of Banks: ' + IntToStr(banks), 'SmallCharsNS', point(20,48), clWhite);
  OS_Smart.__Graphics.DrawClippedText(TimeRan, 'FriendChars', point(20,66), clWhite);
  OS_Smart.__Graphics.DrawClippedText('Current Status: ' , 'SmallCharsNS', point(20,90), clRed);
  if Reflect.Tiles.DistanceFromTile(Point(3166,3483)) < 5 then
  OS_Smart.__Graphics.DrawClippedText('Begging ' , 'SmallCharsNS', point(20,106), clGreen);

  end;

Function waitMove(c: Integer): boolean;
var
d : integer;
Begin
random(4000);
dismissAllRandoms;
FFlag(0);
(d = (c/5));
wait(c+random(d));
while reflectplayer.IsAnimating or reflectPlayer.IsMoving do
wait(c-random(d));
end;

Function R_Click(textstr : string): boolean;
begin
  FastClick(Mouse_Right);
  if ChooseOption(textstr) then begin
  FFlag(0);
  result := true;
end else
  result := false;
end;

Function OpenBank :boolean;
  var
    Bank: TReflectObject;
begin
   OS_Smart.__Graphics.DrawClippedText('Opening Bank ' , 'SmallCharsNS', point(20,106), clGreen);
   waitMove(300);
   if TReflectionBank.IsOpen then begin
  exit;
  end;
  FFlag(0);
  if  Bank.Find(objGame, 'Bank booth', 5) then begin
    Reflect.Mouse.Move(Bank.GetMSPoint, 5, 5);
     wait(100+random(500));
    R_Click('Bank');
    FFlag(0);
    paint;
 end
 if TReflectionBank.IsOpen then
 begin
 result := true
 end else
 result := true;
end;

Procedure WalkBank;
begin
  OS_Smart.__Graphics.DrawClippedText('Walking to Bank ' , 'SmallCharsNS', point(20,106), clGreen);
  if(getRunEnergy >= (40 +random(40))) and not isUsingRun then begin
    toggleRunning(true); end;
  if Reflect.Tiles.DistanceFromTile(Point(3185,3444)) > 70 then
    begin
      writeln('Error 221');
      exit;
    end;
  if Reflect.Tiles.DistanceFromTile(Point(3185,3444)) > 3 then
    begin
      repeat
        reflectPlayer.BlindWalkMM (Point(3185+RandomRange(0, 2),3444+RandomRange(0, 2)),2);
        wait(randomRange(800,2000));
      until Reflect.Tiles.DistanceFromTile(Point(3185,3444)) <= 3;
    end;
  antibanned();
  paint;
end;

Procedure WalkBeg;
begin
   OS_Smart.__Graphics.DrawClippedText('Walking to Beg ' , 'SmallCharsNS', point(20,106), clGreen);
  if(getRunEnergy >= (40 +random(40))) and not isUsingRun then begin
    toggleRunning(true); end;
  if Reflect.Tiles.DistanceFromTile(Point(3166,3483)) > 70 then
    begin
      writeln('Too far to beg');
      exit;
    end;
  if Reflect.Tiles.DistanceFromTile(Point(3166,3483)) > 5 then
    begin
      repeat
        reflectPlayer.BlindWalkMM (Point(3166+RandomRange(0, 2),3483+RandomRange(0, 1)),2);
        wait(randomRange(800,2000));
      until Reflect.Tiles.DistanceFromTile(Point(3166,3483)) < 5;
    end;
  antibanned();
  paint;
end;





procedure Proggy;
begin
  ClearDebug;
  begin
    Writeln('******************************************************************');
    Writeln('*/////////---------- Aspects Auto Begger v2 --------------\\\\\\\*');
    Writeln('*/////////----------____________________________----------\\\\\\\*');
    Writeln('******************************************************************');
    Writeln('');
    Writeln('*/////////------------ We have: ' + intToStr(trades)   + ' trades made-----------\\\\\\\\\*');
    Writeln('*/////////------------ We have banked: ' + intToStr(banks)   + ' times-----------\\\\\\\\\*');
    Writeln('');
  end;
end;

//depsoit items
procedure deposit;
begin
  if TReflectionBank.IsOpen then begin
    begin
    OS_Smart.__Graphics.DrawClippedText('Deposit Items ' , 'SmallCharsNS', point(20,106), clGreen);
    quickDeposit('inv');
     end;
     Reflect.Bank.Close;
     paint;
end;
 end;

//bankrun
procedure bank;
begin
      if TReflectionInventory.Count() > 17 then
      begin
      Inc(banks);
      Writeln('Walking to Bank');
      walkbank;
      Writeln('Opening Bank');
      openbank;
      Writeln('Depositing Items');
      deposit;
        if TReflectionBank.IsOpen then begin
    begin
    quickDeposit('inv');
     end;
     Reflect.Bank.Close;
end;
      Writeln('Walking back');
      walkbeg;
      end;
      end;

procedure checkposition;
begin
 if Reflect.Tiles.DistanceFromTile(Point(3166,3483)) > 9 then
    begin
      repeat
        reflectPlayer.BlindWalkMM (Point(3166+RandomRange(0, 2),3483+RandomRange(0, 1)),2);
        wait(randomRange(800,2000));
      until Reflect.Tiles.DistanceFromTile(Point(3166,3483)) < 9;

      end
      end;

//Begging
Procedure beg;
begin

    s := 'Taking anyones spare Items, Im poor and taking anything';
    t := 'Taking anything you dont want, literally anything';
    u := 'Begging for items, anything at all helps!';
    v := 'Im a poor noob taking all your junk, trade me!';
    w := 'thank you!';

//Trade Accept
if FindColor(xco,yco,8323199,15,446,199,456) then
begin
          checkposition;
          OS_Smart.__Graphics.DrawClippedText('Trading... ' , 'SmallCharsNS', point(20,106), clGreen);
          MoveMouse(xco+RandomRange(0, 30),yco-RandomRange(0, 5));
          wait(2000+random(100));
          ClickMouse(xco+RandomRange(0, 30),yco-RandomRange(0, 5),mouse_Left);
          wait(2000+random(100));

end;

          if FindColor(xco,yco,49152,236,177,287,194) then
begin
          writeln('Trade Window Open');
          wait(1000+random(100));
          while yco < 301 do
          begin
          if FindColor(xco,yco,16777215,181,280,312,300) then
          break;
          if not FindColor(xco,yco,49152,236,177,287,194) then
          break;
          end
          if FindColor(xco,yco,49152,236,177,287,194) then
          begin
          MoveMouse(xco+RandomRange(0, 30),yco-RandomRange(0, 5));
          wait(2000+random(100));
          ClickMouse(xco+RandomRange(0, 30),yco-RandomRange(0, 5),mouse_Left);
          writeln('First window accepted');
          wait(2000+random(100));

end

//Third Window Accept
if FindColor(xco,yco,49152,200,298,248,312) then
begin

          MoveMouse(xco,yco);
          wait(2000+random(100));
          ClickMouse(xco,yco,mouse_Left);
          writeln('Trade Accepted');
          Inc(trades);
          typeByte(VK_ENTER);
          paint;



// Say Thank you

for i := 0 to length(w) do
begin
  SendKeys(w[i], 50+Random(71), 30+Random(30));
  Wait(99+Random(44));
end;

proggy;


end;
end;

      if TReflectionInventory.Count() > 17 then
      bank;



//Chat
typeByte(VK_ENTER);
for i := 0 to length(s) do
begin
paint;
  SendKeys(s[i], 50+Random(71), 30+Random(30));
  Wait(99+Random(44));
end;
if FindColor(xco,yco,8323199,15,446,199,456) then
beg;

      if TReflectionInventory.Count() > 17 then
      bank;

        typeByte(VK_ENTER);
        paint;

for i := 0 to length(t) do
begin
  SendKeys(t[i], 50+Random(75), 30+Random(30));
  Wait(99+Random(43));
end;
AntiBanned;
if FindColor(xco,yco,8323199,15,446,199,456) then
beg;

      if TReflectionInventory.Count() > 17 then
      bank;

        typeByte(VK_ENTER);
        paint;

for i := 0 to length(u) do
begin
  SendKeys(u[i], 50+Random(77), 30+Random(30));
  Wait(99+Random(37));
end;
if FindColor(xco,yco,8323199,15,446,199,456) then
beg;

      if TReflectionInventory.Count() > 17 then
      bank;

        typeByte(VK_ENTER);
        paint;

for i := 0 to length(v) do
begin
  SendKeys(v[i], 50+Random(70), 30+Random(30));
  Wait(99+Random(39));
end;

if FindColor(xco,yco,8323199,15,446,199,456) then
beg;

      if TReflectionInventory.Count() > 17 then
      bank;

        typeByte(VK_ENTER);
        paint;
              if TReflectionInventory.Count() > 17 then
              bank;
              paint;
end;


Procedure mainLoop;



 Procedure FreeBMP();
  var
    Proggy1: integer;
  begin
  FreeBitmap(Proggy1);
  end;


 procedure loadBMP();
  begin
  Proggy1 := BitmapFromString(519, 34, '');
  end


begin
OS_Smart.__Graphics.DrawClippedText('Starting Bot ' , 'SmallCharsNS', point(20,106), clGreen);
paint;
  if TReflectionBank.isOpen then
    begin
      writeln('Depositing Items');
      Deposit;
      paint;
    end
  else if Reflect.Tiles.DistanceFromTile(Point(3185,3185)) < 9 then
    begin
      if TReflectionInventory.Count() > 17 then
      begin
      writeln('Opening Bank');
      openBank;
      paint;
      end;
    end
    if TReflectionInventory.Count() > 17 then
    begin
      writeln('Inventory Full, Walking to Bank');
      walkBank;
      paint;
      openBank;
    end
    if TReflectionInventory.IsEmpty() then
    begin
    writeln('Walking to Beg');
    walkBeg;
    paint;
    end

    if not TReflectionInventory.IsFull() then
  begin
      if Reflect.Tiles.DistanceFromTile(Point(3166,3483)) < 5 then
  begin
    beg;
    end

end


end;

begin
  initAL;
  Reflect.Setup;
  reflectPlayer.Create;
  if not isLoggedIn() then
  if loginPlayer(false) then
     setCompass('Random');
   setAngle(ANGLE_HIGH);
  begin
    repeat
      mainLoop;
    until (false);
  end;
end;
