//-----------------------------------------------------------------//
//--               SRL Resource Library                          --//
//--                     Fighting routines                       --//
//-----------------------------------------------------------------//
// * function Damage: Integer;                                     // * by WT-Fakawi
// * function FightNPC(Colors: TIntegerArray; Tol, TimeOut: Integer): Boolean; // * by WT-Fakawi & Cazax
// * function InFight: Boolean;                                    // * by WT-Fakawi, N1ke! & ZephyrsFury
// * function IsFightAt(x, y: Integer): Boolean;                   // * by RealRune & N1ke!
// * function FindAllHPBars(Sx, Sy, x1, y1, x2, y2: Integer): Array of TPointArray; // * by n3ss3s
// * function GetHitsIn(Sx, Sy, x1, y1, x2, y2: Integer): TIntegerArray; // * by n3ss3s
// * function FindMainScreenHits(Bar: Integer): Integer;           // * by n3ss3s

{*******************************************************************************
function Damage: Integer;
By: WT-Fakawi
Description: Returns the amount of damage inflicted on current player.
*******************************************************************************}
function Damage:Integer;
begin
  Result := (GetSkillInfo('hitpoints', False) - GetSkillInfo('hitpoints', True));
end;

(*
InFight
~~~~~~~~~~~

.. code-block:: pascal

    function InFight: Boolean;

Returns as True if player is in a fight.
See "srl_FindFight;" in /core/Globals.scar for more info.

.. note::

    by Narcle

Example:

.. code-block:: pascal

    while InFight do
    begin
      CheckHP;
      EatFood;
    end;

*)
function InFight: Boolean;
begin
  Result := srl_InFight;
end;

(*
OthersInFight
~~~~~~~~~~~

.. code-block:: pascal

    Function OthersInFight: Boolean;

Results true if something else (NPC or Player) is InFight not including
your own HP Bar (InFight).  So if your HP Bar is still showing but there
is none else up this will Result true.

.. note::

    by Narcle

Example:

.. code-block:: pascal

    if not InFight or not OthersInFight then
      Break;//Out of wait fight loop

*)
Function OthersInFight: Boolean;
var
  x, y, i: integer;
  Colors: TIntegerArray;
begin
  Colors := [HP_BAR_COLOR1, HP_BAR_COLOR2];
  for i := 0 to High(Colors) do
    if FindColorTolerance(x, y, Colors[i], MSX1, MSY1, MFBox.X1, MSY2, 2) or
       FindColorTolerance(x, y, Colors[i], MSX1, MSY1, MSX2, MFBox.Y1, 2) or
       FindColorTolerance(x, y, Colors[i], MFBox.X2, MSY1, MSX2, MSY2, 2) or
       FindColorTolerance(x, y, Colors[i], MSX1, MFBox.Y2, MSX2, MSY2, 2) then
    begin
      Result := True;
      Exit;
    end;
end;

(*
IsFightAt
~~~~~~~~~~~

.. code-block:: pascal

    function IsFightAt(x, y: Integer): Boolean;

Results True if a mainscreen HP bar is found near point X, Y.
See srl_InFight in Globals.scar for more info.

.. note::

    by Narcle

Example:

.. code-block:: pascal

    if IsFightAt(x, y) then
      Continue;

*)
function IsFightAt(var X, Y: Integer): Boolean;
begin
  Result := Length(GetFightBarTPA(IntToBox(Max(MSX1, x-20), Max(MSY1, y-40),
              Min(MSX2, x+20), Min(MSY2, y+10)))) > 0;
end;

(*
FindAllHPBars
~~~~~~~~~~~

.. code-block:: pascal

    function FindAllHPBars(Sx, Sy, x1, y1, x2, y2: Integer): TBoxArray;

Finds all the HP bars (the TPAs of them) in the box formed by
 x1, y1, x2, y2. Recommended to set Sx and Sy to MSCX and MSCY, so Result[0]
 is your own Bar or the closest one to you.

.. note::

    by Cazax & Narcle

Example:

.. code-block:: pascal


*)
function FindAllHPBars(Sx, Sy, x1, y1, x2, y2: Integer): TBoxArray;
var
  ATPA : T2DPointArray;
  TPA : TPointArray;
  H, I : Integer;
begin
  TPA := GetFightBarTPA(IntToBox(X1, Y1, X2, Y2));
  if Length(TPA) < 1 then
    Exit;
  ATPA := TPAToATPAEx(TPA, HP_BAR_WIDTH , HP_BAR_HEIGHT);
  H := High(ATPA);
  SetLength(Result, Length(ATPA));
  for I := 0 to H do
    Result[i] := GetTPABounds(ATPA[i]);
end;

(*
GetHits
~~~~~~~~~~~

.. code-block:: pascal

    function GetHits(Sx, Sy, x1, y1, x2, y2: Integer): TIntegerArray;

Finds all HP percents of the HP bars in x1, y1, x2, y2.
 READ THE DESCRIPTION OF FindAllHPBars!

.. note::

    by n3ss3s & Cazax

Example:

.. code-block:: pascal


*)
function GetHitsIn(Sx, Sy, x1, y1, x2, y2: Integer): TIntegerArray;
var
   E: Extended;
   I, H: Integer;
   TBA : TBoxArray;
begin
  TBA := FindAllHPBars(Sx, Sy, x1, y1, x2, y2);
  SetArrayLength(Result, GetArrayLength(TBA));
  H := High(TBA);
  for I := 0 To H Do
  begin
    E := CountColorTolerance(56488, TBA[i].x1, TBA[i].y1, TBA[i].x2, TBA[i].y2, 43) / 60;
    Result[i] := Round(100 * E);
  end;
end;

{*******************************************************************************
function FindMainScreenHits(Bar: Integer): Integer;
By: n3ss3s
Description: Returns the rounded HP percent of the hp bar Bar counting out from
 main screen centre, if Bar is 0, it's your own bar or the closest one to you.
 If could not find the bar Bar, returns -1 so you can't confuse it to 0 HP%.
*******************************************************************************}
function FindMainScreenHits(Bar: Integer): Integer;
var
   TIA: TIntegerArray;
begin
  TIA := GetHitsIn(MSCX, MSCY, MSX1, MSY1, MSX2, MSY2);
  try
    Result := TIA[bar];
  except
    Result := -1;
  end;
end;

{*******************************************************************************
function SetFightModeByLevel(TrainLowestSkill : Boolean) : Boolean;
By: Rich
Description: Changes fight style to train lowest or highest skill depending on
             TrainLowestSkill.
Usage example: Attack = 31, Defense = 45, Strength = 26
               TrainLowestSkill = True -> Strength will be trained
               TrainLowestSkill = False -> Defense will be trained
Date: 21st Feb 2011
*******************************************************************************}
function SetFightModeByLevel(TrainLowestSkill: Boolean) : Boolean;
var
  HL : Integer;
  S, Skills : TIntegerArray;
begin
  Result:= False;
  if (not LoggedIn) then
    Exit;

  Skills := [GetSkillLevel('attack'), GetSkillLevel('strength'), GetSkillLevel('defence')];
  S := [Skills[0], Skills[1], Skills[2]];

  QuickSort(Skills);

  if TrainLowestSkill then
    HL := Low(Skills)
  else
    HL := High(Skills);

  case Skills[HL] of
    S[0]: Result := SetFightMode(1);
    S[1]: Result := SetFightMode(2);
    S[2]: Result := SetFightMode(3);
  end;
end;
