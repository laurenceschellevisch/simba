(*
Antirandoms
===========

The 'master' SRL randoms file.  The 4 "core" functions (solverandoms,
FindAllrandoms, FindNormalRandoms, and FindNonInventoryRandoms) shouldn't ever
need to be updated if a new random event is added to the game, or a current one
is removed.  For a description of how each solver works, see the top of that
solver's simba file.

*)

//Function prototypes
function RandomDirection: string; forward;
function FindNormalRandoms(): boolean; forward;
{$IFDEF ANTIRANDOM_CUSTOMSETSOLVER}
function AntiRandom_CustomSetSolver(name : String; args : T2DPointArray) : Boolean; forward;
{$ENDIF}


// include all the solver files
{$include_once common.simba}
{$include_once box.simba}
{$include_once rewards.simba}
{$include_once demon.simba}
{$include_once maze.simba}
{$include_once evilbob.simba}
{$include_once mordaut.simba}
{$include_once certers.simba}
{$include_once mime.simba}
{$include_once abyss.simba}
{$include_once frog.simba}
{$include_once pinball.simba}
{$include_once sandwich.simba}
{$include_once pillory.simba}
{$include_once capnarnav.simba}
{$include_once quiz.simba}
{$include_once leo.simba}
{$include_once prisonpete.simba}
{$include_once forester.simba}
{$include_once molly.simba}
{$include_once beekeeper.simba}
{$include_once skills.simba}

// represent the elements of the SRL_Randoms array
const
  SRL_RANDOMS_COUNT = 18;
  SRL_RAND_DEMON     = 0;
  SRL_RAND_MAZE      = 1;
  SRL_RAND_EVILBOB   = 2;
  SRL_RAND_MORDAUT   = 3;
  SRL_RAND_CERTERS   = 4;
  SRL_RAND_MIME      = 5;
  SRL_RAND_ABYSS     = 6;
  SRL_RAND_FROG      = 7;
  SRL_RAND_PINBALL   = 8;
  SRL_RAND_PILLORY   = 9;
  SRL_RAND_ARNAV     = 10;
  SRL_RAND_QUIZ      = 11;
  SRL_RAND_LEO       = 12;
  SRL_RAND_PETE      = 13;
  SRL_RAND_FORESTER  = 14;
  SRL_RAND_BEEKEEPER = 15;
  SRL_RAND_MOLLY     = 16;
  SRL_RAND_REWARDS   = 17;

  SRL_SKILL_RANDOMS_COUNT     = 5;
  SRL_SKILL_RAND_POISONGAS    = 0;
  SRL_SKILL_RAND_BIGFISH      = 1;
  SRL_SKILL_RAND_SMOKINGROCK  = 2;
  SRL_SKILL_RAND_ENT          = 3;
  SRL_SKILL_RAND_WHIRLPOOL    = 4;

  SRL_COMBAT_RAND             = 0;
  SRL_COMBAT_RAND_POISON      = 1;

type
  TRandom = record
    name: string;
    solve, detect: function(): boolean;
    solved, failed: integer; // for SRL stats/randoms report
    isInvRandom, hasRewardBox, disabled: boolean;
  end;
  TRandomEx = record
    name: string;
    solve, detect: function(var args : T2DPointArray): boolean;
    solved, failed: integer;
    isInvRandom, hasRewardBox, disabled: boolean;
   end;
var
  SRL_Randoms: array[0..(SRL_RANDOMS_COUNT - 1)] of TRandom;
  SRL_SkillRandoms :  array[0..(SRL_SKILL_RANDOMS_COUNT - 1)] of TRandomEx;
  SRL_RandomsSet, SRL_DisableRandoms, SRL_RandomScreenShot: boolean;
  SRL_FishingRandoms, SRL_ThievingRandoms, SRL_WoodCuttingRandoms,SRL_MiningRandoms : array of TRandomEx;
  SRL_CombatRandomsEx : array[0..1] of TRandomEx;

// needs to be included after variables are declared
{$include_once randomtool.simba}

(*
SRLRandomsReport
~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function SRLRandomsReport(): boolean;

Prints a random events progress report for the current script.

.. note::

    Author: Coh3n
    Last Modified: Jan. 22nd, 2012 by Coh3n

Example:

.. code-block:: pascal

    SRLRandomsReport();
*)
procedure SRLRandomsReport();
var
  i: integer;
begin
  writeln('|====================================|');
  writeln('|              ~ SRL ~               |');
  writeln('|           Randoms Report           |');
  writeln('|────────────────────────────────────|');
  writeln('|                                    |');

  for i := 0 to high(SRL_Randoms) do
  begin
    if (SRL_Randoms[i].name = '') then
      continue;

    if (SRL_Randoms[i].solved > 0) then
      writeln('|    '+padR(SRL_Randoms[i].name
        +' Solved', 22)+' ~ '+padR(toStr(SRL_Randoms[i].solved), 7)+'|');

    if (SRL_Randoms[i].failed > 0) then
      writeln('|    '+padR(SRL_Randoms[i].name
        +' Failed', 22)+' ~ '+padR(toStr(SRL_Randoms[i].failed), 7)+'|');
  end;

  writeln('|                                    |');
  writeln('|────────────────────────────────────|');
  writeln('|====================================|');
end;

(**
 * Author: Coh3n
 * Description: Sets the SRL_Randoms global array.
 *)
procedure _SetRandoms();
var
  i: integer;
begin
  if (SRL_RandomsSet) then
    exit;

  with SRL_Randoms[SRL_RAND_DEMON] do
  begin
    name := 'Drill Demon';
    solve := @DD_Solve;
    detect := @DD_Detect;
    isInvRandom := false;
    hasRewardBox := true;
  end;

  with SRL_Randoms[SRL_RAND_MAZE] do
  begin
    name := 'Maze';
    solve := @Maze_Solve;
    detect := @Maze_Detect;
    isInvRandom := false;
    hasRewardBox := false;
    disabled := true;
  end;

  with SRL_Randoms[SRL_RAND_EVILBOB] do
  begin
    name := 'Evil Bob';
    solve := @EB_Solve;
    detect := @EB_Detect;
    isInvRandom := false;
    hasRewardBox := true;
  end;

  with SRL_Randoms[SRL_RAND_MORDAUT] do
  begin
    name := 'Mordaut';
    solve := @MD_Solve;
    detect := @MD_Detect;
    isInvRandom := false;
    hasRewardBox := true;
  end;

  with SRL_Randoms[SRL_RAND_CERTERS] do
  begin
    name := 'Certers';
    solve := @CT_Solve;
    detect := @CT_Detect;
    isInvRandom := false;
    hasRewardBox := true;
  end;

  with SRL_Randoms[SRL_RAND_MIME] do
  begin
    name := 'Mime';
    solve := @Mime_Solve;
    detect := @Mime_Detect;
    isInvRandom := false;
    hasRewardBox := true;
  end;

  with SRL_Randoms[SRL_RAND_ABYSS] do
  begin
    name := 'Abyss';
    solve := @Abyss_Solve;
    detect := @Abyss_Detect;
    isInvRandom := false;
    hasRewardBox := true;
  end;

  with SRL_Randoms[SRL_RAND_FROG] do
  begin
    name := 'Frog';
    solve := @Frog_Solve;
    detect := @Frog_Detect;
    isInvRandom := false;
    hasRewardBox := true;
  end;

  with SRL_Randoms[SRL_RAND_PINBALL] do
  begin
    name := 'Pinball';
    solve := @PB_Solve;
    detect := @PB_Detect;
    isInvRandom := false;
    hasRewardBox := true;
  end;

  with SRL_Randoms[SRL_RAND_PILLORY] do
  begin
    name := 'Pillory (Cage)';
    solve := @PL_Solve;
    detect := @PL_Detect;
    isInvRandom := false;
    hasRewardBox := true;
  end;

  with SRL_Randoms[SRL_RAND_ARNAV] do
  begin
    name := 'Cap''n Arnav';
    solve := @CA_Solve;
    detect := @CA_Detect;
    isInvRandom := false;
    hasRewardBox := true;
  end;

  with SRL_Randoms[SRL_RAND_QUIZ] do
  begin
    name := 'Quiz Master';
    solve := @Quiz_Solve;
    detect := @Quiz_Detect;
    isInvRandom := false;
    hasRewardBox := true;
  end;

  with SRL_Randoms[SRL_RAND_LEO] do
  begin
    name := 'Leo';
    solve := @Leo_Solve;
    detect := @Leo_Detect;
    isInvRandom := false;
    hasRewardBox := true;
    disabled := true;
  end;

  with SRL_Randoms[SRL_RAND_PETE] do
  begin
    name := 'Prison Pete';
    solve := @PP_Solve;
    detect := @PP_Detect;
    isInvRandom := false;
    hasRewardBox := true;
    disabled := true;
  end;

  with SRL_Randoms[SRL_RAND_FORESTER] do
  begin
    name := 'Freaky Forester';
    solve := @FF_Solve;
    detect := @FF_Detect;
    isInvRandom := false;
    hasRewardBox := true;
  end;

  with SRL_Randoms[SRL_RAND_BEEKEEPER] do
  begin
    name := 'Beekeeper';
    solve := @BK_Solve;
    detect := @BK_Detect;
    isInvRandom := false;
    hasRewardBox := true;
  end;

  with SRL_Randoms[SRL_RAND_MOLLY] do
  begin
    name := 'Molly';
    solve := @Molly_Solve;
    detect := @Molly_Detect;
    isInvRandom := false;
    hasRewardBox := true;
    disabled := true;
  end;

  with SRL_Randoms[SRL_RAND_REWARDS] do
  begin
    name := 'Rewards';
    solve := @RD_Solve;
    detect := @RD_Detect;
    isInvRandom := true;
    hasRewardBox := true;
  end;

  with SRL_SkillRandoms[SRL_SKILL_RAND_POISONGAS] do
  begin
    name := 'Poison Gas';
    solve := @SkillPS_Solve;
    detect := @SkillPS_Detect;
    isInvRandom := false;
    hasRewardBox := false;
  end;
  with SRL_SkillRandoms[SRL_SKILL_RAND_ENT] do
  begin
    name := 'Ent';
    solve := @SkillEnt_Solve;
    detect := @SkillEnt_Detect;
    isInvRandom := false;
    hasRewardBox := false;
  end;
  with SRL_SkillRandoms[SRL_SKILL_RAND_SMOKINGROCK] do
  begin
    name := 'Smoking Rock';
    solve := @SkillSmokeR_Solve;
    detect := @SkillSmokeR_Detect;
    isInvRandom := false;
    hasRewardBox := false;
  end;
  with SRL_SkillRandoms[SRL_SKILL_RAND_WHIRLPOOL] do
  begin
    name := 'WhirlPool';
    solve := @SkillWhirl_Solve;
    detect := @SkillWhirl_Detect;
    isInvRandom := false;
    hasRewardBox := false;
  end;

  with SRL_CombatRandomsEx[SRL_COMBAT_RAND] do
    begin
    name := 'Combat';
    solve := @Combat_Solve;
    detect := @Combat_Detect;
    isInvRandom := false;
    hasRewardBox := false;
  end;
  with SRL_CombatRandomsEx[SRL_COMBAT_RAND_POISON] do
    begin
    name := 'Combat Poison';
    solve := @CombatPoison_Solve;
    detect := @CombatPoison_Detect;
    isInvRandom := false;
    hasRewardBox := false;
  end;

   SRL_FishingRandoms     := [SRL_SkillRandoms[SRL_SKILL_RAND_WHIRLPOOL],SRL_SkillRandoms[SRL_SKILL_RAND_BIGFISH]];
   SRL_ThievingRandoms    := [SRL_SkillRandoms[SRL_SKILL_RAND_POISONGAS]];
   SRL_WoodCuttingRandoms := [SRL_SkillRandoms[SRL_SKILL_RAND_ENT]];
   SRL_MiningRandoms      := [SRL_SkillRandoms[SRL_SKILL_RAND_SMOKINGROCK]];


  // disable all randoms if set to

  if (SRL_DisableRandoms) then
  begin
    addToSRLLog('**** WARNING: Disabling random event solvers');

    for i := 0 to high(SRL_Randoms) do
      SRL_Randoms[i].disabled := true;
  end;

  SRL_RandomsSet := true;
end;

(**
 * Author: Coh3n
 * Description: Detects and solves the random of index 'rand' in the SRL_Randoms
 * array.  Returns true if a random is found, not necessarily if it is solved.
 * Manually returns true if the random was solved by hand using SRL's Random
 * tool.
 *)
function _SolveRandom(rand: integer; var manually: boolean): boolean;
var
  solved: boolean;
  oldCompass: extended;
begin
  if (not loggedIn) then
    exit;

  if ({$IFDEF Lape}@{$ENDIF}SRL_Randoms[rand].detect <> nil) and (SRL_Randoms[rand].detect()) then
  begin
    addToSRLLog('***** Found Random: '+SRL_Randoms[rand].name+' *****');
    players[currentPlayer].rand := SRL_Randoms[rand].name;
    result := true;

    if SRL_HasProc(SRL_OnFindRandom) then
      SRL_Procs[SRL_OnFindRandom]();

    // see if the script is using SRL's random tool
    if (RT_UseRandomTool) then
      if (RT_Execute()) then
      begin
        addToSRLLog('***** Solved Random Manually: '+SRL_Randoms[rand].name+' *****');
        manually := true;
        exit;
      end;

    // only take a screenshot if needed
    if ((SRL_RandomScreenShot) and (not SRL_Randoms[rand].isInvRandom)) then
      takeScreen(SRL_Randoms[rand].name);

    // if solver isn't disabled, solve it
    if (not SRL_Randoms[rand].disabled) then
    begin
      oldCompass := rs_GetCompassAngleDegrees();

      if ({$IFDEF Lape}@{$ENDIF}SRL_Randoms[rand].solve <> nil) and (SRL_Randoms[rand].solve()) then
      begin
        addToSRLLog('***** Solved Random: '+SRL_Randoms[rand].name+' *****');
        players[currentPlayer].rand := '';
        inc(SRL_Randoms[rand].solved);
        solved := true;
      end;

      makeCompass(oldCompass); // restore the compass to its original angle

    end else
      addToSRLLog(SRL_Randoms[rand].name+' solver currently disabled');

    if (not solved) then
    begin
      addToSRLLog('***** Failed Random: '+SRL_Randoms[rand].name+' *****');

      // solver didn't fail, it's disabled
      if (not SRL_Randoms[rand].disabled) then
        inc(SRL_Randoms[rand].failed);

      // set player to false and logout if the solver failed or is disabled
      players[currentPlayer].active := false;
      result := false;
      logout();
    end;
  end;
end;

(**
 * Author: Coh3n
 * Description: Finds and solves all the randoms.  Checks inventory if checkInv
 * is set to true. This function should only be called in FindNormalRandoms and
 * FindNonInventoryRandoms.
 *)
function _Callback_SolveRandom: Boolean;
var
  b: Boolean;
begin
  Result := _SolveRandom(SRL_RAND_REWARDS, b);
end;

Var
  NicknameBMP:  integer;
  NicknameSet: boolean;

{*******************************************************************************
procedure FreeScreenName;
by: DannyRS
Description: Frees screenname BMP from memory
*******************************************************************************}
procedure FreeScreenName;
begin
  FreeBitmap(NickNameBMP);
end;

{*******************************************************************************
procedure SetScreenName(ScreenName: String);
by: WT-Fakawi edited by Ashaman88, Justin
Description: Sets screenname for use with FindTalk and one Player.
*******************************************************************************}

procedure SetScreenName(ScreenName: string);
begin
  if (ScreenName = '') then
    Exit;

  NickNameBMP := BitmapFromText(ScreenName, UpChars07);

  if (not NicknameSet) then
    AddOnTerminate('FreeScreenName');

  NicknameSet := true;
end;

{*******************************************************************************
function SolveTalkingRandom(RawMenuText: String): Boolean;
By: Ashaman88
Description: Talking Random Handler. Called by FindTalkingRandom. (FindTalk)
*******************************************************************************}

function SolveTalkingRandom(RawMenuText: string): Boolean;
var
  IC, FI: Byte;
 // A: Boolean;
begin
  TakeScreen('Solving Talking Random - '+RawMenuText);
// Security Guard Handler
  if (Pos('uard', RawMenuText) <> 0) or (Pos('ecur', RawMenuText) <> 0) then
  begin
    writeln('Found GUARD random');
    for IC := 1 to 2 do
    begin
      Wait(1000 + Random(500));
      ClickToContinue;
      Wait(50 + Random(50));
    end;
    Result := True;
    Exit;
  end;

{// Freaky Forrester Handler.

  if (Pos('reak', RawMenuText) <> 0) or (Pos('orest', RawMenuText) <> 0) then
  begin
    writeln('Found FORRESTER random');
    CloseWindow;
    Logout;
    Result := False;
    Exit;
  end;          }

// Sandwich Lady Handler.

  if (Pos('ady', RawMenuText) <> 0) or (Pos('ich', RawMenuText) <> 0) then
  begin
    writeln('Found SANDWICH random');
    ClickToContinue;
    Wait(500 + Random(500));
    if SL_Solve then
    begin
      Result := True;
      CloseWindow;
      Exit;
    end
    else
    begin
      CloseWindow;
      Result := False;
      Logout;
      Exit;
    end;
  end;

  // Genie Handler.

  if (Pos('Geni', RawMenuText) <> 0) or (Pos('enie', RawMenuText) <> 0) then
  begin
    writeln('Found geni random');
    Wait(1000 + Random(500));
    Result := True;
    //if SolveGenie(LampSkill) then
    begin
      Exit;
    end
    //else
    begin
      Exit;
    end;
  end;

  // Certer Handler

  if (Pos('ile', RawMenuText) <> 0) or (Pos('iles', RawMenuText) <> 0) then
  begin
    writeln('Found certer random');
    Wait(1000 + Random(500));
//    ClickToContinue;

   // if UseCerterSolver then
   //   A := SolveCerter
  //  else
   //   A := FindCerter;

   // if A then
    begin
      Exit;
    end
    //else
    begin
      Logout;
      Exit;
    end;
  end;

  // Frog Handler

  if (Pos('rog', RawMenuText) <> 0) or (Pos('Fro', RawMenuText) <> 0) then
  begin
    writeln('Found Frog random');
   // if SolveFrog then
    begin
      Exit;
    end
    //else
    begin
      for FI := 0 to 3 do
        ClickToContinue;
      Wait(10000);
    //  if DetectFrogCave then if SolveFrogSwamp then
        begin
         // Frogs := Frogs + 1;
          Exit;
        end
      //  else
        begin
      //    NOFrogs := NOFrogs + 1;
      //    WriteLn('Frogs Missed Twice');
          Logout;
      //    SRLRandomsReport;
          Exit;
        end;
    end
  end;

  // Rick Handler

  if (Pos('ick', RawMenuText) <> 0) or (Pos('urpen', RawMenuText) <> 0) then
  begin
    writeln('Found RICK random');
    Wait(1000 + Random(500));
    ClickToContinue;
   // Ricks := Ricks + 1;
    //SRLRandomsReport;
    result := true;
    Exit;
  end;

  // Dwarf Handler. (Might add: DwarfItem)

  if (Pos('runk', RawMenuText) <> 0) or (Pos('warf', RawMenuText) <> 0) then
  begin
    writeln('Found DWARF random');
    Wait(1000 + Random(500));
    ClickToContinue;
    //Dwarfs := Dwarfs + 1;
    //SRLRandomsReport;
    Result := true;
    Exit;
  end;

  // Cap 'n Hand (ler).

  if (Pos('Cap ', RawMenuText) <> 0) or (Pos('Hand', RawMenuText) <> 0) then
  begin
    writeln('Found CAP random');
    Wait(1000 + Random(500));
    ClickToContinue;
   // Caps := Caps + 1;
    //SRLRandomsReport;
    result := true;
    Exit;
  end;

  // Mysterious Old Man Handler.

  if (Pos('yste', RawMenuText) <> 0) or (Pos('rious', RawMenuText) <> 0) then
  begin
    writeln('Found OLD MAN random');
    Wait(1000 + Random(500));
    ClickToContinue;
   // Oldmen := Oldmen + 1;
    //SRLRandomsReport;
    result := true;
    Exit;
  end;

  //Dr Jekyll Handler

  if (Pos('eky', RawMenuText) <> 0) or (Pos('kyll', RawMenuText) <> 0) or (Pos('yde', RawMenuText) <> 0) then
  begin
    writeln('Found JEKYLL/HYDE random');
    for IC := 1 to 4 do
    begin
      Wait(1000 + Random(500));
      ClickToContinue;
    end;
    result := true;
    //Jekylls := Jekylls + 1;
  end;
end;

{*******************************************************************************
function ChooseOptionGetMenuText(RawMenuText: String; Texts: TStringArray; Action: fnct_ActionOptions): Boolean;
By: Ashaman88.
Description: Gets the option of which random we have
*******************************************************************************}


function ChooseOptionGetMenuText(var RawMenuText: string; Texts: TStringArray; Action: fnct_ActionOptions): Boolean;
var
   B: TBox;
   i, H, x, R: Integer;
   T: TPoint;
   Options: array of TOptions;
begin
  Result := False;
  Options := GetChooseOptions();
  if (Length(Options) < 1) then
    Exit;
  H := High(Options);
  for i := 0 To H do
  begin
    if ArrInStr(Texts, Options[i].Str) then
    begin
      Result := True;
      RawMenuText:= Options[i].Str;
      B := Options[i].Bounds;
      GetMousePos(T.x, T.y);
      R:= Min(((B.X2 - B.X1) shr 1), 5); //Prevents x2 passed to MouseBoxEx being smaller than x1
      case Action of
        ClickLeft:
          if PointInBox(T, B) then
            ClickMouse2(true)
          else
            MouseBoxEx(B.x1 + R, B.Y1, B.x2 - R, B.Y1 + 5, R, mouse_Left);
        Move:
          if not PointInBox(T, B) then
            MouseBoxEx(B.x1 + R, B.Y1, B.x2 - R, B.Y1 + 5, R, mouse_move);

        Nothing:
          begin
          end;

        else
          srl_warn('ChooseOptionMultiEx', 'ClickRight not a valid click for RS menus!', warn_AllVersions);
      end;
      Exit;
    end;
  end;
  B := Options[0].BigBox;//to mmouse away
  if Action <> Nothing then
  begin
    x := Max(B.X1 - 52, 0);
    if x = 0 then
      x := B.X2+10;
    MMouse(x, Max(B.Y1 - 50, 0), 40, B.Y2-B.Y1);
    Wait(200 + Random(100));
  end;
end;

{*******************************************************************************
function FindTalk: Boolean;
by: Ashaman88
Description: Searches screen for NickName and handles ALL Talking Randoms
*******************************************************************************}


const gTalkOldComputer = False;
const gTalkSaveBitmap = False;

var
  gtalksBox, YelSkipBoxs: array of TBox;
  gTalksCount: Integer;

function FindTalk: Boolean;
var
  ax, ay, yCount, zCount, Count2, x1, y1, x2, y2, Count1, bmpScreen: Integer;
  RawMenuText: string;
begin
  Result := False;
  if (GetArrayLength(Players) < 1) then Exit;

  if FindColor(ax, ay, 65535, MSX1, MSY1, MSX2, MSY2) then
  begin

    SetArrayLength(gtalksBox, 0);
    SetArrayLength(YelSkipBoxs, 0);

    y1 := ay;
    if ( ( ay + 5 ) > 334 ) then y2 := 334 else y2 := ay + 5;

    x1 := ax; x2 := x1;
    zCount := 0;

    repeat
      if FindColor(ax, ay, 65535, x2, y1 + 2, x2 + 3, y2 + 3) then
        zCount := 0
      else
        zCount := zCount + 1;

      if ( zCount = 4 ) then Break;
      x2 := x2 + 3;
    until ( x2 + 3 > 515 );

    if ( x2 + 3 <= 515 ) then x2 := x2 - 12;

    if (x2 - x1 >= length(Players[CurrentPlayer].Nick) * 4) then
    begin

      x1 := x1 - 8;
      y1 := y1 - 8;
      x2 := x2 + 8;
      y2 := y2 + 8;

      if ( x1 < 0 ) then x1 := 0;
      if ( y1 < 0 ) then y1 := 0;
      if ( x2 > 515 ) then x2 := 515;
      if ( y2 > 334 ) then y2 := 334;

      Count2 := Count2 + 1;
      Count1 := Count1 + 1;
      SetArrayLength(gtalksBox, Count2);
      gtalksBox[Count2 - 1].x1 := x1;
      gtalksBox[Count2 - 1].y1 := y1;
      gtalksBox[Count2 - 1].x2 := x2;
      gtalksBox[Count2 - 1].y2 := y2 + 6;

      SetArrayLength(YelSkipBoxs, Count1);
      YelSkipBoxs[Count1 - 1].x1 := x1;
      YelSkipBoxs[Count1 - 1].y1 := y1;
      YelSkipBoxs[Count1 - 1].x2 := x2;
      YelSkipBoxs[Count1 - 1].y2 := y2;

    end else
    begin
      y1 := y1 - 2;
      y2 := y2 + 8;
      x1 := x1 - 5;
      x2 := x2 + 5;
      if ( x1 < 0 ) then x1 := 0;
      if ( y1 < 0 ) then y1 := 0;
      if ( x2 > 515 ) then x2 := 515;
      if ( y2 > 334 ) then y2 := 334;

      Count1 := Count1 + 1;
      SetArrayLength(YelSkipBoxs, Count1);
      YelSkipBoxs[Count1 - 1].x1 := x1;
      YelSkipBoxs[Count1 - 1].y1 := y1;
      YelSkipBoxs[Count1 - 1].x2 := x2;
      YelSkipBoxs[Count1 - 1].y2 := y2;
    end;

    if ( GetArrayLength(gtalksBox) <> 0 ) then
    begin
      for yCount := 0 to GetArrayLength(gtalksBox) - 1 do
      begin
        if FindBitmapMaskTolerance(NickNameBMP, ax, ay, gtalksBox[yCount].x1, gtalksBox[yCount].y1, gtalksBox[yCount].x2, gtalksBox[yCount].y2, 0, 40) then
        begin
          WriteLn('Found NickName');
          ax := (gtalksBox[yCount].x2 + gtalksBox[yCount].x1) shr 1;
          ay := gtalksBox[yCount].y2 - 2;

          if gTalkSaveBitmap then
          begin
            bmpScreen := BitmapFromString(515, 334, '');
            CopyClientToBitmap(bmpScreen, 1, 1, 515, 334);

            if ( gtalksBox[yCount].x1 = 0 ) then x1 := 1 else x1 := gtalksBox[yCount].x1;
            if ( gtalksBox[yCount].y1 = 0 ) then y1 := 1 else y1 := gtalksBox[yCount].y1;

            gTalksCount := gTalksCount + 1;
            for Count1 := -1 to 1 do
              for Count2 := -1 to 1 do
                FastSetPixel(bmpScreen, Count1 + x1, Count2 + y1, 255);

            if ( gtalksBox[yCount].x2 = 515 ) then x1 := 515 else x1 := gtalksBox[yCount].x2;
            if ( gtalksBox[yCount].y2 = 334 ) then y1 := 334 else y1 := gtalksBox[yCount].y2;

            for Count1 := -1 to 1 do
              for Count2 := -1 to 1 do
                FastSetPixel(bmpScreen, Count1 + x1, Count2 + y1, 255);

            for Count1 := -1 to 1 do
              for Count2 := -1 to 1 do
                FastSetPixel(bmpScreen, Count1 + ax, Count2 + ay, 255);
            SaveBitmap(bmpScreen, ScriptPath + 'FTalk' + IntToStr(gTalksCount) + '.bmp');
            FreeBitmap(bmpScreen);
          end;

          MMouse(ax, ay, 0, 0);
          Wait(100 + Random(50));
          if WaitUpTextMulti(['Talk', 'lk-to', 'uard', 'ard','security','ecurity','curity'],RandomRange(300,400)) then
          begin
            Mouse(ax, ay, 0, 0, mouse_Right);
            Wait(300 + Random(100));


            if (ChooseOptiongetMenuText(RawMenuText, ['Talk', 'lk-t'], ClickLeft)) then
            begin
              WriteLn('******** FOUND TALKING RANDOM TEXT********: ' + RawMenuText);
              Flag;
              Wait(1000 + Random(500))
              if SolveTalkingRandom(RawMenuText) then
                Result := True;
              Exit;
            end;
          end;
        end;
      end;
    end;
  end;
end;

{*******************************************************************************
function FTWait(WaitTime: Integer): Boolean;
by: DannyRS
Description: Used to replace wait(); to watch for NickName randoms while waiting
*******************************************************************************}
function FTWait(WaitTime: Integer): Boolean;
var
  _FTW_StartTime: Integer;
begin
  _FTW_StartTime := GetSystemTime;
  repeat
    if FindTalk then Result := True;
    Wait(50);
  until ((GetSystemTime - _FTW_StartTime) > WaitTime);
end;

function FNRWait(WaitTime: Integer): Boolean;
var
  _FTW_StartTime: Integer;
begin
  _FTW_StartTime := GetSystemTime;
  repeat
    if FindNormalRandoms then Result := True;
    Wait(50);
  until ((GetSystemTime - _FTW_StartTime) > WaitTime);
end;

function RandomDirection: string;
var
  direction: tstringarray;
  i: integer;
begin

  for i:=0 to High(SRL_FindRandomRunDirection) do
    if SRL_FindRandomRunDirection[i] <> '' then
      setlength(direction, length(direction) + 1);

  if length(direction) = 0 then
  begin
    writeln('No direction found, setting manually');
    setlength(direction, 3);
    SRL_FindRandomRunDirection := ['N', 'E', 'S', 'W'];
  end;

  direction := SRL_FindRandomRunDirection;

  result:= direction[Random(High(direction)+1)];
  writeln('Running ' + result);
end;
procedure _resetColorMods( tmpTS : LongInt;tmpH,tmpS,tmpMod : Extended);
begin
  SetColorToleranceSpeed(tmpTS);
  SetToleranceSpeed2Modifiers(tmpH,tmpS);
  SetToleranceSpeed3Modifier(tmpMod);
end;
function _FindAllRandoms(checkInv: boolean; randomSet : array of array of TRandomEx): boolean;
var
  i,x : integer;
  manually,customSolved : boolean;
  custom : T2DPointArray;
  tmpTS : LongInt;
  tmpH,tmpS,tmpMod : Extended;
begin
  tmpTS := GetToleranceSpeed;
  GetToleranceSpeed2Modifiers(tmpH,tmpS);
  tmpMod := GetToleranceSpeed3Modifier();
  // no tabs exists if bank is open; could throw false positives
  if (not loggedIn()) or (bankScreen()) then
    exit;

  if (not SRL_RandomsSet) then
    _SetRandoms();

  if SRL_CombatRandoms then
    if SRL_infight then
    begin
      runaway(RandomDirection, False, 1, RandomRange(2000,4000));
      result := true;
      exit;
    end;

  for x := 0 to High(randomSet) do
  for i := 0 to High(randomSet[x]) do
  begin
  _resetColorMods( tmpTS,tmpH,tmpS,tmpMod);
    if randomSet[x][i].detect(custom) then
    begin
    if randomSet[x][i].disabled then
    begin
      addToSRLLog('******* Found ' + randomSet[x][i].name + ' *******');
      addToSRLLog(randomSet[x][i].name+' currently disabled');
      continue;
    end;

        {$IFDEF ANTIRANDOM_CUSTOMSETSOLVER}
           customSolved := AntiRandom_CustomSetSolver(randomSet[x][i].name,custom);
        {$ENDIF}
           if not customSolved then
           begin
            addToSRLLog('******* Found ' + randomSet[x][i].name + ' *******');
           customSolved := randomSet[x][i].solve(custom);
           end;
        if not customSolved then addToSRLLog('***** Failed Random: '+randomSet[x][i].name+' *****');
    end;
  end;
  if FindTalk then
  begin
    result := true;
    exit;
  end;

  for i := 0 to high(SRL_Randoms) do
  begin
  _resetColorMods( tmpTS,tmpH,tmpS,tmpMod);
    if ((SRL_Randoms[i].isInvRandom) and (not checkInv)) then
      continue else
      solveBox;

    if (_SolveRandom(i, manually)) then
    begin
      // if the random was solved by hand, break out of the loop
      if (manually) then
      begin
        result := true;
        break;
      end;

      // solve reward box if a non inventory random was just solved
      if (loggedIn()) then // if solver failed, player would be logged out
        if ((not SRL_Randoms[i].isInvRandom) and checkInv) then
        begin
          // reward box doesn't exist if inventory is full/some randoms don't have reward box
          result := (invFull() or (not SRL_Randoms[i].hasRewardBox));

          if (not result) then
          begin
            if (waitFunc(@_Callback_SolveRandom, 50, 5000)) then
              _SolveRandom(SRL_RAND_REWARDS, manually); // check if we chose another reward
          end;
        end;

      result := true;
    end;

    // don't want to keep looking for randoms if one was already detected, but failed
    if ((result) or (not loggedIn())) then
      break;
  end;

  findDead();
  findMod();

  if SRL_HasProc(SRL_OnRandomCall) then
    SRL_Procs[SRL_OnRandomCall]();
  _resetColorMods( tmpTS,tmpH,tmpS,tmpMod);
end;

(*
FindNormalRandoms
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function FindNormalRandoms(): boolean;

Finds and solves Runescape's random events.  Returns true if an event was
solved.

.. note::

    Author: Coh3n
    Last Modified: Jan. 22nd, 2012 by Coh3n

Example:

.. code-block:: pascal

    FindNormalRandoms();
*)
function FindNormalRandoms(): boolean;
begin
  result := _FindAllrandoms(true,[]);
end;

(*
FindNonInventoryRandoms
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function FindNonInventoryRandoms(): boolean;

Finds and solves all Runescape's non inventory random events (i.e. the ones that
teleport the player somewhere else).  Returns true if an event was solved.

.. note::

    Author: Coh3n
    Last Modified: Jan. 22nd, 2012 by Coh3n

Example:

.. code-block:: pascal

    FindNonInventoryRandoms();
*)
function FindNonInventoryRandoms(): boolean;
begin
  result := _FindAllRandoms(false,[]);
end;

(*
FindNormalRandomsCustom
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function FindNormalRandomsCustom(customSet : Array of Array of TRandom): boolean;

Finds and solves all non-skill-specific(i.e. whirlpool,ent,poison gas) Runescape's random events unless specified in args.
It also accepts custom random event solvers. Returns true if an event was solved.

.. note::

    Author: Slushpuppy
    Last Modified: 31/04/2013 By Slushpuppy

Example:

.. code-block:: pascal
    SkillsRandom := [SRL_FishingRandoms]
    FindNonInventoryRandoms(RandomSet : Array of TRandom)
*)
function FindNormalRandomsCustom(RandomSet : Array of Array of TRandomEx): boolean;
begin
  result := _FindAllRandoms(false,RandomSet);
end;
