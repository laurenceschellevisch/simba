(*

Player Management
=================

.. contents::

.. note::

    TODO:

        - Document variables

*)
//-----------------------------------------------------------------//
//--               SRL Resource Library                          --//
//--                ï¿½ PlayerArray Routines                       --//
//-----------------------------------------------------------------//
// * function  LoggedIn: Boolean;                                  // by WT-Fakawi
// * procedure NumberOfPlayers(Number: Integer);                   // by BenLand100 & Wizzup?
// * procedure SetPlayerNameTPAs;                                  // by ???
// * function  PlayersActive: Integer;                             // by ss23
// * function  AllPlayersInactive: Boolean;                        // by ZephyrsFury

{ type TUser;
  Description: The User Record. }
type
  TUser = record
    Name: string;                   // * User Name
    Pass: string;                   // * User Pass
    Pin: string;                    // * Current Users Pin Number
    Member: boolean;                // * For Login
    WorldInfo: TVariantArray;       // * [Members {Boolean}, World {Integer}, PVP {Boolean}]
    Nick: string;                   // * Screen Name for random detection
    {NickTPA: TPointArray;          // * TPA Of Player Name}
    Level: array[0..24] of Integer; // * Levels of all skills.
    Active: Boolean;                // * Set to True if Ok, False if Lost.
    Loc: string;                    // * User Location
    Status: string;                 // * User Status
    Skill: string;                  // * User Action to Perform
    ActionBarSet: Boolean;          // * Used in SwitchActionBar
    LampSkill: Integer;
    Worked: Integer;                // * Time User has worked
    Banked: Integer;                // * Number of Banks User has done
    Rand: string;                   // * Current Random
    Booleans: array of Boolean;     // * For reports, etc.
    Integers: array of Integer;     // * For reports, etc.
    Strings: array of string;       // * For reports, etc.
    Extendeds: array of Extended;   // * For reports, etc.
    Arrays: array of TVariantArray; // * For custom arrays.
    BoxRewards: TStringArray;       // * Partial texts for rewards, place in desired order.
  end;

{ const Skills consts
  Description: To be used with Players.Level[] array
  Players woodcutting level: Players[i].Level[Skill_WoodCutting]
  Last Edit: 22 June 2010 -- Nava2
}
const
  SKILL_COUNT         = 28;
  SKILL_ATTACK        = 0;
  SKILL_DEFENCE       = 1;
  SKILL_STRENGTH      = 2;
  SKILL_HITPOINTS     = 3;    SKILL_HP = SKILL_HITPOINTS;
  SKILL_RANGE         = 4;
  SKILL_PRAYER        = 5;
  SKILL_MAGIC         = 6;
  SKILL_COOKING       = 7;
  SKILL_WOODCUTTING   = 8;
  SKILL_FLETCHING     = 9;
  SKILL_FISHING       = 10;
  SKILL_FIREMAKING    = 11;
  SKILL_CRAFTING      = 12;
  SKILL_SMITHING      = 13;
  SKILL_MINING        = 14;
  SKILL_HERBLORE      = 15;
  SKILL_AGILITY       = 16;
  SKILL_THIEVING      = 17;
  SKILL_SLAYER        = 18;
  SKILL_FARMING       = 19;
  SKILL_RUNECRAFTING  = 20;
  SKILL_HUNTER        = 21;
  SKILL_CONSTRUCTION  = 22;
  SKILL_SUMMONING     = 23;
  SKILL_DUNGEONEERING = 24;
  SKILL_ALLCOMBAT     = 25;
  SKILL_EVERYSKILL    = 26;
  SKILL_NONE          = 27;

// * Antirandom const
{ var UseSandwichSolver, UseBoxSolver, UseCerterSolve: Boolean;
  Description: For Slower Computers you may turn off and it will use other means to solve or logout. }
var
  UseFindMod, UseFindTrade: Boolean;

{ var Players: Array of TUser;
  Description: Array of users. }
var
  Players: array of TUser;
  CurrentPlayer, HowManyPlayers: Integer;

{ var CheckHpFirst: Boolean;
  Description: If you want the script to look at the hp and see that it's been lowered before it runs away from a fight. }
var
  CheckHpFirst: Boolean;

{ var ReinCarnate: Boolean;
  Description: If you want your Status to stay True when you die. (Autofighters) }
var
  ReinCarnate: Boolean;

{ var LogoutOnMod: Boolean;
  Description: If you wish to logout, wait then login again when a mod is found. }
var
  LogoutOnMod: Boolean;
  
var
   PlayerStartTime: LongInt;

(*
LoggedIn
~~~~~~~~

.. code-block:: pascal

    function LoggedIn: Boolean;

Returns True if Logged in.

.. note::

    by WT-Fakawi

Example:

.. code-block:: pascal

*)
function LoggedIn: Boolean;
begin
  //White text on Report Abuse Button
  Result := (GetColor(427, 489) = 16777215);
end;

(*
NumberOfPlayers
~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure NumberOfPlayers(Number: Integer);

Makes the Players array have Number indexes, also sets strings and
other player array's too standard 100.

.. note::

    by BenLand100 / Wizzup?

Example:

.. code-block:: pascal

*)
procedure NumberOfPlayers(Number: Integer);
var
   I: Integer;
begin
  SetLength(Players, Number);
  HowManyPlayers := Number;
  for I := 0 to HowManyPlayers - 1 do
  begin
    SetLength(Players[i].Strings, 100);
    SetLength(Players[i].Integers, 100);
    SetLength(Players[i].Booleans, 100);
    SetLength(Players[i].Extendeds, 100);
    SetLength(Players[i].Arrays, 100);
  end;
end;

(*
PlayersActive
~~~~~~~~~~~~~

.. code-block:: pascal

    function PlayersActive: Integer;

Numbers of players active in the Players array.

.. note::

    by ss23

Example:

.. code-block:: pascal

*)
function PlayersActive: Integer;
var
  i, h: Integer;
begin
  Result := 0;
  h := High(Players);
  for i := 0 to h do
    if (Players[i].Active) then
      Inc(Result);
end;

(*
AllPlayersInactive
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure NumberOfPlayers(Number: Integer);

Returns true if all players are inactive in the Players array.

.. note::

    by ZephyrsFury

Example:

.. code-block:: pascal

*)
function AllPlayersInactive: Boolean;
begin
  Result := (PlayersActive = 0);
end;

(*
PlayerWorked
~~~~~~~~~~~~

.. code-block:: pascal

    function PlayerWorked(player : integer) : integer;

Returns the time a player has worked..

.. note::

    by SRL Community

Example:

.. code-block:: pascal

*)
function PlayerWorked(player: integer): integer;
begin
  if (player = currentPlayer) then
    if (playerStartTime > 0) then // if it's been set at all
    begin
      incEx(players[player].worked, (getSystemTime - playerStartTime));
      playerStartTime := getSystemTime;
    end;

  result := players[player].worked;
end;
