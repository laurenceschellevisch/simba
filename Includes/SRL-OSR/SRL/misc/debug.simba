//-----------------------------------------------------------------//
//--               SRL Resource Library                          --//
//--               ? Debug Routines                              --//
//-----------------------------------------------------------------//
// * procedure TakeScreenshotEx(Path: string; X1, Y1, X2, Y2: Integer); // by lordsaturn, Cazax, & EvilChickcen!
// * procedure TakeScreenshot(Path: String);                       // by Nava2
// * procedure DebugBitmap(Bmp: Integer);`                         // by Cazax
// * function DebugTPA(Points: TPointArray; BmpName: String): Boolean; // by Wizzup?
// * function DebugATPA(Points: TPointArray; BmpName: String): Boolean; // by Wizzup?
// * procedure DebugATPABounds(aPoints: Array Of TPointArray);     // by Wizzup?, lordsaturn, & caused
// * procedure DebugColorArray(C: TIntegerArray);                  // by Nava2
// * procedure DebugBoxesEx(Boxes: Array of TBox; Color: Integer); // by DannyRS
// * procedure DebugBoxes(Boxes: TBoxArray);                       // by DannyRS

{*******************************************************************************
procedure TakeScreenshotEx(Path: string; X1, Y1, X2, Y2 : Integer);
By: lordsaturn, small edit by Cazax & EvilChickcen!
Description: Takes a screenshot of everything within X1, Y1, X2, Y2 bounds and
saves it to "Path" filepath. Enter an empty string in "Path" to save the
screenshot to appPath.
*******************************************************************************}
procedure TakeScreenshotEx(Path: string; X1, Y1, X2, Y2: Integer);
var
  BMP: Integer;
begin
  BMP := BitmapFromClient(X1,Y1,X2,Y2);
  if (Pos('.bmp', Path) = 0) then
    if (Path = '') then
      Path := AppPath + TheDate(3) + ' - ' + MsToTime(GetTimeRunning, Time_Abbrev) + '.bmp'
    else
      Path := Path + '.bmp';
  if (FileExists(Path)) then
  begin
    srl_Warn('TakeScreenShotEx', 'File "' + Path + '" already exists!', warn_AllVersions);
    SetLength(Path, Length(Path) - 4);
    Path := Path + ' ' + IntToStr(GetTimeRunning) + '.bmp';
    srl_Warn('TakeScreenShotEx', 'Renamed screenshot file path to "' + Path + '"', warn_AllVersions);
  end;
  try
    SaveBitmap(bmp, Path);
    srl_Warn('TakeScreenShotEx', 'Screenshot saved successfully to ' + Path, warn_Debug);
  except
    srl_Warn('TakeScreenShotEx', 'Failed saving screenshot to ' + Path, warn_AllVersions);
  finally
    FreeBitmap(bmp);
  end;
end;

{*******************************************************************************
procedure TakeScreenshot(Path: string);
By: Nava2
Description: Takes a screenshot, saving it to 'Path'. See TakeScreenShotEx.
*******************************************************************************}
procedure TakeScreenshot(Path: string);
var
  W, H: Integer;
begin
  GetClientDimensions(W, H);
  TakeScreenshotEx(Path, 0, 0, W-1, H-1);
end;

{*******************************************************************************
Procedure DebugBitmap(Bmp: Integer);
By: Cazax
Description: Shows a bitmap in the debug image window.
*******************************************************************************}
procedure DebugBitmap(Bmp: Integer);
var
  W, H: Integer;
begin
  try
    GetBitmapSize(Bmp, W, H);
    DisplayDebugImgWindow(W, H);
    DrawBitmapDebugImg(Bmp);
  except
    srl_Warn('DebugBitmap', 'Error in DebugBitmap', warn_AllVersions);
  end;
end;

{*******************************************************************************
function DebugTPA(Points: TPointArray; BmpName: string): Boolean;
By: Wizzup?
Description: Shows an image of the Debug screen, plotting colors over the points
stored in Points TPA. If a name is specified, an image will be saved to that path.
*******************************************************************************}
function DebugTPA(Points: TPointArray; BmpName: string): Boolean;
var
  Bmp: integer;
  Box : TBox;
  TempTPA : TPointArray;
begin
  Box := GetTPABounds(Points);
  Bmp := BitmapFromClient(Box.x1,Box.y1,Box.x2,Box.y2);
  TempTPA := CopyTPA(Points);
  OffsetTPA(TempTPA,Point(-box.x1,-box.y1));
  DrawTPABitmap(Bmp,TempTPA,clRed);
  DisplayDebugImgWindow(box.x2-Box.x1 + 1, box.y2-box.y1 + 1);
  DrawBitmapDebugImg(Bmp);
  if bmpname <> '' then
    SaveBitmap(Bmp, ScriptPath + BmpName + '.bmp');
  FreeBitmap(Bmp);
  Result := True;
end;

{*******************************************************************************
function DebugATPA(aPoints: array of TPointArray; BmpName: string): Boolean;
By: Wizzup?
Description: Shows an image of the client, plotting each TPA of the 2D point
             array aPoints. Each TPA is a different color. If a name is
             specified, an image will be saved.
*******************************************************************************}
function DebugATPA(aPoints: T2DPointArray; BmpName: string): Boolean;
var
   Width, Height, ClientBMP: Integer;
   ATPA : T2DPointArray;
   Box : TBox;
begin
  result := false;
  if length(aPoints) = 0 then
    exit;
  Box := GetATPABounds(aPoints);
  Width := box.x2 - box.x1 + 1;
  Height := box.y2 - box.y1 + 1;
  DisplayDebugImgWindow(Width, Height);
  ClientBMP := BitmapFromClient(box.x1,box.y1,box.x2,box.y2);
  ATPA := CopyATPA(aPoints);
  OffsetATPA(ATPA,point(-box.x1,-box.y1));
  DrawATPABitmap(ClientBMP,ATPA);
  DrawBitmapDebugImg(ClientBMP);
  if BmpName <> '' then
    SaveBitmap(ClientBMP, ScriptPath + BmpName + '.bmp');
  FreeBitmap(ClientBMP);
  Result := True;
end;

{*******************************************************************************
procedure DebugATPABounds(aPoints: Array Of TPointArray);
By: Wizzup?, lordsaturn, & caused
Description: Shows an image of the client, plotting each TPA's bounds as a box
             of different colour per TPA. If a name is specified, an image
             will be saved.
*******************************************************************************}
procedure DebugATPABounds(aPoints: array Of TPointArray);
var
  Width, Height, ClientBMP, I: Integer;
  B, Box: TBox;
  BoxColors : TIntegerArray;
  SelColor: Integer;
  x,y : integer;
  BMP : Integer;
begin
  Box := GetATPABounds(aPoints);
  Width := Box.X2 + 5;
  Height := Box.Y2 + 5;
  DisplayDebugImgWindow(Width, Height);
  BoxColors := [clRed, clBlue, clBlack, clGreen, clYellow];
  ClientBMP := BitmapFromClient(0,0,width-1,height-1);
  for i:= 0 to high(aPoints) do
  begin
    SelColor := BoxColors[Random(length(Boxcolors))];

    B := getTPABounds(aPoints[i]);
    for x := B.x1 to B.x2 do
    begin
      FastSetPixel(ClientBMP, x, b.y1, selColor);
      FastSetPixel(ClientBMP, x, B.y2, selColor);
    end;
    for y := B.y1 to B.y2 do
    begin
      FastSetPixel(ClientBMP, B.x1, y, selColor);
      FastSetPixel(ClientBMP, B.x2, y, selColor);
    end;

    BMP := BitmapFromText(inttostr(i),StatChars);
    FastReplaceColor(bmp,clblack,clyellow);
    FastReplaceColor(bmp,clwhite,clblack);
    SetTransparentColor(bmp,clYellow);
    FastDrawTransparent(B.x1 + 2, b.y1 + 2, bmp,clientbmp);
    FreeBitmap(BMP);
  end;
  DrawBitmapDebugImg(clientBMP);
  FreeBitmap(ClientBmp);
end;

{*******************************************************************************
procedure DebugColorArray(C: TIntegerArray);
by: Nava2
Description: Writes the Color Arrays information from GetColorArrayInfo into the
             Debug Box.
*******************************************************************************}
procedure DebugColorArray(C: TIntegerArray);
var
  i, ii, h, t: Integer;
  Speed2Mods: TExtendedArray;
  HSL, XYZ: T2DExtendedArray;
  BestColors, Tolerances: TIntegerArray;
  RGB: T2DIntegerArray;
  TheResult: T3DExtendedArray;
  arrS: array of TStringArray;
begin
  t := GetTimeRunning;
  TheResult := GetColorArrayInfo(C, BestColors, Tolerances, Speed2Mods, RGB, HSL, XYZ);
  SetLength(arrS, 5);
  for i := 0 to 4 do
    SetLength(arrS[i], 3);
  arrS[0][0] := 'RGB:'; arrS[0][1] := 'HSL:'; arrS[0][2] := 'XYZ:';
  arrS[1][0] := 'Min:'; arrS[1][1] := 'Max:'; arrS[1][2] := 'Avg:';
  arrS[2][0] := 'R';    arrS[2][1] := 'G';    arrS[2][2] := 'B';
  arrS[3][0] := 'H';    arrS[3][1] := 'S';    arrS[3][2] := 'L';
  arrS[4][0] := 'X';    arrS[4][1] := 'Y';    arrS[4][2] := 'Z';
  Writeln('Debug Color Array Output:');
  Writeln('Used ' + IntToStr(length(c)) + ' colours.');
  WriteLn('');
  for i := 0 to 2 do
  begin
    Writeln(arrS[0][i]);
    for ii := 0 to 2 do
      for h := 0 to 2 do
        Writeln(arrS[i + 2][ii] + ' ' + arrS[1][h] + ' ' + FloatToStr(TheResult[i][ii][h]));
    case i of
      0: Writeln('Best Color: ' + IntToStr(BestColors[0]) + ' CTS 0 - Tol: ' + IntToStr(Tolerances[0]) + ' | CTS 1 - Tol: ' + IntToStr(Tolerances[1]));
      1: Writeln('Best Color: ' + IntToStr(BestColors[i]) + ' Tol: ' + IntToStr(Tolerances[2]) +
                   ' Hue Mod: ' + FloatToStr(Speed2Mods[0]) + ' Sat. Mod: ' + FloatToStr(Speed2Mods[1]));
      2: Writeln('Best Color: ' + IntToStr(BestColors[i]));
    end;
    Writeln('');
  end;
  Writeln('DebugColorArray took: ' + IntToStr(GetTimeRunning - t) + ' ms to complete.');
end;

{*******************************************************************************
procedure DebugBoxesEx(Boxes: Array of TBox; Color: Integer);
By: DannyRS
Description: Shows an image of the client, plotting each box on it
*******************************************************************************}
procedure DebugBoxesEx(Boxes: TBoxArray; Color: Integer);
var
  ATPA: T2DPointArray;
  TPA: TPointArray;
  Bmp, i, j: Integer;
  B: TBox;
begin
  SetLength(ATPA, 4);
  for i := 0 to High(Boxes) do
  begin
    ATPA[0] := TPABetweenPoints(Point(Boxes[i].X1, Boxes[i].Y1),
                                Point(Boxes[i].X2, Boxes[i].Y1), 1, 0);
    ATPA[1] := TPABetweenPoints(Point(Boxes[i].X2, Boxes[i].Y1),
                                Point(Boxes[i].X2, Boxes[i].Y2), 1, 0);
    ATPA[2] := TPABetweenPoints(Point(Boxes[i].X2, Boxes[i].Y2),
                                Point(Boxes[i].X1, Boxes[i].Y2), 1, 0);
    ATPA[3] := TPABetweenPoints(Point(Boxes[i].X1, Boxes[i].Y2),
                                Point(Boxes[i].X1, Boxes[i].Y1), 1, 0);
    for j := 0 to 3 do
      CombineTPAWrap(TPA, ATPA[j], TPA);
  end;
  //Credit to Wizzup? for this
  B := GetTPABounds(TPA);
  Bmp := BitmapFromClient(B.X1, B.Y1, B.X2, B.Y2);
  OffsetTPA(TPA, Point(-B.X1,-B.Y1));
  DrawTPABitmap(Bmp, TPA, Color);
  DisplayDebugImgWindow(B.X2-B.X1 + 1, B.Y2-B.Y1 + 1);
  DrawBitmapDebugImg(Bmp);
  FreeBitmap(Bmp);
end;

{*******************************************************************************
procedure DebugBoxes(Boxes: TBoxArray);
By: DannyRS
Description: Shows an image of the client, plotting each box on it
*******************************************************************************}
procedure DebugBoxes(Boxes: TBoxArray);
begin
  DebugBoxesEx(Boxes, clAqua);
end;
