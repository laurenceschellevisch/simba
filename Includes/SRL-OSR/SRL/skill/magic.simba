//----------------------------------------------------------------------------//
//--                     SRL Resource Library                               --//
//--                        Magic routines                                  --//
//----------------------------------------------------------------------------//
// * function GetCurrentSpellBook: String;                                  * //
// * procedure SetupMagic;                                                  * //
// * function GetSpellBox(SpellNumber: Integer): TBox;                      * //
// * function GetSpellNumber(Name: Variant): Integer;                       * //
// * function SpellAvailable(Name: Variant): Boolean;                       * //
// * function CastSpell(Name: Variant): Boolean;                            * //
// * function BoltEnchantScreen: Boolean;                                   * //
// * function EnchantBolts(Name: String): Boolean;                          * //
// * function CountRunes(Name: String): Integer;                            * //


var
  CurrentSpellBook: String;
  Magic_Setup: Boolean;

{*******************************************************************************
function GetCurrentSpellBook: String;
By: DannyRS
Description: Returns name of the current spellbook
*******************************************************************************}
function GetCurrentSpellBook: String;
begin
  Result := '';

  if (not FTab(TAB_MAGIC)) then
    Exit;

  if ((Result = '') and (GetColor(561, 236) = 65536)) then
    Result := 'standard';

  if ((Result = '') and (GetColor(568, 222) = 65536)) then
    Result := 'ancient';
end;

{*******************************************************************************
procedure SetupMagic;
By: DannyRS
Description: Sets CurrentSpellBook var
*******************************************************************************}
procedure SetupMagic;
begin
  CurrentSpellBook := GetCurrentSpellBook;

  if (not (CurrentSpellBook = '')) then
    Magic_Setup := True;
end;

{*******************************************************************************
function GetSpellBox(SpellNumber: Integer): TBox;
By: DannyRS
Description: Returns TBox of a magic spell number 1-63
*******************************************************************************}
function GetSpellBox(SpellNumber: Integer): TBox;
var
  Row, Col, NumC, R, C, S: Integer;
begin
  if (not Magic_Setup) then
    SetupMagic;

  Result := IntToBox(-1, -1, -1, -1);

  case CurrentSpellBook of
    'ancient': NumC := 4;
    else NumC := 7;
  end;

  S := SpellNumber - 1;
  Row := Round(S / NumC);
  Col := S - (Row * NumC);

  case CurrentSpellBook of
    'ancient':  begin
                  if (not InRange(SpellNumber, 1, 25)) then
                    Exit;

                  case Col of
                    1 : C := 613;
                    2 : C := 659;
                    3 : C := 700;
                    else C := 568;
                  end;
                  case Row of
                    1 : R := 243;
                    2 : R := 271;
                    3 : R := 299;
                    4 : R := 327;
                    5 : R := 355;
                    6 : R := 383;
                    else R := 215;
                  end;
                  Result := IntToBox(C , R, C + 19, R + 19);
                end;
    else
    begin
      if (not InRange(SpellNumber, 1, 63)) then
        Exit;
      Result := IntToBox(561 + (Col * 24), 229 + (Row * 24),
                              580 + (Col * 24), 248 + (Row * 24));
    end;
  end;
end;

{*******************************************************************************
function GetSpellNumber(Name: Variant): Integer;
By: DannyRS
Description: Returns 1-63 position of a spell string or int
*******************************************************************************}
function GetSpellNumber(Name: Variant): Integer;
begin
  if (not Magic_Setup) then
    SetupMagic;

  Result := -1;

  if VariantIsString(Name) then
  begin
    case CurrentSpellBook of
      'standard': begin
                    case Capitalize(LowerCase(Name)) of
                      'Lumberidge Home Teleport', '1': Result := 1;
                      'Wind Strike', '2':              Result := 2;
                      'Confuse', '3':                  Result := 3;
                      'Enchant Crossbow Bolt', '4':    Result := 4;
                      'Water Strike', '5':             Result := 5;
                      'Lvl-1 Enchant', '6':            Result := 6;
                      'Earth Strike', '7':             Result := 7;
                      'Weaken', '8':                   Result := 8;
                      'Fire Strike', '9':              Result := 9;
                      'Bones To Bananas', '10':        Result := 10;
                      'Wind Bolt', '11':               Result := 11;
                      'Curse', '12':                   Result := 12;
                      'Bind', '13':                    Result := 13;
                      'Low Level Alchemy', '14':       Result := 14;
                      'Water Bolt', '15':              Result := 15;
                      'Varrock Teleport', '16':        Result := 16;
                      'Lvl-2 Enchant', '17':           Result := 17;
                      'Earth Bolt', '18':              Result := 18;
                      'Lumbridge Teleport', '19':      Result := 19;
                      'Telekinetic Grab', '20':        Result := 20;
                      'Fire Bolt', '21':               Result := 21;
                      'Falador Teleport', '22':        Result := 22;
                      'Crumble Undead', '23':          Result := 23;
                      'Teleport To House', '24':       Result := 24;
                      'Wind Blast', '25':              Result := 25;
                      'Superheat Item', '26':          Result := 26;
                      'Camelot Teleport', '27':        Result := 27;
                      'Water Blast', '28':             Result := 28;
                      'Lvl-3 Enchant', '29':           Result := 29;
                      'Iban Blast', '30':              Result := 30;
                      'Snare', '31':                   Result := 31;
                      'Magic Dart', '32':              Result := 32;
                      'Ardougne Teleport', '33':       Result := 33;
                      'Earth Blast', '34':             Result := 34;
                      'High Level Alchemy', '35':      Result := 35;
                      'Charge Water Orb', '36':        Result := 36;
                      'Lvl-4 Enchant', '37':           Result := 37;
                      'Watchtower Teleport', '38':     Result := 38;
                      'Fire Blast', '39':              Result := 39;
                      'Charge Earth Orb', '40':        Result := 40;
                      'Bones To Peaches', '41':        Result := 41;
                      'Saradomin Strike', '42':        Result := 42;
                      'Claws Of Guthix', '43':         Result := 43;
                      'Flames Of Zamorak', '44':       Result := 44;
                      'Trollheim Teleport', '45':      Result := 45;
                      'Wind Wave', '46':               Result := 46;
                      'Charge Fire Orb', '47':         Result := 47;
                      'Teleport To Ape Atoll', '48':   Result := 48;
                      'Water Wave', '49':              Result := 49;
                      'Charge Air Orb', '50':          Result := 50;
                      'Vunerability', '51':            Result := 51;
                      'Lvl-5 Enchant', '52':           Result := 52;
                      'Earth Wave', '53':              Result := 53;
                      'Enfeeble', '54':                Result := 54;
                      'Teleother Lumbridge', '55':     Result := 55;
                      'Fire Wave', '56':               Result := 56;
                      'Entangle', '57':                Result := 57;
                      'Stun', '58':                    Result := 58;
                      'Charge', '59':                  Result := 59;
                      'Teleother Falador', '60':       Result := 60;
                      'Tele Block', '61':              Result := 61;
                      'Lvl-6 Enchant', '62':           Result := 62;
                      'Teleother Camelot', '63':       Result := 63;
                      else
                      begin
                        srl_Warn('GetSpellNumber', 'Invalid Spell Name', warn_Warning);
                      end;
                    end;
                  end;
      'ancient' : begin
                    case Capitalize(LowerCase(Name)) of
                      'Edgeville Home Teleport', '1':  Result := 1;
                      'Smoke Rush', '2':               Result := 2;
                      'Shadow Rush', '3':              Result := 3;
                      'Paddewwa Teleport', '4':        Result := 4;
                      'Blood Rush', '5':               Result := 5;
                      'Ice Rush', '6':                 Result := 6;
                      'Senntisten Teleport', '7':      Result := 7;
                      'Smoke Burst', '8':              Result := 8;
                      'Shadow  Burst', '9':            Result := 9;
                      'Kharyrll Teleport', '10':       Result := 10;
                      'Blood  Burst', '11':            Result := 11;
                      'Ice Burst', '12':               Result := 12;
                      'Lassar Teleport', '13':         Result := 13;
                      'Smoke Blitz', '14':             Result := 14;
                      'Shadow Blitz', '15':            Result := 15;
                      'Dareeyak Teleport', '16':       Result := 16;
                      'Blood Blitz', '17':             Result := 17;
                      'Ice Blitz', '18':               Result := 18;
                      'Carrallangar Teleport', '19':   Result := 19;
                      'Smoke Barrage', '20':           Result := 20;
                      'Shadow Barrage', '21':          Result := 21;
                      'Annakarl Teleport', '22':       Result := 22;
                      'Blood Barrage', '23':           Result := 23;
                      'Ice Barrage', '24':             Result := 24;
                      'Ghorrock Teleport', '25':       Result := 25;
                      else
                       srl_Warn('GetSpellNumber', 'Invalid Spell Name', warn_Warning);
                    end;
                  end;
      'lunar'   : begin
                    case Capitalize(LowerCase(Name)) of
                      '-1' : Result := 1;
                      else
                       srl_Warn('GetSpellNumber', 'Invalid Spell Name', warn_Warning);
                    end;
                  end;
    end;
  end else
  if VariantIsInteger(Name) then
  begin
    Result := Name;
  end else
    srl_Warn('GetSpellNumber', 'Invalid Spell Parameter Type', warn_Warning);
end;

{*******************************************************************************
function SpellAvailable(Name: Variant): Boolean;
By: DannyRS
Description: Returns true if a spell can be cast (magic level and runes for it)
*******************************************************************************}
function SpellAvailable(Name: Variant): Boolean;
var
  SN: Integer;
  TB: Tbox;
begin
  if (not Magic_Setup) then
    SetupMagic;

  Result := False;

  if (not FTab(TAB_MAGIC)) then
    Exit;

  SN := GetSpellNumber(Name);

  TB := GetSpellBox(SN);

  if (TB.X1 < 1) then
  begin
    srl_Warn('SpellAvailable', 'Invalid Spell', warn_Warning);
    Exit;
  end;

  Result := (CountColor(65536, TB.X1, TB.Y1, TB.X2, TB.Y2) > 5);
end;

{*******************************************************************************
function CastSpell(Name: Variant): Boolean;
By: DannyRS
Description: Casts a spell if player has the level and runes for it
*******************************************************************************}
function CastSpell(Name: Variant): Boolean;
var
  SN: Integer;
  TB: Tbox;
begin
  if (not Magic_Setup) then
    SetupMagic;

  Result := False;

  TB := IntToBox(-1, -1, -1, -1);

  if (not GameTab(TAB_MAGIC)) then
    Exit;

  SN := GetSpellNumber(Name);

  TB := GetSpellBox(SN);

  if (TB.X1 < 1) then
  begin
    srl_Warn('CastSpell', 'Invalid Spell: ' + ToStr(Name), warn_Warning);
    writeln(tostr(TB.X1));
    Exit;
  end;

  if SpellAvailable(SN) then
  begin
    MouseBox(TB.X1, TB.Y1, TB.X2, TB.Y2, Mouse_Left);
    Result := True;
  end;
end;

{*******************************************************************************
function BoltEnchantScreen: Boolean;
By: DannyRS
Description: Returns true if bolt enchant screen is open
*******************************************************************************}
function BoltEnchantScreen: Boolean;
begin
  Result := ((CountColor(2070783, 195, 35, 343, 46) = 477));
end;

{*******************************************************************************
function EnchantBolts(Name: String): Boolean;
By: DannyRS
Description: Enchants a certain set of bolts
*******************************************************************************}
function EnchantBolts(Name: String): Boolean;
var
  x, y, BN, Tries: Integer;
  TBF, TBC: Tbox;
begin
  Result := False;

  if (not Magic_Setup) then
    SetupMagic;

  if (not GameTab(TAB_MAGIC)) or (not (CurrentSpellBook = 'standard')) then
    Exit;

  Tries := 0;

  case Lowercase(Name) of
    'opal'        : begin
                      TBF := IntToBox(39, 170, 82, 177);
                      BN := 1;
                    end;
    'sapphire'    : begin
                      TBF := IntToBox(122, 170, 196, 177);
                      BN := 2;
                    end;
    'jade'        : begin
                      TBF := IntToBox(231, 170, 277, 177);
                      BN := 3;
                    end;
    'pearl'       : begin
                      TBF := IntToBox(329, 170, 374, 177);
                      BN := 4;
                    end;
    'emerald'     : begin
                      TBF := IntToBox(415, 170, 486, 177);
                      BN := 5;
                    end;
    'red topaz'   : begin
                      TBF := IntToBox(48, 300, 94, 307);
                      BN := 6;
                    end;
    'ruby'        : begin
                      TBF := IntToBox(126, 300, 198, 307);
                      BN := 7;
                    end;
    'diamond'     : begin
                      TBF := IntToBox(221, 300, 292, 307);
                      BN := 8;
                    end;
    'dragonstone' : begin
                      TBF := IntToBox(314, 300, 383, 307);
                      BN := 9;
                    end;
    'onyx'        : begin
                      TBF := IntToBox(412, 300, 485, 307);
                      BN := 10;
                    end;
    else
    begin
      srl_Warn('EnchantBolts', 'Invalid Bolt Name: ' + Name, warn_Warning);
      Exit;
    end;
  end;

  if InRange(BN, 1, 5) then
    TBC := IntToBox(38 + ((BN - 1) * 94), 99, 78 + ((BN - 1) * 94), 142)
  else
  if InRange(BN, 6, 10) then
    TBC := IntToBox(38 + ((BN - 1) * 94), 229, 78 + ((BN - 6) * 94), 272)
  else
    Exit;

  repeat

    if CastSpell(4) then
      if WaitFunc(@BoltEnchantScreen, 20, 5000) then
        if (not FindColor(x, y, 192, TBF.X1, TBF.Y1, TBF.X2, TBF.Y2)) then
        begin
          MouseBox(TBC.X1, TBC.Y1, TBC.X2, TBC.Y2, Mouse_Left);
          Result := True;
        end else
          Exit;

    Inc(Tries);

  until (Result) or (Tries > 3);
end;

{*******************************************************************************
function CountRunes(Name: String): Integer;
By: DannyRS
Description: Counts a rune type in inventory returns the amount
*******************************************************************************}
function CountRunes(Name: String): Integer;
var
  x, y, i, Col, Num, NumC: Integer;
  TB: Tbox;
begin
  Result := -1;
  Num := -1;

  if (not FTab(TAB_INV)) then
    Exit;

  case Lowercase(Name) of
    'air'     : begin
                  Col := 14803429;
                  Num := 77;
                end;
    'mind'    : Col := 1805024;
    'water'   : Col := 11082518;
    'mist'    : Col := 13093071;
    'earth'   : Col := 936814;
    'dust'    : Col := 4416630;
    'mud'     : Col := 1786730;
    'fire'    : Col := 1450921;
    'smoke'   : Col := 5526618;
    'steam'   : Col := 14211292;
    'body'    : Col := 13705497;
    'lava'    : Col := 1655488;
    'cosmic'  : Col := 1826528;
    'chaos'   : Col := 1812960;
    'astral'  : Col := 13613008;
    'nature'  : Col := 1477650;
    'law'     : Col := 14689051;
    'death'   : begin
                  Col := 14803429;
                  Num := 73;
                end;
    'blood'   : Col := 1187468;
    else
    begin
      srl_Warn('CountRunes', 'Invalid Rune Name: ' + Name, warn_Warning);
      Exit;
    end;
  end;
  for i := 1 to 28 do
  begin
    TB := InvBox(i);
    if (CountColor(65536, TB.X1,TB.Y1+((TB.Y2-TB.Y1)/2),TB.X2,TB.Y2) = 43) then
      if (FindColor(x, y, Col, TB.X1,TB.Y1+((TB.Y2-TB.Y1)/2),TB.X2,TB.Y2)) then
      begin
        if (Num > 0)then
        begin
          NumC := CountColor(Col, TB.X1,TB.Y1+((TB.Y2-TB.Y1)/2),TB.X2,TB.Y2);
          if (NumC = Num) then
            Result := GetAmountBox(TB);
          //WriteLn(ToStr(NumC));
        end else
          Result := GetAmountBox(TB);
      end;
  end;
end;
