(*
Pillory
=======

Stores all the routines to solve the Pillory random.  None of these routines
should be used throughout scripts.  They only need to be called in SRL's random
detection methods.

This solver uses color counting to determine the shape
of the lock and which key to use.

*)

procedure PL_Message(Message: string);
begin
  addToSRLLog('[Pillory Random] ' + Message);
end;

function PL_LockScreen: Boolean;
begin
  Result := (LoggedIn and (GetColor(497, 34) = 65536));
end;

function PL_Detect: boolean;
var
  tpa: TPointArray;
begin
  if (not TabExists(TAB_OPTIONS)) and (TabExists(TAB_FRIENDS)) then
  begin
    // red doors of the cages
    FindColorsTolerance(tpa, 235, MMCX - 15, MMCY - 15, MMCX + 15, MMCY + 15, 20);
    Result := (inRange(length(tpa), 3, 18));
  end;
end;

(**
 * Author: DannyRS
 * Last modified 15/03/2013 By DannyRS
 * Description: Opens Cage Interface
 *)
function PL_ClickCage: Boolean;
var
  t, x, y: Integer;
begin
  Result := False;

  t := GetSystemTime;

  if (not LoggedIn) then Exit;

  Result := PL_LockScreen;

  if (not Result) then
  begin
    repeat
      x:= MSCX;
      y:= MSCY;
      if (not(IsUpTextMultiCustom(['Unlock','lock','Cage','age']))) then
        if FindColorSpiralTolerance(x, y, 9738912, MSX1, MSY1, MSX2, MSY2, 19) or FindColorSpiralTolerance(x, y, 1118484, MSX1, MSY1, MSX2, MSY2, 19) then
        begin
          MMouse(x,y,4,4);
        end else
          MMouse(243,143,80,65);

      Wait(RandomRange(90, 270));

      if (IsUpTextMultiCustom(['Unlock','lock','Cage','age'])) then
      begin
        ClickMouse2(mouse_left);
        if (waitFunc(@PL_LockScreen, 50, 5000)) then
        begin
          PL_Message('[PL_ClickCage] Opened Lock Screen');
          Wait(RandomRange(190, 270));
          Result := True;
        end else
          PL_Message('[PL_ClickCage] Failed to open Lock Screen');
      end else
        MMouse(243,143,80,65);
    until (Result) or (GetSystemTime - t > 38000);
  end;
end;

(**
 * Author: DannyRS
 * Last modified 15/03/2013 By DannyRS
 * Description: Clicks a key 0-2
 *)
function PL_ClickKey(Slot: Integer): Boolean;
var
  p: TPoint;
begin
  Result := False;

  if (not PL_LockScreen) then Exit;

  p := Point(209 + (Slot*93), 251);

  MMouse(RandomRange(p.x - 2, p.x + 2), RandomRange(p.y - 4, p.y + 4), 0, 0);

  ClickMouse2(mouse_left);

  Result := True;
end;

(**
 * Author: DannyRS
 * Last modified 9/04/2013 By DannyRS
 * Description: Scans for lock type
 *)
function PL_GetLock: String;
var
  CNum,Count,CountTime,WatchTime: Integer;
begin
  Result := '';
  WatchTime := RandomRange(9000,10000);
  SetColorToleranceSpeed(2);
  SetToleranceSpeed2Modifiers(0.21, 2.01);
  MarkTime(CountTime);
  Count:= 100;
  repeat
    CNum := CountColorTolerance(1057067, 60, 65, 150, 150, 10);
    if (CNum > Count) then
      Count := CNum;
      wait(50 + random(50));
  until (TimeFromMark(CountTime) > WatchTime);
  if (Count > 800) and (Count < 1000) then Result := 'square';
  if (Count > 570) and (Count < 799) then Result := 'triangle';
  if (Count > 400) and (Count < 569) then Result := 'diamond';
  if (Count > 1001) and (Count < 1600) then Result := 'circle';
  PL_Message('[PL_GetLock] Lock Found: ' + Result + ' [' + ToStr(Count) + ']');
end;

(**
 * Author: DannyRS
 * Last modified 9/04/2013 By DannyRS
 * Description: Scans for key types
 *)
function PL_GetKeys: TStringArray;
var
  C1,C2,C3,CNum,Count,WatchTime: Integer;
begin
  SetLength(Result, 3);

  SetColorToleranceSpeed(2);
  SetToleranceSpeed2Modifiers(0.43, 2.81);

  MarkTime(WatchTime);
  Result[0] := '';
  Count := 100; CNum := 0;
  repeat
    CNum := CountColorTolerance(1516846, 180, 170, 235, 260, 7);

    case CNum of
      286: Result[0] := 'triangle';
      493: Result[0] := 'diamond';
      506: Result[0] := 'circle';
      729: Result[0] := 'square';
    end;

    if (CNum > Count) then
      Count := CNum;
    wait(50 + random(50));

  until (not (Result[0] = '')) or (TimeFromMark(WatchTime) > 10000);

  if (Result[0] = '') then
  begin
    if InRange(Count, 250, 350) then Result[0] := 'triangle';
    if InRange(Count, 400, 500) then Result[0] := 'diamond';
    if InRange(Count, 501, 600) then Result[0] := 'circle';
    if InRange(Count, 670, 1300) then Result[0] := 'square';
  end;

  C1 := Count;

  MarkTime(WatchTime);
  Result[1] := '';
  Count := 100; CNum := 0;
  repeat
    CNum := CountColorTolerance(1516846, 265, 170, 345, 260, 7);

    case CNum of
      286: Result[1] := 'triangle';
      493: Result[1] := 'diamond';
      506: Result[1] := 'circle';
      729: Result[1] := 'square';
    end;

    if (CNum > Count) then
      Count := CNum;
    wait(50 + random(50));

  until (not (Result[1] = '')) or (TimeFromMark(WatchTime) > 10000);

  if (Result[1] = '') then
  begin
    if InRange(Count, 250, 350) then Result[1] := 'triangle';
    if InRange(Count, 400, 500) then Result[1] := 'diamond';
    if InRange(Count, 501, 600) then Result[1] := 'circle';
    if InRange(Count, 670, 1300) then Result[1] := 'square';
  end;

  C2 := Count;

  MarkTime(WatchTime);
  Result[2] := '';
  Count := 100; CNum := 0;
  repeat
    CNum := CountColorTolerance(1516846, 365, 170, 430, 260, 7);

    case CNum of
      286: Result[2] := 'triangle';
      493: Result[2] := 'diamond';
      506: Result[2] := 'circle';
      729: Result[2] := 'square';
    end;

    if (CNum > Count) then
      Count := CNum;
    wait(50 + random(50));

  until (not (Result[2] = '')) or (TimeFromMark(WatchTime) > 10000);

  if (Result[2] = '') then
  begin
    if InRange(Count, 250, 350) then Result[2] := 'triangle';
    if InRange(Count, 400, 500) then Result[2] := 'diamond';
    if InRange(Count, 501, 600) then Result[2] := 'circle';
    if InRange(Count, 670, 1300) then Result[2] := 'square';
  end;

  C3 := Count;

  PL_Message('[PL_GetKeys] Keys Found: '+
      Result[0]+' ['+IntToStr(C1)+']'+' '+
      Result[1]+' ['+IntToStr(C2)+']'+' '+
      Result[2]+' ['+IntToStr(C3)+']');
end;

(**
 * Author: DannyRS
 * Last modified 15/03/2013 By DannyRS
 * Description: Solves the Pillory Random Event
 *)
function PL_Solve: Boolean;
var
  i, t, keysolves, tmpCTS: Integer;
  tmpHM, tmpSM, Deg: Extended;
  lock: String;
  keys: TStringArray;
begin
  Result := False;
  keysolves := 0;

  tmpCTS := GetColorToleranceSpeed;
  GetToleranceSpeed2Modifiers(tmpHM, tmpSM);

  if (not LoggedIn) then Exit;

  t := GetSystemTime;

 Deg := RS_GetCompassAngleDegrees;
 Wait(100 + random(50));
 MakeCompass('N');
  //if (not PL_ClickCage) then Exit;

  repeat

    Result := (TabExists(TAB_OPTIONS));
    if (Result) then Break;

    // open the lock screen if it's not already open
    if (not PL_LockScreen) then PL_ClickCage;

    lock := PL_GetLock;
    keys := PL_GetKeys;

    for i := 0 to 2 do
      if (keys[i] = '') then
      begin
         PL_Message('[ERROR] [PL_GetKeys] Failed to get all keys');
         Break;
      end;

      if (lock = '') then
      begin
         PL_Message('[ERROR] [PL_GetLock] Failed to get lock type');
         Continue;
      end;

      for i := 0 to 2 do
      if (keys[i] = lock) then
      begin
        PL_Message('[PL_Solve] Clicking key : ' + keys[i]);
        if PL_ClickKey(i) then
        begin
          keysolves := keysolves + 1;
          Wait(RandomRange(1500, 2000));
        end;
      end;

    Result := ((keysolves > 2) and (not PL_LockScreen)) or
        (TabExists(TAB_OPTIONS));

  until (Result) or (GetSystemTime - t > 120000);

  if (Result) then MakeCompass(Deg);

  SetColorToleranceSpeed(tmpCTS);
  SetToleranceSpeed2Modifiers(tmpHM, tmpSM);

  if (not Result) then
  begin
    if (GetSystemTime - t > 120000) then
      PL_Message('[ERROR] Pillory solver timed out');
  end else
    Wait(RandomRange(800, 1200));
end;
