var
  RemoteStringNames, RemoteBooleanNames, RemoteIntegerNames: TStringarray;
  RemoteStringValues: array of array of string;
  RemoteIntegers, RemoteBooleans, RemoteStrings: TIntegerArray;

  RemoteINIPath, RemoteScriptName: string;
  RemoteInstance, RemoteTimer: Integer;

const
  RemoteExtension = '.ini';


function FileEmpty(FilePath: string): Boolean;
begin
  if (not(FileExists(FilePath))) then Exit;
  Result:= not(StrToBool(ReadINI('Main', 'Running', FilePath)));
end;

procedure SetINIPath;
var
  i: Integer;
begin
  RemoteINIPath:= AppPath+'Scripts/SRLRemote';
  for i:=1 to 50 do
    if (FileEmpty(RemoteINIPath+IntToStr(i)+RemoteExtension)or(not(FileExists(RemoteINIPath+IntToStr(i)+RemoteExtension)))) then
    begin
      RemoteINIPath:= RemoteINIPath+IntToStr(i)+RemoteExtension;
      RemoteInstance:= i;
      Exit;
    end;
end;

procedure RemoteWriteINI;
var
  i, j: Integer;
begin
  WriteINI('Main', 'Running', 'True', RemoteINIPath);
  WriteINI('Main', 'Changed', 'False', RemoteINIPath);
  WriteINI('Main', 'Name', RemoteScriptName, RemoteINIPath);


  WriteINI('Players', 'HowMany', IntToStr(Length(Players)), RemoteINIPath);
  WriteINI('Players', 'Integers', IntToStr(Length(RemoteIntegers)), RemoteINIPath);
  WriteINI('Players', 'Strings', IntToStr(Length(RemoteStrings)), RemoteINIPath);
  WriteINI('Players', 'Booleans', IntToStr(Length(RemoteBooleans)), RemoteINIPath);

  for i:=0 to High(RemoteIntegerNames) do
    WriteINI('Integers', IntToStr(i), RemoteIntegerNames[i], RemoteINIPath);
  for i:=0 to High(RemoteStringNames) do
    WriteINI('Strings', IntToStr(i), RemoteStringNames[i], RemoteINIPath);
  for i:=0 to High(RemoteBooleanNames) do
    WriteINI('Booleans', IntToStr(i), RemoteBooleanNames[i], RemoteINIPath);

  for i:=0 to High(RemoteStringValues) do
  begin
    WriteINI('Strings', '('+IntToStr(i)+')HowMany', IntToStr(Length(RemoteStringValues[i])), RemoteINIPath);
    for j:=0 to High(RemoteStringValues[i]) do
      WriteINI('Strings', '('+IntToStr(i)+')('+IntToStr(j)+')', RemoteStringValues[i][j], RemoteINIPath);
  end;

  for i:=0 to High(Players) do
  begin
    WriteINI(IntToStr(i), 'User', Players[i].Name, RemoteINIPath);
    WriteINI(IntToStr(i), 'Pass', Players[i].Pass, RemoteINIPath);
    WriteINI(IntToStr(i), 'Nick', Players[i].Nick, RemoteINIPath);
    WriteINI(IntToStr(i), 'Pin', Players[i].Pin, RemoteINIPath);
    for j:=0 to High(RemoteIntegers) do
      WriteINI(IntToStr(i), 'Integer'+IntToStr(j), IntToStr(Players[i].Integers[RemoteIntegers[j]]), RemoteINIPath);
    for j:=0 to High(RemoteStrings) do
      WriteINI(IntToStr(i), 'String'+IntToStr(j), Players[i].Strings[RemoteStrings[j]], RemoteINIPath);
    for j:=0 to High(RemoteBooleans) do
      WriteINI(IntToStr(i), 'Boolean'+IntToStr(j), BoolToStr(Players[i].Booleans[RemoteBooleans[j]]), RemoteINIPath);
    WriteINI(IntToStr(i), 'Active', BoolToStr(Players[i].Active), RemoteINIPath);
  end;
  MarkTime(RemoteTimer);
end;

function RemoteINIChanged: Boolean;
begin
  Result:= StrToBool(ReadINI('Main', 'Changed', RemoteINIPath));
end;

procedure RemoteReadINI;
var
  i, j: Integer;
begin
  NumberOfPlayers(StrToInt(ReadINI('Players', 'HowMany', RemoteINIPath)));

  for i:=0 to High(Players) do
  begin
    Players[i].Name:= ReadINI(IntToStr(i), 'User', RemoteINIPath);
    Players[i].Pass:= ReadINI(IntToStr(i), 'Pass', RemoteINIPath);
    Players[i].Nick:= ReadINI(IntToStr(i), 'Nick', RemoteINIPath);
    Players[i].Pin:= ReadINI(IntToStr(i), 'Pin', RemoteINIPath);
    for j:=0 to High(RemoteIntegers) do
      Players[i].Integers[RemoteIntegers[j]]:= StrToInt(ReadINI(IntToStr(i), 'Integer'+IntToStr(j), RemoteINIPath));
    for j:=0 to High(RemoteStrings) do
      Players[i].Strings[RemoteStrings[j]]:= ReadINI(IntToStr(i), 'String'+IntToStr(j), RemoteINIPath);
    for j:=0 to High(RemoteBooleans) do
      Players[i].Booleans[RemoteBooleans[j]]:= StrToBool(ReadINI(IntToStr(i), 'Boolean'+IntToStr(j), RemoteINIPath));
    Players[i].Active:= StrToBool(ReadINI(IntToStr(i), 'Active', RemoteINIPath));
  end;
end;

procedure SRLRemote;
begin
  if RemoteINIChanged then
    RemoteReadINI;
  if (TimeFromMark(RemoteTimer)>300000) then RemoteWriteINI;
end;

procedure DeleteTheINI;
begin
  WriteINI('Main', 'Running', 'False', RemoteINIPath);
end;

procedure SetupSRLRemote(ScriptName: string; Integers, Booleans, Strings: TVariantArray; StringValues: array of array of string);
var
  i, j: Integer;
begin
  RemoteScriptName:= ScriptName;
  SetArrayLength(RemoteIntegers, Length(Integers) div 2);
  SetArrayLength(RemoteIntegerNames, Length(Integers) div 2);
  SetArrayLength(RemoteStrings, Length(Strings) div 2);
  SetArrayLength(RemoteStringNames, Length(Strings) div 2);
  SetArrayLength(RemoteBooleans, Length(Booleans) div 2);
  SetArrayLength(RemoteBooleanNames, Length(Booleans) div 2);
  j:= 0;
  for i:=0 to High(Integers) do
  begin
    RemoteIntegerNames[j]:= Integers[i];
    RemoteIntegers[j]:= Integers[i+1];
    Inc(i);
    Inc(j);
  end;
  j:= 0;
  for i:=0 to High(Booleans) do
  begin
    RemoteBooleanNames[j]:= Booleans[i];
    RemoteBooleans[j]:= Booleans[i+1];
    Inc(i);
    Inc(j);
  end;
  j:= 0;
  for i:=0 to High(Strings) do
  begin
    RemoteStringNames[j]:= Strings[i];
    RemoteStrings[j]:= Strings[i+1];
    Inc(i);
    Inc(j);
  end;
  RemoteStringValues:= StringValues;

  SetINIPath;
  Writeln('Running SRL Remote under instance '+IntToStr(RemoteInstance));
  AddOnTerminate('DeleteTheINI');
  RemoteWriteINI;
  SRLRemote;
end;
