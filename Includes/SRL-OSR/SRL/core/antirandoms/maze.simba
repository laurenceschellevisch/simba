(*
Maze
====

The Maze file stores the routines to solve the maze random event.

This solver uses black minimap color counts in specific areas to determine which
path to solve.  It uses specific minimap corrdinate clicking to walk to each
door, and uses simple TPA work to find and click each door.

*)

type
  TMazePath = record
    name: string;
    area: TBox;                  // area to search for black on MM
    minCount, maxCount: integer; // range for lenght of black found on MM

    // [x, y, compassAngle] if compassAngle = '', it won't look for the door (some rooms need to walk further)
    // compass angle should be so you can see the DARK side of the door
    path: array of TVariantArray;
  end;
  TMazePathArray = array of TMazePath;

const
  MAZE_PATH_COUNT = 5;
    MAZE_PATH_SW     = 0;
    MAZE_PATH_NE     = 1;
    MAZE_PATH_SE     = 2;
    MAZE_PATH_NW     = 3;
    MAZE_PATH_COMMON = 4;

(**
 * Author: DemiseScythe & Coh3n
 * Last modified 28/02/2013 By Justin
 * Description: Returns true if player is in the random.
 *)
function Maze_Detect(): boolean;
begin
  if ((getNPCChatName() = SRL_NPC_OLDMAN) or (FindTextTPA(13750737, 3, 417, 290, 476, 311, 'ward', CharsNPC07, Nothing))) then
    // the red maze walls on the minimap
    result := (countColorTolerance(240, MMX1, MMY1, MMX2, MMY2, 15) > 900) or (GetMusic = 'Time Out');
end;

(**
 * Author: DemiseScythe & Coh3n
 * Description: Returns an array of all the different maze paths.
 *)
function Maze_GetPaths(): TMazePathArray;
begin
  setLength(result, MAZE_PATH_COUNT);

  with result[MAZE_PATH_NE] do
  begin
    name := 'North East';
    area := intToBox(668, 60, 687, 73);
    minCount := 100;
    maxCount := 1200;

    path := [[630, 86, 's'], [672, 94, 's'], [676, 83, 's'], [609, 78, 's'],
             [645, 78, 's'], [581, 77, 's'], [670, 80, 's'], [604, 49, 'w'],
             [608, 94, 's'], [575, 81, 'w'], [611, 128, 's'], [583, 78, 's']];
  end;

  with result[MAZE_PATH_SE] do
  begin
    name := 'South East';
    area := intToBox(MMCX, MMCY, MMX2, MMY2);
    minCount := 800;
    maxCount := 3400;

    path := [[580, 82, 's'], [698, 79, 's'], [560, 81, ''], [637, 116, 'w'],
             [676, 81, 'w'], [648, 82, 'w'], [574, 83, 'w'], [690, 83, ''],
             [643, 90, 'w'], [663, 86, 'w'], [645, 95, 's'], [561, 94, 'w'],
             [662, 83, 'w'], [657, 97, 's']];
  end;

  with result[MAZE_PATH_SW] do
  begin
    name := 'South West';
    area := intToBox(MMX1, MMCY, MMCX, MMY2);
    minCount := 3500;
    maxCount := 9999;

    path := [[576, 81, 's'], [674, 33, 'w'], [676, 90, 'w'], [578, 93, 'w'],
             [605, 91, 'w'], [593, 76, 's'], [583, 86, 's'], [650, 93, 's'],
             [639, 143, 'w'], [660, 77, 'w'], [645, 58, 's'], [640, 47, 'w'],
             [612, 137, 's'], [583, 78, 's']];
  end;

  with result[MAZE_PATH_NW] do
  begin
    name := 'North West';
    area := intToBox(551, 78, 610, 110);
    minCount := 1000;
    maxCount := 2000;

    path := [[586, 82, 'w'], [658, 78, 'w'], [602, 97, 's'], [590, 76, 's'],
             [642, 80, 's'], [594, 73, 'w'], [604, 89, 'w'], [578, 89, 'w'],
             [612, 90, 'w'], [584, 79, 's'], [628, 152, ''], [638, 92, 's'],
             [583, 78, 's']];
  end;

  // the end of each path is commone throughout
  with result[MAZE_PATH_COMMON] do
  begin
    name := 'Common';
    path := [[614, 100, 'w'], [662, 83, 's'], [627, 51, 's'], [637, 89, 'w']];
  end;
end;

(**
 * Author: Naum & Coh3n
 * Description: Returns the path for the current player.
 *)
function Maze_DetectPath(paths: TMazePathArray; var resultPath: TMazePath): boolean;
var
  i, tmpCount: integer;
begin
  if (not loggedIn()) then
    exit;


  for i := 0 to high(paths) do
    with paths[i] do
    begin
      // so it doesn't look for MAZE_PATH_COMMON spawn (doesn't exist)
      if (i = MAZE_PATH_COMMON) then
        continue;

      tmpCount := countColorTolerance(clBlack, area.x1, area.y1, area.x2, area.y2, 50);

      if (inRange(tmpCount, minCount, maxCount)) then
      begin
        addToSRLLog('Maze_DetectPath: Found path - '+name);
        resultPath := paths[i];
        result := true;
        break;
      end;
    end;
end;

(**
 * Author: Coh3n
 * Description: Examines the old man to remove last chat line text. Used as a
 * failsafe in case the script accidentially clicks a wall.
 *)
function Maze_ExamineOldMan(): boolean;
var
  t, dtmMan: integer;
  chatPrevious: string;
begin
  if (not loggedIn()) then
    exit;

  dtmMan := DTMFromString('mQwAAAHicY2ZgYLgBxJeA+DoQTwPiGUC8GIh5VbQYuGQUGXiU1Bn4gXwYZgRiJigGAgAO2gV/');
  chatPrevious := getBlackChatMessage(); // get the chat line text
  t := (getSystemTime + 5000);

  if clickDTMRotatedIn(dtmMan, MSCX - 70, MSCY - 70, MSCX + 70, MSCY + 70, -Pi/4, Pi/4, Pi/30, ['ster'], mouse_Right) then
  begin
    if (waitOption('xamin', 300)) then
      while (getSystemTime < t) do
      begin
        // wait for the chat text to change
        if (getBlackChatMessage() <> chatPrevious) then
        begin
          result := true;
          break;
        end;

        wait(200);
      end;

  end else
    addToSRLLog('Maze_ExamineOldMan: Failed to click Old Man DTM');

  freeDTM(dtmMan);
end;

(**
 * Author: Coh3n & Naum
 * Description: Returns true if any doors are found.  Returns their points in
 * doorPts.
 *)
//{$i srl/srl/misc/paintsmart.simba}
function Maze_FindDoors(var doorPts: TPointArray): boolean;
var
  tpa: TPointArray;
  atpa: T2DPointArray;
  i, c, tmpCTS: integer;
begin
  if (not loggedIn()) then
    exit;

  tmpCTS := getColorToleranceSpeed();
  setColorToleranceSpeed(3);

  // the darker door color & smaller main screen box
  findColorsTolerance(tpa, 4342341, MSX1+100, MSY1+75, MSX2-100, MSY2-75, 5);
  //SMART_DrawDots(tpa);
  //SMART_ClearCanvas();

  setColorToleranceSpeed(tmpCTS);

  // make sure the door is found
  if (length(tpa) <= 0) then
  begin
    addToSRLLog('Maze_FindDoor: Failed to find maze door color');
    exit;
  end;

  // split the colors into boxes
  atpa := splitTPA(tpa, 1);
  setLength(doorPts, length(atpa));

  // loop through all the boxes, filtering out wall points
  for i := 0 to high(atpa) do
  begin
    // if there aren't enough points, it's probably a wall point
    if (length(atpa[i]) < 220) then
      continue;

    //SMART_DrawBoxEx(false, getTPABounds(atpa[i]), clRed);
    doorPts[c] := middleTPA(atpa[i]);
    inc(c);
  end;

  setLength(doorPts, c); // gets rid of the empty elements
  sortTPAFrom(doorPts, point(MSCX, MSCY)); // sort from the player

  result := (c > 0);

  addToSRLLog('Maze_FindDoors: Found '+toStr(c)+' possible doors');
end;

(**
 * Author: Coh3n
 * Description: Clicks a maze door.
 *)
function Maze_ClickDoor(): boolean;
var
  i, x, y, t, c: integer;
  doorPts: TPointArray;
  s: string;
  b: TBox;
begin
  if (not loggedIn()) then
    exit;

  if (Maze_FindDoors(doorPts)) then
    for i := 0 to high(doorPts) do
    begin
      // small box to spiral the mouse
      b := intToBox(doorPts[i].x - 20, doorPts[i].y - 20, doorPts[i].x + 20, doorPts[i].y + 20);

      // sometimes the uptext doesn't show when moused on the door
      if (spiralMouseMulti(x, y, b.x1, b.y1, b.x2, b.y2, ['pen', 'all'], 5, 8)) then
      begin
        mouse(x, y, 5, 5, mouse_Right);
        addToSRLLog('Maze_ClickDoor: Clicked door');

        // in case it clicks in between the door bars
        if (not waitOption('pen', 300)) then
        begin
          mouse(x + random(6), y, 5, 5, mouse_Right);
          if (not waitOption('pen', 300)) then
            continue;
        end;

        flag();

        t := (getSystemTime + 5000);
        while (isMoving() and (getSystemTime < t)) do
          wait(50);

        // failsafe to make sure we didn't click a wall
        s := getBlackChatMessage();
        if ((pos('reach', s) > 0) or (pos('open', s) > 0)) then
        begin
          addToSRLLog('Maze_ClickDoor: Accidentially clicked the wall');

          // get rid of the "bad" chat text, tries 3 times
          for c := 1 to 3 do
            if (Maze_ExamineOldMan()) then
            begin
              addToSRLLog('Maze_ClickDoor: Examined Old Man');
              break;
            end;

          continue;
        end else
          result := true;

        break;
      end;

      wait(300 + random(200));
    end;

  if (not result) then
    addToSRLLog('Maze_ClickDoor: Failed to click maze door');
end;

(**
 * Author: DemiseScythe & Coh3n
 * Description: Walks the path.
 *)
function Maze_WalkPath(path: TMazePath): boolean;
var
  i, t: integer;
  doorClicked: boolean;
begin
  if (not loggedIn()) then
    exit;

  addToSRLLog('Maze_WalkPath: Walking '+path.name+' path');

  for i := 0 to high(path.path) do
  begin
    if (path.path[i][2] <> '') then
      makeCompass(path.path[i][2]);

    mouse(path.path[i][0], path.path[i][1], 2, 2, mouse_Left);
    flag();
    wait(1500 + random(500));
    doorClicked := false;

    // if we want to look for the door (some rooms have more than one walking point)
    if (path.path[i][2] <> '') then
    begin
      // in a loop in case we misclick the door
      repeat
        inc(t);

        if (Maze_ClickDoor()) then
        begin
          addToSRLLog('Maze_WalkPath: Finished room '+toStr(i));
          result := (i = high(path.path));
          doorClicked := true;
          t := 0;
          break;
        end;

      until(t >= 10); // maximum 10 click door calls

      if (not doorClicked) then
      begin
        addToSRLLog('Maze_WalkPath: Failed to solve room '+toStr(i));
        result := false;
        break;
      end;
    end;
  end;

  if (result) then
    addToSRLLog('Maze_WalkPath: Finished path '+path.name)
  else
    addToSRLLog('Maze_WalkPath: Didn''t finish path '+path.name);
end;

(**
 * Author: Coh3n & DemiseScythe
 * Description: Touches the shrine in the middle of the maze.
 *)
function Maze_TouchShrine(): boolean;
var
  dtmShrine, t: integer;
begin
  if (not loggedIn()) then
    exit;

  t := (getSystemTime + 5000);
  dtmShrine := DTMFromString('mggAAAHicY2NgYPgDxD+B+DcQfwJiDkYGhr9A+ggQnwHiy0B8AIgPAvE+IO5obmIwNjRgyEpLZcjLyGAIDw5mqC4rY+AHymHDjDgwBAAAz2UQ6Q==');

  // in a loop to make sure we don't misclick
  repeat
    if (clickDTMRotatedIn(dtmShrine, 220, 175, 285, 225, -Pi/4, Pi/4, Pi/60, ['ouch'], mouse_Left)) then
      result := (not didYellowClick());

    wait(100 + random(300));
  until(result or (getSystemTime > t));

  freeDTM(dtmShrine);
end;

(**
 * Author: Coh3n & DemiseScythe
 * Description: Solves the Maze random event.
 *)
function Maze_Solve(): boolean;
var
  paths: TMazePathArray;
  path: TMazePath;
begin
  if (not loggedIn()) then
    exit;

  paths := Maze_GetPaths();

  if (Maze_DetectPath(paths, path)) then
  begin
    if (Maze_WalkPath(path)) then
      if (Maze_WalkPath(paths[MAZE_PATH_COMMON])) then
        if (Maze_TouchShrine()) then
          result := waitTabExists(TAB_MAGIC, 15000);
  end else
    addToSRLLog('Maze_Solve: Didn''t detect maze path');
end;

