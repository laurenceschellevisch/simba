(*
Bitmaps
=======

The Bitmap include contains Bitmap  of most common objects.

.. contents::

*)


//-----------------------------------------------------------------//
//--               SRL Resource Library                          --//
//--                  » SRL Bitmap Routines                      --//
//-----------------------------------------------------------------//
// * function srl_GetBitmap(ID: Integer): Integer;                 // * by the SRL community
// * procedure srl_LoadBitmaps(IDs: TIntegerArray);                // * by Nielsie95
// * procedure srl_LoadBitmapRange(StartID, EndID: Integer);       // * by Nielsie95
// * procedure srl_FreeBitmapEx(which: integer);                   // * by Rasta Magician
// * procedure srl_FreeBitmapArray(bmpArr: TIntegerArray);         // * by EvilChicken!
// * procedure srl_FreeBitmaps;                                    // * by Nielsie95
// * procedure srl_FreeBitmapRange(StartID, EndID: Integer);       // * by EvilChicken!

const
  srl_BitmapCount = 111;

{var srl_Bitmaps: array[0..107] of Integer;
  Description: Holds all the loaded SRL bitmaps.}
var
  srl_Bitmaps: array[0..(srl_BitmapCount - 1)] of Integer;
  
{var srl_BitmapSet: array[0..107] of Boolean;
  Description: Array to specify if a certain bitmap is loaded or not.}

var
  srl_BitmapSet: array[0..(srl_BitmapCount - 1)] of Boolean;

{
  READ ME
    When calling a SRL Bitmap, it is better to use srl_GetBitmap(bmp_Ore_Iron)
    rather than srl_GetBitmap(1) as the numbers are subject to change,
    while bmp_something will always work.
}

{
  Dev Note
    The next Bitmap to be added = srl_BitmapCount; Don't forget to add
    1 to the count afterwards!
}

const
  bmp_Ore_Clay              = 0;
  bmp_Ore_Iron              = 1;
  bmp_Ore_Copper            = 2;
  bmp_Ore_Tin               = 3;
  bmp_Ore_Coal              = 4;
  bmp_Ore_Silver            = 5;
  bmp_Ore_Gold              = 6;
  bmp_Ore_Mithril           = 7;
  bmp_Ore_Adamant           = 8;
  bmp_Ore_Runite            = 9;

  bmp_Bar_Bronze            = 10;
  bmp_Bar_Iron              = 11;
  bmp_Bar_Steel             = 12;
  bmp_Bar_Silver            = 13;
  bmp_Bar_Gold              = 14;
  bmp_Bar_Mithril           = 15;
  bmp_Bar_Adamant           = 16;
  bmp_Bar_Runite            = 17;

  bmp_Rune_Air              = 18;
  bmp_Rune_Mind             = 19;
  bmp_Rune_Water            = 20;
  bmp_Rune_Fire             = 21;
  bmp_Rune_Earth            = 22;
  bmp_Rune_Law              = 23;
  bmp_Rune_Nature           = 24;
  bmp_Rune_Chaos            = 25;
  bmp_Rune_Death            = 26;
  bmp_Rune_Body             = 27;
  bmp_Rune_Cosmic           = 28;
  bmp_Rune_Soul             = 29;
  bmp_Rune_Blood            = 30;

  bmp_Talis_Air             = 31;
  bmp_Talis_Mind            = 32;
  bmp_Talis_Water           = 33;
  bmp_Talis_Fire            = 34;
  bmp_Talis_Earth           = 35;
  bmp_Talis_Law             = 36;
  bmp_Talis_Nature          = 37;
  bmp_Talis_Chaos           = 38;
  bmp_Talis_Death           = 39;
  bmp_Talis_Body            = 40;
  bmp_Talis_Cosmic          = 41;

  bmp_FishGear_SmallNet     = 42;
  bmp_FishGear_Rod          = 43;
  bmp_FishGear_FlyRod       = 44;
  bmp_FishGear_Cage         = 45;
  bmp_FishGear_Harpoon      = 46;

  bmp_Axe_Bronze            = 47;
  bmp_Axe_Iron              = 48;
  bmp_Axe_Steel             = 49;
  bmp_Axe_Black             = 50;
  bmp_Axe_Mithril           = 51;
  bmp_Axe_Adamant           = 52;
  bmp_Axe_Rune              = 53;
  bmp_Axe_Dragon            = 54;
  bmp_Axe_Adze              = 110;

  bmp_TinderBox             = 55;
  bmp_Log_Normal            = 56;
  bmp_Log_Oak               = 57;
  bmp_Log_Willow            = 58;
  bmp_Log_Maple             = 59;
  bmp_Log_Yew               = 60;

  bmp_Pick_Bronze           = 61;
  bmp_Pick_Iron             = 62;
  bmp_Pick_Steel            = 63;
  bmp_Pick_Mithril          = 64;
  bmp_Pick_Adamant          = 65;
  bmp_Pick_Rune             = 66;

  bmp_Bow_CrossBow          = 67;
  bmp_Bow_Short_Normal      = 68;
  bmp_Bow_Short_Oak         = 69;
  bmp_Bow_Short_Willow      = 70;
  bmp_Bow_Short_Maple       = 71;
  bmp_Bow_Long_Normal       = 72;
  bmp_Bow_Long_Oak          = 73;
  bmp_Bow_Long_Willow       = 74;
  bmp_Bow_Long_Maple        = 75;

  bmp_Food_Cooked_Meat      = 76;
  bmp_Food_Cooked_Chicken   = 77;
  bmp_Food_Cooked_Shrimps   = 78;
  bmp_Food_Cooked_Anchovies = 79;
  bmp_Food_Cooked_Tuna      = 80;
  bmp_Food_Cooked_Trout     = 81;
  bmp_Food_Cooked_Pike      = 82;
  bmp_Food_Cooked_Salmon    = 83;
  bmp_Food_Cooked_Lobster   = 84;
  bmp_Food_Cooked_Swordfish = 85;

  bmp_Food_Raw_Meat         = 86;
  bmp_Food_Raw_Chicken      = 87;
  bmp_Food_Raw_Shrimps      = 88;
  bmp_Food_Raw_Anchovies    = 89;
  bmp_Food_Raw_Tuna         = 90;
  bmp_Food_Raw_Trout        = 91;
  bmp_Food_Raw_Pike         = 92;
  bmp_Food_Raw_Salmon       = 93;
  bmp_Food_Raw_Lobster      = 94;
  bmp_Food_Raw_Swordfish    = 95;
  
  bmp_Bucket_Empty          = 96;
  bmp_Bucket_Water          = 97;
  
  bmp_Bones_Normal          = 98;
  bmp_Bones_Big             = 99;
  
  bmp_Uncut_Sapphire        = 100;
  bmp_Uncut_Emerald         = 101;
  bmp_Uncut_Ruby            = 102;
  bmp_Uncut_Diamond         = 103;
  
  bmp_Cut_Sapphire          = 104;
  bmp_Cut_Emerald           = 105;
  bmp_Cut_Ruby              = 106;
  bmp_Cut_Diamond           = 107;

  bmp_GE                    = 108;
  
  bmp_Ring_Ruby             = 109;
  

(*
srl_GetBitmap
~~~~~~~~~~~~~

.. code-block:: pascal

    function srl_GetBitmap(ID: Integer): Integer;

Returns the bitmap identified by ID.

.. note::

    Author: SRL Community
    Last Modified: Unknown

Example:

.. code-block:: pascal

  FindBitmap(srl_GetBitmap(bmp_Ore_Iron), x, y)
*)
function srl_GetBitmap(ID: Integer): Integer;
begin
  Result := -1;
  if (ID < 0) or (ID > srl_BitmapCount - 1) then
  begin
    WriteLn('srl_GetBitmap: Unknown bitmap, id: '+IntToStr(ID));
    Exit;
  end;
  if srl_BitmapSet[ID] then
  begin
    //WriteLn('Returning already loaded bitmap: '+IntToStr(ID));
    Result := srl_Bitmaps[ID];
    Exit;
  end;
  
  
  //WriteLn('Loading new bitmap: '+IntToStr(ID));
  case ID of
    bmp_Ore_Iron :
          Result := BitmapFromString(7, 3, 'beNpTkNCTFjGUFTN' +                   //Iron_Ore [10-12-09]
          'XkLBRkQYiSyVJIBsoYiIvDmQjCwJFgCSKIAAisglL');
    bmp_Ore_Copper:
          Result := BitmapFromString(7, 3, 'beNrLspwZob8swWR' +                   //Copper_Ore [10-12-09]
          'rpsWBfJujRbaHC21351gtjDVan2oGZJwotgMKHiqw2ZVtBVS2Ic0c' +
          'yACqAQoC1e8AAH4THIg=');
    bmp_Ore_Tin:
          Result := BitmapFromString(7, 3, 'beNpLTg4PDo6NjMx' +                   //Tin_Ore [10-12-09]
          'ITs7LzCzIzgaSWamp0eHhibGxQAZQBC4IVJYSHw8XzElPzwAAEYYY' +
          '5g==');
    bmp_Ore_Coal:
          Result := BitmapFromString(7, 3, 'beNpTlZGTE1dSklJ' +                   //Coal_Ore [10-12-09]
          'VldHQkAciIAOIkEXwCQIAC50IfA==');
    bmp_Ore_Silver :
          Result := BitmapFromString(7, 3, 'beNrrmlBYWFZVVd/' +                   //Silver_Ore [10-12-09]
          'W1tPfP3XSpJkTJkzv7p5UVlbT2Nje2TUBKAJEQCkgu6amsbm5E8gA' +
          'qoEKAgAyUiIM');
    bmp_Ore_Gold:
          Result := BitmapFromString(7, 3, 'beNrrk5pUIrqgXnx' +                   //Gold_Ore [10-12-09]
          '9t+SuKdJ7p0vvniq9dYLUrGqxFW0Sm/ul9s8ACQKlgGygslXtIEGg' +
          'CBDtmCy9CQB2/Bwz');
    bmp_Ore_Mithril:
          Result :=  BitmapFromString(7, 3, 'beNozD9LRcTQ09DQ' +                  //Mithril_Ore [10-12-09]
          '1C7CwDLGyCgeS5uZB+vpuJia+QAZQBC4IVIYuCADpFQ+E');
    bmp_Ore_Adamant:
          Result := BitmapFromString(7, 3, 'beNpzsTayNDKzN7N' +                   //Adamant_Ore [10-12-09]
          '2sbb3tIcgWzdbExsTC0dLIANZEKgMTdAaAOgFD28=');
    bmp_Ore_Runite:
          Result := BitmapFromString(7, 3, 'beNoLCDdzdLPx8HU' +                   //Runite_Ore [10-12-09]
          'OCHcLifYIiwWSLkGRVm7e9j5BQAZQBC5o6xXg6BeCLOgMAF6iEzw=' +
          '');



    bmp_Bar_Bronze:
          Result := BitmapFromString(6, 6, 'beNqzUbbRlYajABt' +                  //Bronze_Bar [10-12-09]
          'lIELjApGSJD8EUSQCABMEErQ=');
    bmp_Bar_Iron:
          Result := BitmapFromString(6, 6, 'beNoLDHS0s0NGIYG' +                  //Iron_Bar [10-12-09]
          'BqsrKyFyICByRLwIARD8Xlg==');
    bmp_Bar_Steel:
          Result := BitmapFromString(6, 6, 'beNqrqUmJj0dGjTU' +                  //Steel_Bar [10-12-09]
          '1aFxkEQgXiCzNzSGIBBEAEFkpjw==');
    bmp_Bar_Silver:
          Result := BitmapFromString(6, 6, 'beNqrqUmJj0dGjTU' +                  //Silver_Bar [10-12-09]
          '1aFxkEQgXiCzNzSGIBBEAEFkpjw==');
    bmp_Bar_Gold:
          Result := BitmapFromString(6, 6, 'beNpbIbe4SRw/urx' +                  //Gold_Bar [10-12-09]
          'CLtaLF5kLEYEjYkUAFiwozg==');
    bmp_Bar_Mithril:
          Result := BitmapFromString(6, 6, 'beNpzSjQy9oYjR6d' +                  //Mithril_Bar [10-12-09]
          'EIELjApGsrDYEUSQCAGhIGLE=');
    bmp_Bar_Adamant:
          Result := BitmapFromString(6, 6, 'beNoL8bRwtIQjzxB' +                  //Adamant_Bar [10-12-09]
          'PIELjApGCqgIEUSQCAHRMGOE=');
    bmp_Bar_Runite:
          Result := BitmapFromString(6, 6, 'beNpLyLD1CoCjgIQ' +                  //Runite_Bar [10-12-09]
          'MIELjApGKth4EUSQCAKRXHlY=');

            //all runes updated 4th Sept 2010
    bmp_Rune_Air:
          Result := BitmapFromString(10, 7, 'beNpNjtsKgCAQRD9VpKuZ3RMRM6' +
          'Jf3Nf+pYWJJfBh3Dk7s0TbOD5EeHHfIM4Yr5TufEzWLs5hGNYVIoc' +
          'AYDBGdv08S0jynpm+acT9hwBoi0JcboHgYwDgy0xXVf8QaSmVqrUW' +
          'iy/5Kl4kjYgB');
    bmp_Rune_Mind:
          Result := BitmapFromString(9, 6, 'beNorLSkrLDQ344CguoqK+qoqCLu5r' +
          'rYkPx8uVVVaUlNWBmE31tQUZGcX5eYCFQC1VxQXA2UhUkDteZmZQF' +
          'm4AqAs3HAgmZOeDlEANxmI4CYjI6jJAKr+MqI=');
    bmp_Rune_Water:
          Result := BitmapFromString(7, 7, 'beNqTmpOVmpqTnp6XmVmQnS0mN' +
       'QeC0hITM5KTIVJwwZT4eKA4EMFFgCg+OjopNhZZBIhiIyOBCE0wMj' +
       'Q0OjwcqB5ZMDw4GCgOVIwQBwDlRC5D');
    bmp_Rune_Fire:
          Result := BitmapFromString(11, 5, 'beNpljFsKgCAURHfhv2u0IsQSMc3U' +
          'XkZE0GKbEPwJDpczl2EoMVKOSk1aBzM8lGzepxiOeT7X9dq3OyU8d' +
          'd/lGhy1aO3iHJqIaOJKzoESAv4fxOV1JZoGksmDJWZaxoqXtY8XIR' +
          'pFYQ==');
    bmp_Rune_Earth:
          Result := BitmapFromString(11, 3, 'beNqrqCjIzi7KzS3Jzy8rLKwo' +
          'Lo624UVDeZmZQDVoyqpKS2rKyuoqKuqrqrJSU3PS09GUIdQAAFx4J' +
          '64=');
    bmp_Rune_Law:
          Result := BitmapFromString(10, 4, 'beNpTuSavAkIl+fllhYVARlVpCR' +
          'DVlJVBxCGoIDu7KDcXyACqqSguBipAls3LzAQqgKgBmgNUABFPS0z' +
          'MSE7OSk3NSU+HGwIxQR4AlTMw6A==');
    bmp_Rune_Nature:
          Result := BitmapFromString(8, 4, 'beNrLzc1KTc1JTxeqEwWiguxs' +
          'IFmSn19RXJyWmJiRnAwRz8vMBJJFubllhYUp8fFAKYg4RCNQHKglP' +
          'joaKAURB5oJMa0IADkkIHo=');
    bmp_Rune_Chaos:
          Result := BitmapFromString(10, 5, 'beNqbI39tjvzdK1eAyNyMA0JCGEAE' +
          'lILLYiI0WT5eXjyyWPViKoCKAwDh9WkK');
    bmp_Rune_Death: Result := BitmapFromString(12, 9, 'beNptjt0KgCAMRp8zRIQIQvrP' +
               'EhFLJKIX7LZ3abAYMYRzM3a27zNmGQY7Tc4Y4LlvIoVw7NsZ45XS2' +
               'DRz14H5F4DoPWpArzVqzAnW7s6hCSNq9BCj/bqQRofMZPWItq7RZK' +
               'GllJVS2RMKlUWhhGBb1i37AfmKvQ6hy5E=');
    bmp_Rune_Body:
          Result := BitmapFromString(14, 5, 'beNpdjtkJgDAQBSvQCvywtRDiF' +
          'e8jhLAagohtWZoPFoII8/V2WIZo1DpNEmCmyS6L21Yy5rDWO8f7ee' +
          'yX93cIfV3z8pVBHANRlj+gLUvI/HnuunUY4LMTn7NZSdkoBR8n+DH' +
          'mV4KGQggAn4UY88sOLxqsRU0=');
    bmp_Rune_Cosmic:
          Result := BitmapFromString(10, 7, 'beNq7In/tCgjVlJXVVVTUV1U11tQ0' +
          '19VCBJFRVWkJXA2mLJEKIGqwygJRRXExpoKC7GwgKsrNLcnPBypAl' +
          'spKTc1JT8/LzIQogIoDACTZcOk=');
    bmp_Rune_Soul:
          Result := BitmapFromString(18, 5, 'beNrr6Z4w6TocFeXmluTnlxUWVhQX' +
          'V5WWAFFNWVldRQWyms7m5gldXcgiWPUCNSLLtjc2TurpxtSFH7XW1' +
          '0/u7cUqlZeZiV9XbGQkplROejoujUBdkwAjiKIY');
    bmp_Rune_Blood:
          BitmapFromString(6, 12, 'beNpdylsKgCAQheE99Ni+IkQkKszu' +
          'ZZmIRG29U8IUwf9yvpk42q09nDu9R0ccIau1W1e/mfv0iJmmgGGiu' +
          'euWYYCTjE0TkKRXKiBJXZatlHCSKs8RTVQI8Z1IMPYTnqYZ519hSY' +
          'K3Fy9o6kKo');


    bmp_Talis_Air: Result := BitmapFromString(8, 8, 'z78DA4D90491244210843' +             //Air talisman
          'AFE4C010964EDCFF484D7F5CE8ABB22C0D9068040374680D9A8CC' +
          '0A44A9D7BF6D97930059D56B009A47A940391235B5C10BCFAC512' +
          '3039391732327435B57CCD3DABEEB9F1E4716BBF29609D3A50F4B' +
          'F3E575739A507C487D7DB0D0B2D10DDBAAE376811CF2CAF32BD59' +
          '430822B1EBC9FB37D19DF5254A6FA318078A1D93062ACADBF34D9' +
          '45566701C8B801877D6417C5CE6BAFF4CB2228FB2B3FF00D6A856' +
          '88');
    bmp_Talis_Mind: Result := BitmapFromString(8, 8, 'z78DA75904B0EC4200C4' +              //Mind talisman
          '3AF04251F670914EE7FA4F1342C2A8D266F6BCB7642108077AFE4' +
          'B24EC22AB9746827429A4C720BC447B151C5CD96DDB60DE4D1376' +
          '9528A4E35A2B2656B919040F320D31B795CA9FC9702F5E11DC5BF' +
          'F7B43AFA618D882E66640AB46ACD3EA7D57225F0623BB7A4F7AD8' +
          '90B1470F1F675BAA5EB6751EA7B09258E1B131D15251BBE17BD5D' +
          '11D8586118E8276B818F3BAEFCB3D8E41ED7ADFB03A3AE53DB');
    bmp_Talis_Water: Result := BitmapFromString(8, 8, 'z78DA75D04712C3300C' +               //Water talisman
          '03C02FA9B08047D5FF3F2988E58333196BAFE400620802F0E6998' +
          'A350ACB54B46B23A12A83A640DC972B992D9BB60DF49C1F6AA4B2' +
          '656B929040F5A0E195DEB61E2950EFDE90FCFBAE5669668159B74' +
          'AA28B1927059A3563A090F964C6D5EDCCBF6D4581137CFB3ADD7E' +
          'E6FFBAB5144A8EC9A4868C741ABEFD28021B2B0C1DEDCE5AE0E1E' +
          'EAD7367B1C166AE5BF7071F0F5449');
    bmp_Talis_Fire: Result := BitmapFromString(8, 8, 'z78DA8D90490AC4300C0' +              //Fire talisman
          '4BF643B5A5A4779FBFF9322221F6618064281D1A14C4B6D0403D4' +
          'B5064D3C30A941E3CE1E5070D108268154977220B26442AA97F9E' +
          '50F968069D3E64246864B4D2DCDE36F81E0CCCFAF9C3305AC5DFD' +
          'D3FFF732B872C5400BDEF8CF6ED6A0C10B3F77F3621C286624FD3' +
          '8D9435E943D98616399A0C34FD6421497779D9E49867451DEBC6F' +
          '735F54C5');
    bmp_Talis_Earth: Result := BitmapFromString(8, 8, 'z78DA75904B0EC43008' +               //Earth talisman
          '43AF940F60B34CD270FF230D52BB48A58E9EC402616C70A19318A' +
          '849B391B8D5A4E9D49148D265259750800D4DCCB65DAADD0BBFAA' +
          '84841671717678B2D0D1FFCE1F2E544C8CBBFF4A35ADDB7B03B56' +
          'AE56263FBB7F9A55A6A6ADE888408EC8FF93026C70746714DC02B' +
          '9D062BCB9DF0BCE854B933B8DD38391EAFCD7CDCA3BA2F125B990' +
          'C1A1A3FFD2E52E3');
    bmp_Talis_Law: Result := BitmapFromString(8, 8, 'z78DA7D8F310EC3300C03' +             //Law talisman
          'BFC42291C98E59F8FF27D58AEC3440DC420007FB0EA2049A6E6EC' +
          '809850381DD7DB4A30F33376FAEECA406EB05FFB088E673F8C75A' +
          'F1B9E5DECAC174BE16FCC2D1BB93CC1BB0B24E6658C50BD4E4EBB' +
          '7B2BADD5F2ADF9004A537760DFEC74545167DEDCA86F32E4CABF8' +
          '0F8395533F');
    bmp_Talis_Nature: Result := BitmapFromString(8, 8, 'z78DA7D904B12C3200' +                //Nature talisman
          'C43AF4400CBF21208DCFF48554216ED745ADEE08D7F92A332486F' +
          '7E888C86964E0CFD6CDD9AA8A2D421CECAEA3EDD0430716281227' +
          '0885D3F0C863D6147160F31BC881F5D1FF5E6DD1B935FEF56F59E' +
          'FD8E1CCC027E6AC7D6464F58DB0B3A8AA836A5ECD616992A90E3E' +
          '5734FF8EFA8A530E1BC36351E4C5BE12F47115C9C0176B667D7A4' +
          '0EF774ED3B570C29735BB65E288F5580');
    bmp_Talis_Chaos: Result := BitmapFromString(8, 8, 'z78DA7590490E433108' +               //Chaos talisman
          '43AF9401B05966F8B9FF918A94BFA0AACA93D860848D0B9DE4626' +
          '383D963DBDC6AD074EA0824E8B2822D14D0B0B15EE5311A67A154' +
          'C95D558E1C2DE2E2ECF060A1A3BF1A8E3DD6973E5DA16262B020E' +
          'A4E83A8772BED2AB56ABDCEAFAB5F27B7E72CDE88803878FEEAD3' +
          '0746710DC01D97062B4B4E94FF70B7DC79F878BC25D4C9DB4D848' +
          '11A882D9B063D7A3E27C4541A');
    bmp_Talis_Death: Result := BitmapFromString(8, 8, 'z78DA8D903912433108' +               //Death talisman
          '43AFE46F10C225DEEE7FA490E4172E924C7833342C42B8B133AC5' +
          'B4D0481881535AE33ABCA4CB684B86D7B06B1B1ACC0E167679925' +
          '4AA869492EE9D2A916F661E737159A0DEBDF7A005D3A1326AE552' +
          'B1785F27BF339E5CAC6F6CF3D101DDA9B3A93E04EA5C1CABB6AD3' +
          'D2E6F9073454541F7E7971E7E4786B79219297AFFBCFC0C40075E' +
          'B7E00C70F571C');
    bmp_Talis_Body: Result := BitmapFromString(8, 8, 'z78DA7D90510AC430084' +              //Body talisman
          '4AF94B4EA8C9F264DEE7FA4B5D88FC22EEB0311E2E818173A8940' +
          '4F0E8BC4AD27870E8D2E1D217ACA4C2EA1000B9A982DBB6C1B935' +
          '7BF4EB54465CBD6262ECE130EAF39957FA842459F572A06820D77' +
          'BC5D0D3B13D1953B6A0BB56B7F4F2E6F59DFF1CAA5AA1E3F8884D' +
          '858E5EDFF45D15C13F0E264B0B395434C9CC997CA9D9BCB8D83F1' +
          'EC5ACC8F7B547591D8CC7BA05BF7078F8E53A4');
    bmp_Talis_Cosmic: Result := BitmapFromString(8, 8, 'z78DA7590498E05210' +                //Cosmis talisman
          'C43AFC490C159068ADCFF483F2A508B5AB49E940D3676620403D4' +
          'B5264D5C7C148F4AF7E44E337908A4BA94139125CF7E15939A341' +
          'EEC3C5912A6A0E0424686AEA676FF2621486E9733F14901EBD04F' +
          '87DDCAC9FB5F9F9D02AE5C31D1D03E7A6891F82412AFF4BC2E6B4' +
          '8416E1CBA8EFEDDE8BF6E5E8C13C593498E8AB21BEAD49EBC77B8' +
          '5D66082C130CF8C95AC8C31DD7BE33C99421CAC1F1030D395553');
          
          
      
    bmp_FishGear_SmallNet: Result := BitmapFromString(9, 9, 'beNo9jAsLgkAQhPUv9EB8IGp32eW' +   //small net  |  14 may 2009
       'dj0g5rgxNykKo/v+vaWQjGJbZ2W/Hsm96r1UCWZZNevcHzL4WptzC' +
       'fK7z2shEsoAAxYI6i7tj+uqq0WRzwgOa3npB74DLNPSd5aCz6VJi5' +
       'vz3vovd0ai5UzEwaeQ+Tmo08nnO0UkMAf9m5G3Fh0ZAtdrQ6W4kYb' +
       'rgKJnaAl4knmQ+AX0jAODEQgchTOStrC8oaB35');

    bmp_FishGear_Rod: Result := BitmapFromString(9, 7, 'beNrz4gn29XV3crIyM7PT4mBgYAS' + // fishing rod |  14 may 2009
       'iskj+CGfuYHtuMVFRoJSdlaW+jg5EKiuAz9OcE8iICArycnV1tLUB' +
       'qoFoiXXjAeoCsqNDQ3w9PIwN9OFa/Ky5gIyqGIHY8PAAby+IOJCb5' +
       'MUD1AVRE2zJDXdAXjAf0HaIGqCZfmZcEPG6eIE0X16gLoiWJAD1kR' +
       '+/');


    bmp_FishGear_FlyRod: Result := BitmapFromString(8, 2, 'beNpjYIwICnJ3cmJgYGxKEswL5ot' +   //fly fishing rod |  14 may 2009
       'w5gayDRQUfD08IOJlkfxJXjwQcQYA4NgIiw==');

    bmp_FishGear_Cage: Result := BitmapFromString(11, 13, 'beNp9kMEKgmAQhO9l' +            // lobster cage  |  14 may 2009
       '9jZBhyAMKy1TtNIIITxIWkkIXbz24g18HiJSGH5md4adf9cxd5NBN' +
       'B2CZNYinRsgWxg9Eujq58sR6JFKx1TZJQnV1jwf9n8l1HfTJGFI+S' +
       'OhCpHnVXkuUvvjb1xOJwzBxn0WV5E0jnWQIsvoKxri2nZ9K8nSNZh' +
       'GCVlZ1utxFzkGvq7BNKL18n8M6mhfphGtl70weOu1DHCi270+AGOC' +
       'kg==');

    bmp_FishGear_Harpoon: Result := BitmapFromString(12, 11, 'beNpdjm0LwWAYhfmmvP4Ev' +     //harpoon  |  14 may 2009
       '0A0X1BMtJZayduIsVYm1DAawhDzVhL5wY7uepI6H552rl334eMi/4' +
       '3L5V5Nza1l7RcLZ72+7rbzkdHXNAQVMYQhy8n4bG8A9FS121YojCE' +
       'MADD8rjYa9VJJazWRXwAnNrOZoesAmtUKmdktPO6Hw8M5msMB5Ios' +
       'lyUJH6PhMCLwHN7P8+l1ubxvN63gg5wkBMAAhg0eFAPpiAcGLCGGr' +
       'hTySWLMWrCc8bINTMLG2J2QIvhY9QfkUjFUmJHnPL9+bECFkESX/P' +
       'Wc928k2mwiIqbj4gf1xl5S');
       
      // Updated to 8/9/2010 \\
    bmp_Axe_Bronze: Result := BitmapFromString(2, 5, 'meJxjYmBgYmCQ0rXhFYqU1LaEkDxC' +
        'YRAEAC7lA84=');
    bmp_Axe_Iron: Result := BitmapFromString(2, 5, 'meJxjYmBgYmCwsbHnFYq0tLSBkDxC' +
        'YRAEADlGBGQ=');
    bmp_Axe_Steel: Result := BitmapFromString(3, 3, 'meJxjYmBgAqP4+OTY2EReoUggGR0d' +
        'D2QAADcHBWM=');
    bmp_Axe_Black: Result := BitmapFromString(2, 5, 'meJxjYmBgYmDg5eXjFYqEkzxCYRAE' +
        'AB3LAsk=');
    bmp_Axe_Mithril: Result := BitmapFromString(3, 3, 'meJxjYmBgAiNvYyNPQ0NeoUgg6aav' +
        'D2QAACQhA6E=');
    bmp_Axe_Adamant: Result := BitmapFromString(2, 5, 'meJxjYmBgYmAwszfjFYo0sTGBkDxC' +
        'YRAEADcjBEQ=');
    bmp_Axe_Rune: Result := BitmapFromString(2, 5, 'meJxjYmBgYmDw9bDmFYr0drWCkDxC' +
        'YRAEAD7SBLU=');
    bmp_Axe_Dragon: Result := BitmapFromString(2, 5, 'meJxzD6hnYmDwCm72DmnlE0n0CW3n' +
        'FYnnE03jFY7lE00GAHQiBxQ=');
    bmp_Axe_Adze:Result := BitmapFromString(9, 9, 'beNqzM3azNYIgBgZGCJLlZFdVV' +        //Azde Inferno Axe
          'gIy4OKtmopAZC/Mb29rBeQKCgpCxBs1FMpV5YqVZf0khIG6kKXq1O' +
          'WB4hkKUvGyEhBxIAAyfp9VB2rJV5IBajHm54FIeTqYABlvDshCjGr' +
          'PFciJ4IVIedgZAxl3t0hvnCA2u04Y4kKIaRCpQ/MkgFJwQYg4EEHM' +
          'RFYMRQASJSec');
          
          
    bmp_TinderBox: Result := BitmapFromString(6, 6, 'beNpz4F44bSoQzZs8aUZf' +             //TinderBox
          '7+TOjjgH7sXTpwPR/ClTZvX3A7lwEaAyCBcuAkRwEcIIABweKJI=');
    bmp_Log_Normal: Result := BitmapFromString(6, 6, 'beNoLN6lLtISgxmRrIlF1nAVc' +         //Normal Log
          'V0WMeVG4SX6oUZSrZqyHdqKXTqqvHhBlBOjDGdlBhkAFRQA4pCTw');
    bmp_Log_Oak: Result := BitmapFromString(6, 6, 'beNpLtu7NcUBD/XmOuBBQtj3DtjE' +      //Oak Log
          'ZpKsry74l1aYu0bIixrwo3ATOyA4yBKL8UCMguzTKFChYHWcBlG0E' +
          'ABT7KQA=');
    bmp_Log_Willow: Result := BitmapFromString(6, 6, 'beNpzkspJsQ3zlUNG+Wl2QIQ' +          //Willow Log
          'mgqYmM9E6yFMWgqxNRYEIyHCwFENGMaEmnk5SCAQACP0arQ==');
    bmp_Log_Maple: Result := BitmapFromString(5, 10, 'beNqLi8sS58uT4CuT4l+W' +            //Maple Log
          'Hb86LylNjBcoUizJDxRZkZuYJMoDRBBulbRAhDB3rAgPUD1QBKg+R' +
          'IgbKAIxYW1BMpANFIFo31iUxsDACERAA4Ead5RnQbhA2ToZgX3Vub' +
          'Hh4QmRkUkx0alxcekJCRAuVAQA3gcmog==');
    bmp_Log_Yew: Result := BitmapFromString(6, 6, 'beNqz54pz4yYJRTpzhdpzQRgQdoA' +      //Yew Log
          'Np7cFp4MBu5sJBxAB2UAEFERmA1EoAAH/Fnk=');

          
    bmp_Pick_Bronze: Result := BitmapFromString(4, 6, 'meJyzy+zxbVqr5him4RINRAaB2UE9' +
        'u8KnHGViYDAOLzaLrrTP7gOypXRtpPXt5IydgWxhBW0JTTNJbUsgm' +
        '19SEYIA72QQQg==');
    bmp_Pick_Iron: Result := BitmapFromString(4, 6, 'meJzr7Z28eMlqNccwDZfo8PDooqLy' +
          'DRt27Nx5iImBoaCgtKysurOzH8i2sbGzs3N0dnYDsnV09MzNLS0tb' +
          'YBsfklFCAIA2E4VLg==');
    bmp_Pick_Steel: Result := BitmapFromString(4, 6, 'meJzr7p64cdMuNccwDZfo6Oj4vPzi' +
          '/ftPnDx1mYmBoaysura2edKkGUB2bGxicnJ6ZmYukO3u7h0SGgFUD' +
          'GTzSypCEAA3bhhT');
    bmp_Pick_Mithril: Result := BitmapFromString(4, 6, 'meJwrjY5aUVig5him4RLtpq8fZG+/' +
          'tapyX2M9EwNDhItLrId7bmgIkO1haOBrYhxkbg5km6mqOOvqAkWAb' +
          'H5JRQgCAPRgELk=');
    bmp_Pick_Adamant: Result := BitmapFromString(4, 6, 'meJxLL0/vmt+l5him4RKtb6bvHuQ+' +
          'ZfWUuVvnMDEwuPq7eoZ4hiWHAdlmdmYWjha2bjZAtoaehqGloYmNC' +
          'ZDNL6kIQQATZBE6');
    bmp_Pick_Rune: Result := BitmapFromString(4, 6, 'meJwrzAxfMa1AzTFMwyXazdEsOtB2' +
          '66LKfavrmRgYEsMdU6NdyrMDgGx/L9sQP8eIIBcg28Zcz8PZwtfdG' +
          'sjml1SEIAA/HBKu');
          
    bmp_Bow_CrossBow: Result := BitmapFromString(6, 5, 'beNorDWsuj4CgUA8DK0MFA0' +           //CrossBow
          '1pBgbGhhyP2iy3SG8jO1NlIBeI8uPs0sIs4wNNgWqA3Jxom+Rgc6A' +
          'CPyedxtKwuuJQoBTQBC97LYiWRgBeYxdg');
    bmp_Bow_Short_Normal: Result := BitmapFromString(5, 6, 'beNpjYMxNTWFgYEx35Qm' +              //Normal Shortbow
          '15AIyIAiZW+zHm+TEHWDGSZALZAM1RtpwgbgAJEYMuw==');
    bmp_Bow_Short_Oak: Result := BitmapFromString(5, 6, 'beNpjYMxNTWFgYGzK5M8O5' +            //Oak Shortbow
          'wUyIAiZO7lCsC4NwZ1QCuKmB/PAuVXJfBAukA3UWBzLC+ICAMbvEP' +
          'w=');
    bmp_Bow_Short_Willow: Result := BitmapFromString(5, 6, 'beNpjYMxNTWFgYCwv1E' +               //Willow Shortbow
          'qKUQIyIAiZ295gUJKrCee21OoDuXGRinBuQZYGhAtkAzVmJquCuAD' +
          '7BxJv');
    bmp_Bow_Short_Maple: Result := BitmapFromString(5, 6, 'beNpjYMxNTWFgYGzKS8+' +              //Maple Shortbow
          'KCgEyIKghJxXOnVhVXJeVnBERBOH2VxZWZySlhgZAuL3lBZVpCcnB' +
          'fhApoMaihCgQFwCSBRZv');
    bmp_Bow_Long_Normal: Result := BitmapFromString(3, 5, 'beNoL4GNgYKwL5QeSyIw' +              //Normal Longbow
          '4e+6qYL7c1BQguzwApCY/Pb0cAItWB2w=');
    bmp_Bow_Long_Oak: Result := BitmapFromString(3, 5, 'beNqrEGRgYFzQJAwkgWhuA5' +           //Oak Longbow
          'RRnsA3q1YoNzUFyJ5eJQQk89PTJwMAtokJLQ==');
    bmp_Bow_Long_Willow: Result := BitmapFromString(3, 5, 'beNprMGBgYJzcbQIkgWh' +              //Willow Longbow
          'ChzGEkZuu1ttqlJuaAmR3NRsCyfz09HYAyIoJyw==');
    bmp_Bow_Long_Maple: Result := BitmapFromString(3, 5, 'beNqrLGRgYJzbWgMkgWhm' +             //Maple Longbow
          'YyWEUZIUA2TnpqYA2ZNrSoBkfnp6PwDx+wtt');
          
          
          
    bmp_Food_Cooked_Meat: Result := BitmapFromString(16, 4, 'beNrzNK/24qME9YY5ICM02fYgO' +       //Cooked Meat
       '5LU1/la4VePrKUrxL4CAG1uOqY=');
    bmp_Food_Cooked_Chicken: Result := BitmapFromString(7, 6, 'beNpz42NgYEy24Slx' +                 //Cooked Chicken
          '4yv34Kv25i9w4QVygYLp9jxAbr0vP0QQKOKjx5ntyAsUafYXgAvGW' +
          '3IDGUARIAKaAGQHGnIBTQCy2wIRgkDTIAb2hglCtANtLAEA2Uodkg' +
          '==');
    bmp_Food_Cooked_Shrimps: Result := BitmapFromString(5, 6, 'beNpjYGRgQEFXJ0pd' +                 //Cooked Shrimps
          'LYCi2YHCXR6CvV4gVGDN66PB2ewqAET1zvzpZjyBWlwltnxA8WwL3' +
          'ngj7lBdLhSjAFtZEY0=');
    bmp_Food_Cooked_Anchovies: Result := BitmapFromString(5, 6, 'beNpjYGRgQEHhCbM' +                  //Cooked Anchovies
          'KK1ZAUFB4ladvrrd/PhBZ20doaNm4eqYDkbN7irlVoLauva1jNFDc' +
          '0ibUyNRb18AZxSgAqlITnw==');
    bmp_Food_Cooked_Tuna: Result := BitmapFromString(6, 6, 'beNorLWjMSqvLSClNiIU' +              //Cooked Tuna
          'jCDc7IrQmLakqJRGI2vOzW/MygVyILJABFIEINudkABGQ3VOcD0Sd' +
          'hblwNrMcCxD1lRZAEQC2dS0+');
    bmp_Food_Cooked_Trout: Result := BitmapFromString(6, 7, 'beNpjYPS0sQp2cYrwdI' +               //Cooke Trout
          'vz9U4M8E0LCQSyo709gOzkIP/siNDiuGigFJCdFxVemhBbnhRfk5Y' +
          'EYVelJNZlpDRmpbXnZwMFgYzmnIzWvMye4vwZtRVABlAcyJ5QVjSr' +
          'vmpeUy2EPaWqFMhd0FLPAAA4fzKj');
    bmp_Food_Cooked_Pike: Result := BitmapFromString(6, 6, 'beNpjYAzO9QzL944q9Y+' +              //Cooked Pike
          'rCkpuDM/ujoso8gWyU1sic3vjCyYlFU1JgbCBjJLpqeWzM+qW5EEY' +
          'lXOzahblNq4o7NtRA2QAxeuXFbSsKQFypxxobF5VBGS3byjv31U79' +
          'VAzAwDhYjLo');
    bmp_Food_Cooked_Salmon: Result := BitmapFromString(6, 6, 'beNpjYJxoKDjdWGieq' +                //Cooked Salmon
          'fASc5EN1qJ77MVnm4DYm23E9juIH3WSOOUiCWEfd5Y46yp5yV3qvr' +
          'c0UPCCm+RVD6lbntJPfGV+hMjd8JS66yX9yEf6lb/M7xD53ynWQHE' +
          'g+12A7O8I9d8ZjgwAEyYpag==');
    bmp_Food_Cooked_Lobster: Result := BitmapFromString(6, 6, 'beNqLFd2WILY/VfxS' +                 //Cooked Lobster
          'vtSTChkgYmBgRBb51igHFNmZCBJJN+OBKICLiAoLwxFEZZu7wBQ/o' +
          'YWhwquiRIHcLg/B6QEg7tpo0Q0AZhkgFw==');
    bmp_Food_Cooked_Swordfish: Result := BitmapFromString(6, 6, 'beNorWZPvX1oWUlM' +                  //Cooked Swordfish
          'd3tgU05njWxRpH9efOn1i+kwg2RbfWxvZku6Zu7R03dyCZVOz5vam' +
          'TAEKVoTWLyxaBRScX7hicsZsoGBLXDeQvbhkDVBwZcWmmbmLupMmM' +
          'TAwQtDy8g1AwcUA+4QyqA==');
          
          
          
    bmp_Food_Raw_Meat: Result := BitmapFromString(6, 6, 'beNpbMH+eojAa2rtlM6kiO9ev' +         //Uncooked Meat
          'A4ogC25avgxNyxoATJwnrQ==');
    bmp_Food_Raw_Chicken: Result := BitmapFromString(6, 6, 'beNqbOnltd+eSlqYZVRXTKso39v' +       //Uncooked Chicken
          'UcXb50x5RJ63u7l7U2z6uvBbJPrlt7YP68PTNnbJs8cXVXx8GF84+' +
          'vXnlo8UKIIFABkH1s5XKgRojgvtmzgGqAXLjg/rlzgCp3AQAyD0Ta');
    bmp_Food_Raw_Shrimps: Result := BitmapFromString(5, 6, 'beNpjYGRgQEEntq6' +                  //Uncooked Shrimps
          '+urDl2uI2IJpbFNGXHjAhM3BydnBxsKO/pU5bok9LvFdjrGeWr02w' +
          'jV5ZqBNQPNffNsHNLMzOAMUoAMXOGRE=');
    bmp_Food_Raw_Anchovies: Result := BitmapFromString(5, 6, 'beNpjYGRgQEGtrSumTVsEQdnZJYmJ' +     //Uncooked Anchovies
          'mcnJ2ampuf7+oSYmFtHRSUAUERHv4eFrbm4NFPT1DfbyCrB3cLWys' +
          'kMxCgBC+RaW');
    bmp_Food_Raw_Tuna: Result := BitmapFromString(6, 6, 'beNrbuWP57NlLZ82c2de3aNo0CI' +       //Uncooked Tuna
          'Jwe5qaVs2bt3LuHKCCTcuXrVu0ECg1vbcHyFizYP7O9euAaNua1Vt' +
          'Xrdy8YgWQvX/rViDavXEDnM0sxwJEB7Zvh6CDAFeXQxc=');
    bmp_Food_Raw_Trout: Result := BitmapFromString(6, 6, 'beNpjYKwpKW4oL2+r' +                 //Uncooked Trout
          'relpapre27Ng6pSW6moIe9G0actnz141b97Mvr4lM2YAGesWLdy4d' +
          'MnujRuAjE3Ll21dtXLH2rX7t249f+IEkAEU37tl8+Fduy6cOnn94s' +
          'UD27cD2cf37794+vSNS5cYAE5gRKA=');
    bmp_Food_Raw_Pike: Result := BitmapFromString(6, 6, 'beNpjYPRP9g9MCwzNDo0siIwvj0' +       //Uncooked Pike
          '9rTAvODAayE6sSM5ozMluzcjtzIWwgI78nv6CvsGJGJZBRNKGoZFJ' +
          'J6ZSymjk1bSvbgQygeNWs6voF9UBuz8ZeoDiQ3bSkqWN1R9/mPgYA' +
          'pjMxzQ==');
    bmp_Food_Raw_Salmon: Result := BitmapFromString(6, 6, 'beNpjYKzwdakLcG8J' +                 //Uncooked Salmon
          '8eoM950cGzw3JaIxyBPInhofMj81aklGzIrseAh7WVbc6tyE9fnJu' +
          '8oygYJr85I2FqZsK0nbV5l9vqV0S1HqjtKMPRVZh2vyLraWXelrBI' +
          'oD2cfrCi61V16d2MIAABAOM8M=');
    bmp_Food_Raw_Lobster: Result := BitmapFromString(6, 6, 'beNpzli1zlq11l+/wVZoSorowWo' +       //Uncooked Lobster
          'OBgREi4qwmCBQBcoGoylUOKCIqLAxHS2I1geLhhqLxZhLp1lL59tL' +
          'I3GJHGSAK0hdJtpDMtpUGsoFmlgEA7aQW+g==');
    bmp_Food_Raw_Swordfish: Result := BitmapFromString(6, 6, 'beNpbfGli+szp2fPnFixbWrquO' +        //Uncooked SwordFish
          '2lSYUD5juZDe1qPAcm11dvmF65oi+89s/Ty0Rln93Wd2NZ4YHXllt' +
          'l5S07MuwAUPDbr3N6O45vq96ys2ARkQwTPr752cOKpjbW7GBgYIej' +
          's8itAwdMAElVAsw==');
          
          
          
    bmp_Bucket_Empty: Result := BitmapFromString(6, 6, 'beNrLs03ylgCiOA9xIIpyFUuOi' +        //Empty Bucket
          'UETCXMShXMhImnxcWgiWclJFtp8Rmo8QKStyAVEhZmZeSHSyKgdAO' +
          '2EG5o=');
    bmp_Bucket_Water: Result := BitmapFromString(6, 6, 'beNrLs62smkkQ2er' +                  //Bucket of water
          'zW2jzGanxAJG2IhcQ5YVIo6G6dMvGTOuWHJv2PNuuAvveYoeKJPPq' +
          'FAuEOAAStSgC');
       
       

    bmp_Bones_Normal: Result := BitmapFromString(5, 5, 'beNpjYGRgAKEbly71t7' +               //Normal Bones
          'YCGWeOHrl19eqGJUvS4uOA3KN795w6fLiutKStpmZqV1d5fv78KVO' +
          'AUkBGR13t3s2bc1NTISYwAAC6Yh+e');
    bmp_Bones_Big: Result := BitmapFromString(6, 6, 'beNpjYLx6/nx/a2tLVdWMv' +            //Big Bones
          't7V8+fPnzLl1OHD8yZPYmBghKDpPd2bVyxfu3ABkH322LFj+/Yd2L' +
          '5t57p1m5YtWzVv7sJpU4EagSbkpqYmRkVFBQeH+vv5e3m6OzlB0LL' +
          'Zs4Da923dwgAASxQz+w==');
       
       

    bmp_Uncut_Sapphire: Result := BitmapFromString(6, 6, 'beNoTyOMTqoAjQbHJXLzRELaASBeU' +    //Uncut Sapphire
          'IdoH4cJFwKgaP+LmT0Tj8gAApDsVnw==');
    bmp_Uncut_Emerald: Result := BitmapFromString(6, 6, 'beNrL5OctFIQjgS4Rr' +               //Uncut Emerald
          'kheCJu/SRjKaBfhLRbkbxEGIiCDSMQVzYvG5QEAb5UUXA==');
    bmp_Uncut_Ruby: Result := BitmapFromString(6, 6, 'beNoT4koW4YGjSgk+X35OCLtInB' +      //Uncut Ruby
           'fCKBPng3DhIkCUJkoABQhwonGjAfq6Erg=');
    bmp_Uncut_Diamond: Result := BitmapFromString(6, 6, 'beNprbZk+aRIc7dy0q' +               //Uncut Diamond
           'Tw/H8Jet3w5hLFl7dqZkydvWLECiIAMKJoyBT+qKy1F4/YAAI4EPw' +
           'U=');
       
       
       
    bmp_Cut_Sapphire: Result := BitmapFromString(6, 6, 'beNoTKu3omI2Mpk7bgM' +              //Cut Sapphire
           'zlFyoFIjQuXATOhYggc7EgANgkJpk=');
    bmp_Cut_Emerald: Result := BitmapFromString(6, 6, 'beNrLFbTZo4mMpm6eiMzlyxUEIj' +      //Cut Emerald
           'QuXATOhYggc7EgAFXLHbk=');
    bmp_Cut_Ruby: Result := BitmapFromString(6, 6, 'beNoT5VlclI+M1k/vR+YmiPIAERo' +     //Cut Ruby
           'XLgLnQkSQuVgQANj/IqY=');
    bmp_Cut_Diamond: Result := BitmapFromString(6, 7, 'beNqrr1uxdCky2r1jMzK3vb4' +         //Cut Diamond
           'OiNC4cBE4FyKCzCUKAQBys0a9');

    bmp_Ring_Ruby: Result := BitmapFromString(2, 6, 'beNpbIr5BVRSIbulKA' +  // ruby ring. 14 Jun 2009
       'VGAG+dxTYnpLUL5iby39ksBGb/vWe8BAO0FDjM=');

    bmp_GE: Result := BitmapFromString(5, 15, 'beNpbW7q1mOH5Wobnexn+/38PZ' +      //Used in GE Functions
           'FgaSrRYQlGQpSZ1ZaudOCCyUZYMaLLVTootbpoQ2WJLxfdri9/vav' +
           'm+d873Y3O/n9v4fW8PkHtvIwhdm1P8fmv1ymwnoBXZXoZTkp2uTUk' +
           'Gcu/1RQF1/T/Wc29S8vOl2ffmgMjnAECCbl0=');
           
  end;
  srl_Bitmaps[ID] := Result;
  srl_BitmapSet[ID] := True;
end;

(*
srl_LoadBitmaps
~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure srl_LoadBitmaps(IDs: TIntegerArray);

Preloads bitmaps identified by ID in the srl bitmaparray.

.. note::

    Author: Nielsie95
    Last Modified: Unknown

Example:

.. code-block:: pascal

  srl_LoadBitmaps(bmpArray);
*)
procedure srl_LoadBitmaps(IDs: TIntegerArray);
var
  i, h: Integer;
begin
  h := High(IDs);
  for i := 0 to h do
    if (not srl_BitmapSet[IDs[i]]) then
      srl_GetBitmap(IDs[i]);
end;

(*
srl_LoadBitmapRange
~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure srl_LoadBitmapRange(StartID, EndID: Integer);

Preloads bitmaps identified by ID in range StartID to EndID

.. note::

    Author: Nielsie95
    Last Modified: Unknown

Example:

.. code-block:: pascal

  srl_LoadBitmapRange(bmp_Uncut_Emerald, bmp_Uncut_Diamond);
*)
procedure srl_LoadBitmapRange(StartID, EndID: Integer);
var
  I: Integer;
begin
  if (StartID > EndID) then
    srl_Warn('srl_LoadBitmapRange', 'EndID is greater than StartID!', warn_AllVersions);
  for I := StartID to EndID do
    if (not srl_BitmapSet[I]) then
      srl_GetBitmap(I);
end;

(*
srl_FreeBitmapEx
~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure srl_FreeBitmapEx(which: integer);

Frees SRL bitmap which

.. note::

    Author: Rasta Magician
    Last Modified: Unknown

Example:

.. code-block:: pascal

  srl_FreeBitmapEx(bmp_Uncut_Emerald);
*)
procedure srl_FreeBitmapEx(which: integer);
begin
  try
    FreeBitmap(srl_Bitmaps[which]);
    srl_BitmapSet[which] := False;
  except end;
end;

(*
srl_FreeBitmapArray
~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure srl_FreeBitmapArray(bmpArr: TIntegerArray);

Frees an array of assigned SRL bitmaps determined by bmpArr.

.. note::

    Author: EvilChicken!
    Last Modified: Unknown

Example:

.. code-block:: pascal

  srl_FreeBitmapArray([bmp_Uncut_Emerald, bmp_Uncut_Ruby]);
*)
procedure srl_FreeBitmapArray(bmpArr: TIntegerArray);
var
  I, Lo, Hi: Integer;
begin
  Lo := Low(bmpArr);
  Hi := High(bmpArr);
  for I := Lo to Hi do
    srl_FreeBitmapEx(I);
end;

(*
srl_FreeBitmaps
~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure srl_FreeBitmaps;

Frees all SRL bitmaps

.. note::

    Author: Nielsie95, edited by Rasta Magician
    Last Modified: Unknown

Example:

.. code-block:: pascal

  srl_FreeBitmaps;
*)
procedure srl_FreeBitmaps;
var
  i: Integer;
begin
  for i := 0 to (srl_BitmapCount - 1) do
    srl_FreeBitmapEx(i);
end;

(*
srl_FreeBitmapRange
~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure srl_FreeBitmapRange(StartID, EndID: Integer);

Frees all SRL bitmaps with IDs ranging from StartID to EndID.

.. note::

    Author: EvilChicken!
    Last Modified: Unknown

Example:

.. code-block:: pascal

  srl_FreeBitmapRange(bmp_Uncut_Emerald, bmp_Uncut_Diamond);
*)
procedure srl_FreeBitmapRange(StartID, EndID: Integer);
var
  I: Integer;
begin
  if (StartID > EndID) then
    srl_Warn('srl_FreeBitmapRange', 'EndID is greater than StartID!', warn_AllVersions);
  for I := StartID to EndID do
    srl_FreeBitmapEx(I);
end;
