(*
Minimap
=======

The Minimap include contains all igeneral Minimap related functions

.. contents::

*)

(*
rs_GetCompassAngleRadians
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function rs_GetCompassAngleRadians(): Extended;

Returns the compass angle in radians.

.. note::

    by ReadySteadyGo, changes by euphemism

Example:

.. code-block:: pascal

*)
function rs_GetCompassAngleRadians(): Extended;
var
  Angles: Array [0..2] of Extended;
  Vectors: Array [0..2] of TVector;
  I: Integer;
  SouthPoint: TPoint;
  TPA: TPointArray;
begin
  Result := -1;
  FindColors(TPA, 920735, 545, 4, 576, 36); //Searches for red of South, East, and West points on compass.
  RAaSTPA(TPA, 7); // the point are small clusters of pixels, so by doing this, we are left with four points: the three cardinal points, and the center of the red arrow on the compass.
  SortTPAFrom(TPA, Point(561, 20)); //Sort from center of the compass, so the first point in the array is the point that is the center of the red arrow.
  InvertTPA(TPA); //Invert the array so that the arrow's center point is now at the end of the array and out of the way.
  if (Length(TPA) <> 4) then //If we don't have four points, something has gone wrong.
    Exit;
  for I := 0 to 2 do //Creates normalized vectors from center of compass to three cardinal points.
    Vectors[i] := CreateVector(Point(560, 20), TPA[i], True); //Creates normalized vectors from center of compass out to the cardinal points.
  Angles[0] := AngleBetween(Vectors[0], Vectors[1]); //Stores the angle between vectors 0 and 1 in Angles[0].
  Angles[1] := AngleBetween(Vectors[0], Vectors[2]); //Stores the angle between vectors 0 and 2 in Angles[1].
  Angles[2] := AngleBetween(Vectors[1], Vectors[2]); //Stores the angle between vectors 1 and 2 in Angles[2].
  for I := 0 to 2 do //This loop determines which point is the southern point of the compass.
  begin
    if (Angles[i] > pi) then //If the angle is greater than pi radians (180 degrees),
      Angles[i] := MATH_2PI - Angles[i]; //We subtract it from 2pi radians (360 degrees) to get something like a reference angle.
    if (Angles[i] >= 2) then //If the angle is greater than 2 radians, then we know that the two vectors this angle is between
    begin //are the East and West point vectors.
      case I of //The vector that is not those two is the South point vector.
        0: SouthPoint := TPA[2];
        1: SouthPoint := TPA[1];
        2: SouthPoint := TPA[0];
      end;
    end;
  end;
  Result := FixRad((ArcTan2(-(SouthPoint.y - 20), SouthPoint.x - 561) + MATH_PIOVER2));
end;

(*
rs_GetCompassAngleDegrees
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function rs_GetCompassAngleDegrees(): Extended;

Returns the compass angle in degrees.

.. note::

    by Wizzup?

Example:

.. code-block:: pascal

*)
function rs_GetCompassAngleDegrees(): Extended;
var
  Angles: Array [0..2] of Extended;
  Vectors: Array [0..2] of TVector;
  I: Integer;
  SouthPoint: TPoint;
  TPA: TPointArray;
begin
  Result := -1;
  FindColors(TPA, 920735, 545, 4, 576, 36); //Searches for red of South, East, and West points on compass.
  RAaSTPA(TPA, 7); // the point are small clusters of pixels, so by doing this, we are left with four points: the three cardinal points, and the center of the red arrow on the compass.
  SortTPAFrom(TPA, Point(561, 20)); //Sort from center of the compass, so the first point in the array is the point that is the center of the red arrow.
  InvertTPA(TPA); //Invert the array so that the arrow's center point is now at the end of the array and out of the way.
  if (Length(TPA) <> 4) then //If we don't have four points, something has gone wrong.
    Exit;
  for I := 0 to 2 do //Creates normalized vectors from center of compass to three cardinal points.
    Vectors[i] := CreateVector(Point(561, 20), TPA[i], True); //Creates normalized vectors from center of compass out to the cardinal points.
  Angles[0] := AngleBetween(Vectors[0], Vectors[1]); //Stores the angle between vectors 0 and 1 in Angles[0].
  Angles[1] := AngleBetween(Vectors[0], Vectors[2]); //Stores the angle between vectors 0 and 2 in Angles[1].
  Angles[2] := AngleBetween(Vectors[1], Vectors[2]); //Stores the angle between vectors 1 and 2 in Angles[2].
  for I := 0 to 2 do //This loop determines which point is the southern point of the compass.
  begin
    if (Angles[i] > pi) then //If the angle is greater than pi radians (180 degrees),
      Angles[i] := MATH_2PI - Angles[i]; //We subtract it from 2pi radians (360 degrees) to get something like a reference angle.
    if (Angles[i] >= 2) then //If the angle is greater than 2 radians, then we know that the two vectors this angle is between
    begin //are the East and West point vectors.
      case I of //The vector that is not those two is the South point vector.
        0: SouthPoint := TPA[2];
        1: SouthPoint := TPA[1];
        2: SouthPoint := TPA[0];
      end;
    end;
  end;
  Result := FixRad((ArcTan2(-(SouthPoint.y - 20), SouthPoint.x - 561) + MATH_PIOVER2));
  Result := Degrees(FixD(Result));
end;


(*
rs_OnMinimap
~~~~~~~~~~~~

.. code-block:: pascal

    function rs_OnMinimap(P: TPoint): Boolean;

Checks wether the specified point is on the minimap.

.. note::

    by euphemism

Example:

.. code-block:: pascal

*)
function rs_OnMinimap(P: TPoint): Boolean;
begin
  Result := False;
  if (not PointInBox(P, MMBox)) then
    Exit;
  if (FastGetPixel(bmpMinimapMask, (P.x - MMX1), (P.y - MMY1)) <> clWhite) then
    Exit;
  Result := True;
end;

(*
FindFlag
~~~~~~~~

.. code-block:: pascal

    function FindFlag(var P: TPoint): Boolean;

Returns true if the flag is found on the minimap.

.. note::

    by euphemism

Example:

.. code-block:: pascal

  if (FindFlag(P)) then
  begin
    writeln('Flag found');
    mouse(P.x, P.y, 3, 3, true);
  end;
*)
Function FindFlag(var P: TPoint): Boolean;
var
  I: Integer;
  ColorsArray: TIntegerArray;
  StaffColors: TPointArray;
begin
  Result := False;
  ColorsArray := [1127261, 284358, 255]; //Brown of the flag staff, Orange of the flag staff, Red of the flag.
  for I := 0 to 2 do
  begin
    if (not FindColors(StaffColors, ColorsArray[i], MMX1, MMY1, MMX2, MMY2)) then
    begin
      if (I < 2) then
        Continue
      else
        Exit;
    end else
      Break;
  end;
  Result := True;
  if (I <> 3) then //Keeps track of whether we ended up having to search for the red of the flag or not.
  begin //The first two colors checks are for the staff of the flag, which means we sort by Y to get the bottom of the staff.
    SortTPAByY(StaffColors, False);
    P := StaffColors[0];
    Exit;
  end else //The last color check is for the red of the flag, so if the first two colors were not found:
  begin
    SortTPAByX(StaffColors, True);
    P := Point(StaffColors[0].x + 7, StaffColors[0].y + 8); //Somewhat rough approximation of where the base of the staff is in relation to the tip of the flag.
    Exit;
  end;
end;

(*
FlagPresent
~~~~~~~~~~~

.. code-block:: pascal

    function FlagPresent: Boolean;

T/F depending on flag exist.


.. note::

    by weequ, edited by euphemism.

Example:

.. code-block:: pascal


*)
function FlagPresent: Boolean;
var
  P: TPoint;
begin
  Result := FindFlag(P);
end;

(*
FlagDistance
~~~~~~~~~~~~

.. code-block:: pascal

    function FlagDistance: Integer;

Returns distance in pixels your char dot is from flag on mini-map


.. note::

    by weequ, edited by euphemism.

Example:

.. code-block:: pascal


*)
function FlagDistance: Integer;
var
  P: TPoint;
begin
  Result := -1;
  if (FindFlag(P)) then
    Result := Distance(MMCX, MMCY, P.x, P.y);
end;

(*
WalkingToFlag
~~~~~~~~~~~~~

.. code-block:: pascal

    function WalkingToFlag(WaitTime: Integer): Boolean;

Checks if your charachter is moving; stores current FlagDistance to a variable,
waits "WaitTime" ms and then checks the FlagDistance again.
If it differs from the Distance stored in the variable, function returns true.

.. note::

    by EvilChicken!

Example:

.. code-block:: pascal


*)
function WalkingToFlag(WaitTime: Integer): Boolean;
var
  FirstDistance: Integer;
begin
  Result := False;
  if (not FlagPresent) then exit;
  FirstDistance := FlagDistance;
  Wait(WaitTime);
  Result := (FirstDistance <> FlagDistance);
end;

function RoadColorChecker: Boolean; Forward;

(*
FlagEx
~~~~~~

.. code-block:: pascal

    function FlagEx(Dist: Integer; RoadColorCheck: Boolean): Boolean;

Waits until Flag is within "Distance" distance.

.. note::

    by Wizzup? / WT-Fakawi / ZephyrsFury / N1ke! / weequ, edited by euphemism.

Example:

.. code-block:: pascal


*)
function FlagEx(Dist: Integer; RoadColorCheck: Boolean): Boolean;
var
  M, D1, D2: Integer;
  P: TPoint;
begin
  Wait(randomRange(400, 600));
  Result := False;
  M := GetSystemTime;
  repeat
    if (not FindFlag(P)) then
    begin
      Result := true;
      Exit;
    end;
    D1 := Distance(P.x, P.y, MMCX, MMCY);
    if (D1 <= Dist) then
    begin
      Result := True;
      Exit;
    end;
    if (D1 > Dist+12) then
      wait(450+random(70))
    else
      wait(50+random(50));
    if (RoadColorCheck) then
      RoadColorChecker;
    if (GetColor(6, 6) <> 13092807) then // border of the loading message
      if (GetSystemTime - M > 5000) then
      begin
        if (D1 = D2) then Exit;
        D2 := D1;
        M := GetSystemTime;
      end;
    if SRL_HasProc(SRL_AntiBan) then
      SRL_Procs[SRL_AntiBan]();
  until not LoggedIn;
end;

(*
MouseFlagEx
~~~~~~~~~~~

.. code-block:: pascal

    function MouseFlagEx(X, Y, rX, rY, Xmod, Ymod, FlagDist: Integer; CheckForFlag, CheckForRoadColor: Boolean): Boolean;

MouseFlag, MFF & MFNF combined into one procedure.
X, Y is the point you want to click, rX, rY are randomness modifiers.
Xmod and Ymod is the adjustment for each click without finding a flag.
FlagDist is how close you want to be (in pixels) to the flag before exiting.
CheckForFlag = True if you want to exit the function if a flag is present. (MFF)
CheckForRoadColor = True if you want to call RoadColorChecked while FlagPresent.

.. note::

    by EvilChicken!

Example:

.. code-block:: pascal


*)
function MouseFlagEx(X, Y, rX, rY, Xmod, Ymod, FlagDist: Integer;
  CheckForFlag, CheckForRoadColor: Boolean): Boolean;
var
  I: Integer;
  P: TPoint;
begin
  Result := False;
  if (FlagPresent) then
    if (CheckForFlag) or (FlagDistance <= FlagDist) then exit;

  P := Point(X - Xmod, Y - Ymod);
  Xmod := Max(Xmod, 3);
  Ymod := Max(Ymod, 3);

  for I := 0 to 4 do
  begin
    IncEx(P.X, Xmod + Random(rX));
    IncEx(P.Y, Ymod + Random(rY));
    if not rs_OnMiniMap(P) then Continue;
    Mouse(P.X, P.Y, 0, 0, mouse_left);
    Result := WaitFunc(@FlagPresent, 50, 3000);
    if (Result) then break;
  end;
  if (FlagDist > -1) then
    FlagEx(FlagDist, CheckForRoadColor);
end;

(*
MFF
~~~

.. code-block:: pascal

    function MFF(X, Y, Xmod, Ymod: Integer): Boolean;


If the flag is not present it will click at (ax, ay) increasing by
(xmod, ymod) 5 times or until the flag appears.


.. note::

    by EvilChicken! from an original idea by WT-Fakawi

Example:

.. code-block:: pascal


*)
function MFF(X, Y, Xmod, Ymod: Integer): Boolean;
begin
  Result := MouseFlagEx(X, Y, 3, 3, Xmod, Ymod, -1, True, False);
end;

(*
MFNF
~~~~

.. code-block:: pascal

    Function MFNF(ax, ay, xmod, ymod: Integer):Boolean;

Like MFF except it will click even if the flag is present when the

.. note::

    by EvilChicken! from an original idea by WT-Fakawi

Example:

.. code-block:: pascal


*)
function MFNF(X, Y, Xmod, Ymod: Integer): Boolean;
begin
  Result := MouseFlagEx(X, Y, 3, 3, Xmod, Ymod, -1, False, False);
end;

(*
FFlag
~~~~~

.. code-block:: pascal

    function FFlag(Dist: Integer): Boolean;

Waits until Flag is within "Distance" distance.


.. note::

    by Wizzup? / WT-Fakawi / ZephyrsFury

Example:

.. code-block:: pascal


*)
function FFlag(Dist: Integer): Boolean;
begin
  Result := FlagEx(Dist, False);
end;

(*
Flag
~~~~

.. code-block:: pascal

    function Flag: Boolean;

Waits while flag exists.


.. note::

    by Nava2

Example:

.. code-block:: pascal


*)

function Flag: Boolean;
begin
  Result := FlagEx(0, False);
end;

(*
MouseFlag
~~~~~~~~~

.. code-block:: pascal

    procedure MouseFlag(X, Y, rX, rY, FlagDist: Integer);

Mouse and Flag combined into one easy procedure.


.. note::

    by EvilChicken!

Example:

.. code-block:: pascal


*)

function MouseFlag(X, Y, rX, rY, FlagDist: Integer): Boolean;
begin
  Result := MouseFlagEx(X, Y, rX, rY, 0, 0, FlagDist, False, False);
end;
