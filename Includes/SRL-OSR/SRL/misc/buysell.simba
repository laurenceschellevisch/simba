//----------------------------------------------------------------------------//
//--               SRL-OSR Resource Library                                 --//
//--                Buying and Selling routines                             --//
//----------------------------------------------------------------------------//
// * function Shop_Screen: Boolean;                                           //
// * function Close_Shop: Boolean;                                            //
// * function ShopItemBoxCoords(I: Integer): TBox;                            //
// * function ShopItemCoords(I: Integer): TPoint;                             // * by N1ke!
// * function ExistsShopItem(i: Integer): Boolean;                            // * by N1ke!
// * function StockShopItem(I: Integer): Integer;                             //
// * function BuyCoords(x, y, Amount: Integer): Boolean;                      // * by RSN re-done by N1ke!
// * function BuyAmount(i, Amount: Integer): Boolean;                         // * by RSN modified by N1ke!
// * function BuyColor(UpText: string; Color, Tol, Amount: Integer): Boolean; // * by RSN Modified by N1ke!
// * function SellCoords(x, y, Amount: Integer): boolean;                     // * by RSN redone by N1ke!
// * function Sell(i, Amount: Integer): Boolean;                              // * RSN small edit by N1ke!
// * function FindItemEx(Col, Tol, Slot: integer; Text: string): TPoint;      //
// * function FindItems(Col, Tol: integer; Text: string): TPointArray;        // * by RSN
// * procedure SellItems(Color, tol, Num, Amount: Integer; Text: string);     // * by RSN

{
  Dev. Note:

      REMADE FILE by:  DannyRS  &  Le Jingle

      Inteded to be used in OSR (Old School RS)

      Prev. Contributers listed by function list above.
} 

// Fixed for Oldschool by DannyRS, Original by ??
function Shop_Screen: Boolean;
begin
  Result := (FindTextTPA(2070783, 10, 22, 30, 476, 52, 'Store', 'UpChars07', Nothing)
                 and (GetColor(482, 36) = 65536));
end;

// Fixed for Oldschool by DannyRS, Original by ??
function Close_Shop: Boolean;
var
  i, Timer: Integer;
begin
  Result := False;
  if Shop_Screen then
  begin
    Timer := GetTimeRunning + 8000;
    repeat
      MouseBox(478, 32, 496, 50, mouse_left);
      for i := 0 to 30 do
      begin
        if not Shop_Screen then
        begin
          Result:= True;
          Break;
        end;
        Wait(100);
      end;
      Wait(Random(100));
    until (GetTimeRunning > Timer) or Result;
  end;
end;

{*******************************************************************************
function ShopItemBoxCoords(I: Integer): TBox;
By: DannyRS/Le Jingle for Oldschool
Description: Results the tbox coords for shop item. (Left to right).
*******************************************************************************}
function ShopItemBoxCoords(i : integer): TBox;
var
  row, col : integer;
begin
  result := IntToBox(-1, -1, -1, -1);
  if not inRange(i, 0, 39) then
  begin
    srl_Warn('ShopItemBoxcoords', 'Parameter not in range(0, 39)', warn_AllVersions);
    exit;
  end;
  row := i div 8;
  col := i - (row * 8);
  if (col < 0) then
  begin
    col := 8;
    row := row - 1;
  end;
  Result.X1 := 80  + (col * 47);
  Result.Y1 := 69  + (row * 47);
  Result.X2 := 112 + (col * 47);
  Result.Y2 := 100  + (row * 47);
end;

{*******************************************************************************
function ShopItemCoords(I: Integer): TPoint;
By: DannyRS for Oldschool
Description: Results the coords for shop item. (Left to right).
*******************************************************************************}
function ShopItemCoords(I: Integer): TPoint;
begin
  Result := MiddleBox(ShopItemBoxCoords(I));
end;

{*******************************************************************************
function ExistsShopItem(i: Integer): Boolean;
By: N1ke! Fixed for Oldschool by DannyRS
Description: Checks if the shop item exists. (Left to right).
*******************************************************************************}
function ExistsShopItem(i: Integer): Boolean;
var
  SBox: TBox;
  X, Y: Integer;
begin
  Result := False;
  if not Shop_Screen then
    Exit;
  SBox := ShopItemBoxCoords(I);
  Result := ((FindColor(X, Y, 65536, SBox.X1, SBox.Y1, SBox.X2, SBox.Y2)) or
             (FindColor(X, Y, 65535, SBox.X1, SBox.Y1, SBox.X2, SBox.Y2)));
end;

{*******************************************************************************
function StockShopItem(I: Integer): Integer;
By: DannyRS for Oldschool
Description: Returns the shops Stock of a slot (Left to right).
*******************************************************************************}
function StockShopItem(I: Integer): Integer;
var
  SIBox, YTBox: TBox;
  YT: TPointArray;
begin
  Result := -1;
  if not Shop_Screen then
    Exit;
  SIBox := ShopItemBoxCoords(I);

  if (FindColors(YT, 65535, SIBox.X1, SIBox.Y1, SIBox.X2, SIBox.Y2)) then
  begin
    YTBox := GetTPABounds(YT);
    Result := StrToIntDef(GetTextAtExWrap(YTBox.X1 - 2, YTBox.Y1 - 2,
                  YTBox.X2 + 2, YTBox.Y2 + 2, 0, 5, 1, 65535, 0, 'StatChars07'), -1);
  end else
    if (ExistsShopItem(I)) then
      Result := 1;
end; 

{*******************************************************************************
function BuyCoords(x, y, Amount: Integer): Boolean;
By: RSN re-done by N1ke! Fixed for Oldschool by Le Jingle/DannyRS
Description: Buys the specified amout of the Item at x, y
*******************************************************************************}
function BuyCoords(x, y, amount: Integer): Boolean;
var
  target : integer;
begin
  Result := False;
  if not Shop_Screen then
    Exit;

  if (amount < 1) then
  begin
    srl_Warn('BuyCoords', 'Invalid amount parameter', warn_Warning);
    Exit;
  end;

  while (amount > 0) do
  begin
    Wait(10+random(250));
    MMouse(RandomRange(x - 10, x + 10), RandomRange(y - 10, y + 10), 0, 0);
   { if not WaitUpText('alue', 300)then
      Exit; }
    ClickMouse2(mouse_right);

    case (amount) of
      1..4: target := 1;
      5..9: target := 5;
      else
        target := 10;
    end;
    if WaitOption(IntToStr(target), 800) then
      amount := amount - target
    else
      exit;
  end;

  Result := True;
end;

{*******************************************************************************
function BuyAmount(i, Amount: Integer): Boolean;
By: RSN modified by N1ke! Fixed for Oldschool by DannyRS
Description: Buys the specified amount of the Item at assigned row and column
*******************************************************************************}
function BuyAmount(I, Amount: Integer): Boolean;
var
  Cords: TPoint;
begin
  Result := False;
  if not ExistsShopItem(I) then
    Exit;
  Cords := ShopItemCoords(I);
  Result := BuyCoords(Cords.X, Cords.Y, Amount);
end;

{*******************************************************************************
function BuyColor(UpText: string; Color, Amount: Integer): Boolean;
By: RSN Modified by N1ke! Fixed for Oldschool by DannyRS
Description: Buys all items with that color
*******************************************************************************}
function BuyColor(UpText: string; Color, Tol, Amount: Integer): Boolean;
var
  x, y: Integer;
begin
  Result := False;
  if not (FindItem(x, y, 'color', Color, 22, 59, 497, 317, [Tol, 4])) then
    Exit;

  Result := BuyCoords(X, Y, Amount);
end;

{*******************************************************************************
function SellCoords(x, y, Amount: Integer): boolean;
By: RSN redone by N1ke! Fixed for Oldschool by DannyRS
Description: Sells Item at x, y
*******************************************************************************}
function SellCoords(x, y, Amount: Integer): boolean;
var
  target : integer;
begin
  Result := False;

  if (Amount < 1) then
  begin
    srl_Warn('SellCoords', 'Invalid amount parameter', warn_Warning);
    Exit;
  end;

  while (Amount > 0) do
  begin
    Wait(10+random(250));
    MMouse(RandomRange(x - 10, x + 10), RandomRange(y - 10, y + 10), 0, 0);
   { if not WaitUpText('alue', 300)then
      Exit; }
    ClickMouse2(mouse_right);

    case (amount) of
      1..4: target := 1;
      5..9: target := 5;
      else
        target := 10;
    end;

    if WaitOption(IntToStr(target), 800) then
      Amount := Amount - target
    else
      exit;
  end;
  Result := True;
end;

{*******************************************************************************
function Sell(i, Amount: Integer): Boolean;
By: RSN small edit by N1ke! Fixed for Oldschool by DannyRS
Description: Sells Items at specified Inv Slot
*******************************************************************************}
function Sell(i, Amount: Integer): Boolean;
var
  ItemPoint: TPoint;
begin
  Result := False;
  if not (ExistsItem(i)) then
    Exit;
  ItemPoint := ItemCoords(i);
  Result := SellCoords(ItemPoint.x, ItemPoint.y, Amount);
end;

{*******************************************************************************
function FindItemEx(Col, Tol, Slot: integer; Text: string): TPoint;
By: Le Jingle (Original Idea by: RSN)
Description: (OSR-made) Finds an inventory item given a color and tolereance,
                in a specified slot.  Text can be '' or detailed, either way
                the function will still search.
                Note: (Using text provides inceased accuracy)
*******************************************************************************}
function FindItemsEx(Col, Tol, Slot: integer; Text: string): TPoint;
var
  x, y : integer;
  b : TBox;
begin
  if not GameTab(Tab_Inv) then
    exit;

  b := InvBox(slot);

  if (FindColorTolerance(x, y, Col, b.X1, b.Y1, b.X2, b.Y2, Tol)) then
  begin
    if (Text <> '') then
    begin
      MouseTBox(b, move);

      wait(250 + random(250));

      if (IsUpText(Text)) then
        result := MiddleBox(b);
    end else
      result := MiddleBox(b);
  end;
end;

{*******************************************************************************
function FindItems(Col, Tol: integer; Text: string): TPointArray;
By: Le Jingle (Original Idea by: RSN)
Description: (OSR-made) See FindItemsEx & Also, this gives an array of matches.
*******************************************************************************}
function FindItems(Col, Tol: integer; Text: string): TPointArray;
var
  i : integer;
begin
  SetArrayLength(Result, 28);
  for i := 1 to 28 do
    result[i - 1] := FindItemsEx(Col, Tol, i, Text);
end;

{*******************************************************************************
procedure SellItems(Color, Tol, Num, Amount: Integer; Text: string);
By: RSN
Description: Sells items with that color, UpText and Tolerance by Amount Specified
*******************************************************************************}
procedure SellItems(Color, tol, Num, Amount: Integer; Text: string);
var
  TPA : TPointArray;
  i: Integer;
begin
  TPA := FindItems(Color, tol, Text);
  for i := 0 to High(TPA) do
    SellCoords(TPA[i].x, TPA[i].y, Amount);
end;
