(*
AntiBan
=======

The Antiban include contains functions to help eliminate bans.

.. contents::

*)

(*
LeaveDangerZone
~~~~~~~~~~~~~~~

.. code-block:: pascal

    function LeaveDangerZone: Boolean;

Handles the 'danger zone' message users get when their total level is < 60

.. note::

    Author: Coh3n
    Last Modified: Unknown

Example:

.. code-block:: pascal

    if LeaveDangerZone then
    ContinueWalking;
*)
function LeaveDangerZone: Boolean;
var
  t: Integer;
begin
  if (FindNPCChatText('erous', Nothing)) then // Only if total level < 60
  begin
    ClickContinue(True);

    t := GetSystemTime + 5000;
    while (GetSystemTime < t) do
    begin
      Wait(500 + Random(300));
      if (FindNPCChatText('eave', ClickLeft)) then
      begin
        Result := True;
        Break;
      end;
    end;
  end;
end;

(*
RandomRClick
~~~~~~~~~~~~

.. code-block:: pascal

    procedure RandomRClick

Performs random right click to stay active.

.. note::

    Author: phantombmx/EvilChicken!, idea by Naum
    Last Modified: Unknown

Example:

.. code-block:: pascal

    RandomRClick;
*)
procedure RandomRClick;
var
  I: TBooleanArray;
  II, M, R: Byte;
  Inv: Boolean;
begin
  if (not LoggedIn) then exit;
  M := MouseSpeed;
  MouseSpeed := 7 + Random(25);
  Inv := (GetCurrentTab = tab_Inv);
  if (Inv) then Inv := ((not InvEmpty) and (Random(3) > 0));
  if (not Inv) then
    MouseBox(MSX1, MSY1, MIX2, MIY2, mouse_right)
  else
  begin
    SetLength(I, 28);
    for II := 0 to 27 do
      I[II] := ExistsItem(II + 1);

    R := RandomRange(1, 28);
    while (not I[R - 1]) do
      R := RandomRange(1, 28);
    InvMouse(R, mouse_right);
  end;
  Inv := False;
  if (Random(3) > 0) then
    Inv := ChooseOption('xamine');
  if (not Inv) then ChooseOption('ancel');
  MouseSpeed := M;
end;

(*
HoverSkill
~~~~~~~~~~

.. code-block:: pascal

    procedure HoverSkill(Skill: variant; Click: Boolean);

Hovers mouse over selected skill to "check exp" Click = True will Click Skill
and Click = False will 'Hover'. Won't "check" skills where your level is 1.

.. note::

    by DannyRS for oldschool
    Last Modified: March 2nd by DannyRS

Example:

.. code-block:: pascal

    HoverSkill(skill_Attack, False);
*)
procedure HoverSkill(Skill: variant; Click: Boolean);
var
  TP: TPoint;
begin
  if(not(GameTab(tab_Stats))) then exit;

  TP := SkillToCoords(Skill);

  if(Click)then
  begin
    MouseBox(TP.X-15, TP.Y-10, TP.X+15, TP.Y-10, mouse_left);
    Wait(3000+Random(3000));
    CloseWindow;
  end else begin
    MMouse(TP.X-15, TP.Y-10, 30, 20);
    Wait(1000 + Random(500));
  end;
end;

(*
PickUpMouse
~~~~~~~~~~~

.. code-block:: pascal

    procedure PickUpMouse;

Acts just like you picked your mouse off the pad...
then sets it back down.

.. note::

    Author: dark_sniper
    Last Modified: Unknown

Example:

.. code-block:: pascal

    PickUpMouse;
*)
procedure PickUpMouse;
var
  cx, cy, XX, YY: Integer;
begin
  if(not(LoggedIn))then
    exit;
  GetMousePos(cx, cy);
  XX := cx;
  YY := cy;
  if(Random(2) = 0)then
    MMouse(cx - 3 - Random(5), cy - 8 - Random(17), 0, 0)
  else
    MMouse(cx + 3, cy - 8 - Random(17), 5, 0);
  Wait(1131 + Random(358));
  if(Random(2) = 0)then
    MMouse(XX + 3, YY + 8, 5, 9)
  else
    MMouse(XX - 3 - Random(5), YY + 8, 0, 9);
end;

(*
SetScreenMouse
~~~~~~~~~~~~~~

.. code-block:: pascal

    function SetScreenMouse(Direction, CameraAngle: Variant): Boolean;

Aligns RS to specified direction and camera angle using the middle mouse button.
    - Direction: 'n', 's', 'e', 'w' or any degree angle. Accepts 'random'
      and 'rand', or '' for no movement.
    - CamerAngle: any number from 1 to 10 (1 = lowest angle), or '1', '10'.
      Accepts '' for no movement.

.. note::

    by Home & euphemism

Example:

.. code-block:: pascal

*)
const
 _DEG_TO_PX = 2.838;
 _SM_X_AXIS = 511;
function SetScreenMouse(Direction, CameraAngle: Variant): Boolean;
var
  ii: Integer;
  i, DirectionDeg, StartAngle, Fraction: Extended;
  AngleStep, DirFalseSet, FractionInt, NumOfSteps, WaitTime, TempMouse, YStart,
   OffX, X, XChange1, XChange2, Y, YChange1, YChange2: Integer;
  Left, SetCamera, SetDirection, TopOfScreen: Boolean;
begin
  SetCamera := True;
  SetDirection := True;

  for ii := 0 to 2 do
  begin
    Result := False;
    StartAngle := rs_GetCompassAngleDegrees;
    DirFalseSet := 0;

    if (StartAngle < 0) or (not LoggedIn) then
      Exit;

    if VariantIsNumber(Direction) then
      DirectionDeg := FixD(Direction + 0.0)
    else if VariantIsString(Direction) then
    begin
      i := StrToFloatDef(Direction,-1337);
      if i = -1337 then
      begin
      case LowerCase(Direction) of
        'n': DirectionDeg := 0;
        'w': DirectionDeg := 270;
        's': DirectionDeg := 180;
        'e': DirectionDeg := 90;
        'random', 'rand': DirectionDeg := RandomRange(0, 360);
        '' : SetDirection := False;
      end;
      end else
        DirectionDeg := FixD(i);
    end;

    if VariantIsString(CameraAngle) then
    begin
        if CameraAngle = '' then
          SetCamera := False
        else
        CameraAngle := StrToInt(CameraAngle);
    end;

    i := 0.0;

    if ((not SetDirection) and (not SetCamera)) then
    begin
      Result := True;
      Exit
    end;

    if (((MinE(Abs(StartAngle - DirectionDeg),
      MinE(Abs(StartAngle - (DirectionDeg + 360)),
      Abs((StartAngle + 360) - DirectionDeg)))) <= 3.0) and (SetCamera)) then
    begin
      SetDirection := False;
    end;

    if (((MinE(Abs(StartAngle - DirectionDeg),
      MinE(Abs(StartAngle - (DirectionDeg + 360)),
      Abs((StartAngle + 360) - DirectionDeg)))) <= 3.0) and (not SetCamera)) then
    begin
      Result := True;
      Exit;
    end;

    if SetDirection then
    begin
      Left := (Round((360 - StartAngle) + DirectionDeg)
               mod 360 <= Round((StartAngle + 360) - DirectionDeg) mod 360);
      WaitTime := RandomRange(30, 90);

      if Left then
      begin
        DirectionDeg := 360 + DirectionDeg - StartAngle;
        OffX := - 5;
      end else
      begin
        DirectionDeg := 360 - DirectionDeg + StartAngle;
        OffX := 5;
      end;

    end else
      Left := RBool;

    TempMouse := MouseSpeed;

    if MouseSpeed > 14 then
      MouseSpeed := RandomRange(14, 15);

    if not SetDirection then
      Fraction := 1
    else
      Fraction := DirectionDeg * _DEG_TO_PX / _SM_X_AXIS
                  - Floor(DirectionDeg * _DEG_TO_PX / _SM_X_AXIS);

    if Fraction > 0 then
    begin
      FractionInt := Round(MSX2 * Fraction);

      if SetDirection then
      begin
        XChange1 := RandomRange(0, FractionInt);
        XChange2 := FractionInt - XChange1;
        DirFalseSet := 0;
      end else
      begin
        DirFalseSet := RandomRange(7, 511);
        XChange1 := DirFalseSet;
        XChange2 := 0;
        OffX := 0;
      end;

      NumOfSteps := 10;
      AngleStep := Ceil((278 / NumOfSteps));
      TopOfScreen := RBool;

      if SetCamera then
      begin
        CameraAngle := NumOfSteps - CameraAngle;
        if TopOfScreen then
        begin
          YStart := RandomRange(MSY1, MSY1 + 55);
          YChange1 := YStart + RandomRange(278, 280);
          YChange2 := (CameraAngle * AngleStep) * -1;
        end else
        begin
          YStart := RandomRange(MSY2, MSY2 - 55);
          YChange1 := YStart - RandomRange(278, 280);
          YChange2 := ((NumOfSteps - CameraAngle) * AngleStep);
        end;
      end else
      begin
        YStart := RandomRange(10, 330);
        YChange1 := YStart;
        YChange2 := 0;
      end;

      GetMousePos(X, Y);

      if ii <> 0 then
        MMouse(X, Y, 0, 0)
      else
        if not Left then
        begin
          if not ii <> 0 then
            MMouse(MSX2 - DirFalseSet, YStart, 0, 0)
          else
            MMouse(MSX2, Y, 0, 0);
        end else
        begin
          if not ii <> 0 then
            MMouse(MSX1 + DirFalseSet, YStart, 0, 0)
          else
            MMouse(MSX1, Y, 0, 0);
        end;

      GetMousePos(X, Y);
      HoldMouse(X, Y, mouse_Middle);
      Wait(WaitTime);

      if ((ii = 0) and (SetCamera))then
      begin
        if not Left then
        begin
          MMouse(MSX2 - XChange1, YChange1, 0, 0);
          Wait(WaitTime);
          GetMousePos(X, Y);
          ReleaseMouse(X, Y, mouse_Middle);
          Wait(WaitTime);
          HoldMouse(MSX2 - XChange1, Y, mouse_Middle);
          MMouse(((MSX2 - XChange1) - XChange2 + OffX), Y + YChange2, 0, 0);
        end else
        begin
          MMouse(MSX1 + XChange1, YChange1, 0, 0);
          Wait(WaitTime);
          GetMousePos(X, Y);
          ReleaseMouse(X, Y, mouse_Middle);
          Wait(WaitTime);
          HoldMouse(MSX1 + XChange1, Y, mouse_Middle);
          MMouse(((MSX1 + XChange1) + XChange2 + OffX), Y + YChange2, 0, 0);
        end;
      end else
        if not Left then
          MMouse(X - (FractionInt + 5), Y, 0, 0)
        else
          MMouse(X + (FractionInt - 5), Y, 0, 0);

      Wait(WaitTime);
      GetMousePos(X, Y);
      ReleaseMouse(X, Y, mouse_Middle);
      Wait(WaitTime);
    end;

    SetCamera := False;
  end;

  MouseSpeed := TempMouse;
end;

(*
MissMouse
~~~~~~~~~

.. code-block:: pascal

    procedure MissMouse(eX, eY: Integer);

Human-like miss-and-correct mouse movement.

.. note::

    Author: Flight
    Last Modified: 30 Dec. 2011

Example:

.. code-block:: pascal

    RandomMovement;
*)
procedure MissMouse(eX, eY: Integer);
var
  randSpeed: extended;
  X,Y,A,Dist,MP: integer;
begin
  A := MouseSpeed;
  GetMousePos(X, Y);
  Dist := Distance(X, Y, eX, eY);
  MP := Round(Dist/150);
  if MP < 0 then
    MP := 1;

  randSpeed := (random(MouseSpeed) / 2.0 + MouseSpeed) / 10.0;
  MMouse(RandomRange(eX-(A*MP), eX+(A*MP)), RandomRange(eY-(A*MP), eY+(A*MP)), 0, 0);
  GetMousePos(X, Y);
  MMouse(eX, eY, 0, 0);
  MouseSpeed := A;
end;

(*
MultiMouse
~~~~~~~~~~

.. code-block:: pascal

  function MultiMouse(x, y, chance, maxClicks: integer; red: boolean): boolean;

Will simulate "spam" clicking on the point x, y.  Will do it a random amount
between 1 and 'maxClicks'.  Will click once no matter what, then has a percent
'chance' of clicking again after that.  Will not exceed 'maxClicks'.  if 'red'
then will return true if the red X appears after clicking an object, else will
return true after clicking.

.. note::

  | Author: Coh3n
  | Last Updated: 21 July 2011 by Coh3n

Example:

.. code-block:: pascal

  if (waitUptext('ree', 200)) then
    MSI_MultiMouse(x, y, 35, 5, true);
*)
function MultiMouse(x, y, chance, maxClicks: integer; red: boolean): boolean;
var
  clicks: integer;
begin
  repeat
    inc(clicks);
    mouse(x, y, 0, 0, true);

    if (red) then
      result := didRedClick
    else
      result := true;

    if (random(100) > chance) or (not result) then
      break;
  until(clicks >= maxClicks);
end;

(*
RandomMovement
~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure RandomMovement;

Presses random arrow keys and moves the mouse. Able to press 2 keys simultaneously.

.. note::

    Author: Krazy_Meerkat
    Last Modified: Unknown

Example:

.. code-block:: pascal

    RandomMovement;
*)
procedure RandomMovement;
var
  Keys: TIntegerArray;
  I: Integer;
  Deg: Extended;
begin
 if(not(LoggedIn))then exit;
  Keys := [VK_RIGHT, VK_LEFT];
  I := Random(2);
 if (Random(2) = I) then
  begin
   ActivateClient;
   Deg := RS_GetCompassAngleDegrees;
   Wait(100 + random(50));
   KeyDown(Keys[I]);
   Wait(500 + random(1000));
   KeyUp(Keys[I]);
   Wait(500 + random(1000));
   MakeCompass(Deg);
  end else
   if (Random(3) = 0) then
    SleepAndMoveMouse(1000 + random(200));
end;

(*
CompassMovement
~~~~~~~~~~~~~~~

.. code-block:: pascal

    function CompassMovement(MinMovement, MaxMovement: Integer; Return: Boolean): Boolean;

Rotates the compass somewhere between MinMovement and MaxMovement.  Will return
to original angle if Return is set to true.

.. note::

    Author: Nebula
    Last Modified: Mar. 6th, 2011 by Nebula

Example:

.. code-block:: pascal

    CompassMovement(10, 30, true);
*)
function CompassMovement(MinMovement, MaxMovement: Integer; Return: Boolean): Boolean;
var
  StartAngle, Movement : Integer;
begin
  Result := False;
  StartAngle := round(rs_GetCompassAngleDegrees());
  case Random(2) of
    0: Movement := RandomRange(-MinMovement, -MaxMovement);
    1: Movement := RandomRange(MinMovement, MaxMovement);
  end;
  MakeCompass(StartAngle + Movement);
  if (Return = true) then
  begin
    wait(RandomRange(100,350));
    MakeCompass(StartAngle);
  end;
  Result := true;
end;

(*
BoredHuman
~~~~~~~~~~

.. code-block:: pascal

    procedure BoredHuman;

Performs 5-15 times:
    * Rotates the cam,
    * Moves the mouse around MainScreen,
    * If it finds IsUpText('option'), it will Chooseoption('Examine');

.. note::

    Author: WT-Fakawi, small edit by Harry
    Last Modified: Unknown

Example:

.. code-block:: pascal

    BoredHuman;
*)
procedure BoredHuman;
var
  i, x, y: Integer;
  Deg: Variant;
begin
  if not LoggedIn then exit;
  Deg := rs_GetCompassAngleDegrees;
  for i := 1 to (3 + Random(11)) do
  begin
    MMouse(Random(MSX2), Random(MSY2), 0, 0);
    if IsUpText('opti') then
    begin
      GetMousePos(x, y);
      Mouse(x, y, 0, 0, mouse_right);
      ChooseOption('Examine');
    end;
    case Random(6) of
      0: SendArrowWait(((Random(2) * 2) + 1), 1000 + Random(200));
      1: SendArrowWait(((Random(2) * 2)), 1000 + Random(200));
      2: SendArrowWait(((Random(2) * 2) + 1), 200 + Random(200));
      3: SendArrowWait(((Random(2) * 2)), 200 + Random(200));
      4: SendArrowWait(((Random(2) * 2) + 1), 20 + Random(20));
      5: SendArrowWait(((Random(2) * 2)), 20 + Random(20));
    end;
  end;
  if (Deg <> 0) then
    MakeCompass(Round(Deg))
  else
    MakeCompass('N');
  SendArrowWait(0, 750 + Random(500));
end;

(*
ExamineInv
~~~~~~~~~~

.. code-block:: pascal

    procedure ExamineInv;

Chooses a random item in the inventory to examine.

.. note::

    Author: R1ch
    Last Modified: Unknown

Example:

.. code-block:: pascal

    ExamineInv;
*)
procedure ExamineInv;
var
  InvSpots: array of Byte;
  I, L: Byte;
begin
  if (InvEmpty) then exit;
  for I := 1 to 28 do
    if ExistsItem(I) then
    begin
      SetLength(InvSpots, Length(InvSpots) + 1);
      InvSpots[L] := I;
      Inc(L);
    end;
  MouseItem(InvSpots[Random(Length(InvSpots))], mouse_right);
  if (not WaitOption('xamine', 375)) then
    if (Random(2) = 0) then
      WaitOption('ancel', 375);
end;

(*
RandomAngle
~~~~~~~~~~~

.. code-block:: pascal

    procedure RandomAngle(HowToEnd: Variant);

Randomly changes the angle of the compass. Finishes depending on

    HowToEnd:
             1, 'up', True = Highest angle
             2, 'down', False = Lowest angle

    Put '' to leave it as it is.

.. note::

    Author: R1ch

Example:

.. code-block:: pascal

    RandomAngle(1);
*)
procedure RandomAngle(HowToEnd: Variant);
var
  Key: Byte;
  B: Integer;
begin
  B:= random(2);
  if (B = 0) then
    Key:= 38
  else
    Key:= 40;
  SetAngle(B);
  Wait(RandomRange(500, 1000));
  KeyDown(Key);
  Wait(RandomRange(500, 1100));
  KeyUp(Key);
  Wait(RandomRange(500, 1000));
  case (HowToEnd) of
    SRL_ANGLE_LOW, 'down', False : SetAngle(SRL_ANGLE_LOW);
    SRL_ANGLE_HIGH, 'up', True : SetAngle(SRL_ANGLE_HIGH);
  end;
end;

(*
AdjustMouseSpeed
~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure AdjustMouseSpeed(Amount, MinMS, MaxMS: Integer);

Randomly changes the mousespeed by the amount (+/-) within the min and max
mousespeed limit.

.. note::

    Author: Ollybest

Example:

.. code-block:: pascal

  AdjustMouseSpeed(3, 10, 20);

*)
procedure AdjustMouseSpeed(Amount, MinMS, MaxMS: Integer);
var
  MS, NewMS: Integer;
begin
  MS := MouseSpeed;
  NewMS := RandomRange(MS - Amount, MS + Amount);

  // setting the mousespeed to the max/min limit if needed
  if NewMS > MaxMS then
    NewMS := MaxMS;
  if NewMS < MinMS then
    NewMS := MinMS;

  if InRange(NewMS, MinMS, MaxMS) then
    MouseSpeed := NewMS
end;

(*
RandomFKeys
~~~~~~~~~~~

.. code-block:: pascal

    procedure RandomFKeys(Return: Boolean)

Randomly changes tabs using fkeys to simulate a human pressing fkeys quickly.
Will return to the original tab if Return is set to true.

.. note::

    Author: Ollybest

Example:

.. code-block:: pascal

 RandomFKeys(True);

*)
procedure RandomFKeys(Return: Boolean);
var
  t, r, i: integer;
  Tabs: TIntegerArray;
begin
 if not (LoggedIn) then
   exit;

 t := GetCurrentTab;
 r := RandomRange(1, 6);
 Tabs := [tab_Combat, tab_Inv, tab_Equip, tab_Prayer, tab_Magic];
 for i := 0 to r do
   FTab(Tabs[Random(Length(Tabs))]);

 // not all tabs can be f keyed
 if (Return) then
   if InIntArray(Tabs, t) then
     FTab(t)
   else
     GameTab(t);
end;

(*
RandomTab
~~~~~~~~~

.. code-block:: pascal

    procedure RandomTab;

Switches to a random gametab, more of a 50% chance of switching to a more
used tab. Will return to the original tab if Return is set to true.

.. note::

    Author: Ollybest

Example:

.. code-block:: pascal

  RandomTab(True);

*)
procedure RandomTab(Return: Boolean);
var
  AllTabs, T: Integer;
  TIA: TIntegerArray;
begin
  if not (LoggedIn) then
    exit;

  T := GetCurrentTab;
  // every tab
  AllTabs := RandomRange(21, 37);
  // more commanly used tabs
  TIA := [23, 25, 26, 30, 28];

  if (RBool) then
    GameTab(AllTabs)
  else
    GameTab(TIA[Random(Length(TIA))]);

  if (Return) then
    GameTab(T);
end;

(*
HoverOnlineFriend
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure HoverOnlineFriend;

Hovers a random online friend (if any are online)

.. note::

    by DannyRS, for oldschool
    based off original by Ollybest

Example:

.. code-block:: pascal

  HoverOnlineFriend;

*)
procedure HoverOnlineFriend;
var
  X, Y, I, S, L, LastTab: Integer;
  OnlineSlots: TIntegerArray;
  Slots: TBoxArray;
begin
  if not (LoggedIn) then Exit;

  LastTab := GetCurrentTab;
  if not (Gametab(Tab_Friends)) then Exit;

  // clicking scroll bar back to the top if needed
  if (not (GetColor(718, 246) = 65536)) then
  begin
    MouseBox(720,248,730,264,mouse_left);
    Wait(150 + Random(200));
  end;

  //possible slots
  SetLength(Slots,12);
  for I:=0 to 11 do
    Slots[I] := IntToBox(556, 231+(I*15), 711, 246+(I*15));

  for I := 0 to 11 do
    if FindColor(X, Y, 65535, Slots[i].X1, Slots[I].Y1, Slots[I].X2, Slots[I].Y2) or
       FindColor(X, Y, 65280, Slots[i].X1, Slots[I].Y1, Slots[I].X2, Slots[I].Y2) then
    begin
      SetLength(OnlineSlots, Length(OnlineSlots) + 1);
      OnlineSlots[L] := I;
      Inc(L);
    end;

  if Length(OnlineSlots) < 1 then
  begin
    Wait(150 + Random(200));
    GameTab(LastTab);
    Exit;
  end;

  S := OnlineSlots[Random(Length(OnlineSlots))];
  MMouse(RandomRange(Slots[S].X1+2, Slots[S].X2-84),
         RandomRange(Slots[S].Y1+2, Slots[S].Y2-2), 0, 0);

  if (RBool) then
    if WaitUpText('essage', 200 + Random (100)) then
    begin
      ClickMouse2(Mouse_Right);
      WaitOption('ancel', 400 + Random(100));
    end;
  Wait(RandomRange(700, 1500));
  GameTab(LastTab);
end;

procedure HoverMovingObject;
var
  TBA: TBoxArray;
  TIA: TIntegerArray;
  i, L: Integer;
  Rows: Integer;
  ATPA, ATPA2: T2DPointArray;
  Player, TPA: TPointArray;
begin
  if not (LoggedIn) then
    Exit;

  Rows := 16;

  TBA := Grid(27, Rows, 19, 20, 19, 20, Point(13, 14));
  TIA := PixelShiftMulti(TBA, 100 + Random(100));
  TPAFromBoxWrap(IntToBox(232, 194 - 50, 289, 254 - 50), Player);

  for i := 0 to High(TBA) do
    if TIA[i] > 5 then
    begin
      Inc(L);
      SetArrayLength(ATPA, L + 1);
      TPAFromBoxWrap(TBA[i], ATPA[L]);
    end;

  MergeATPAWrap(ATPA, TPA);
  ClearTPAFromTPAWrap(TPA, Player, TPA);
  SplitTPAExWrap(TPA, 1, 1, ATPA2);
  SortATPASize(ATPA2, True);

  if Length(ATPA2) > 1 then
  begin
    MouseTBox(GetTPABounds(ATPA2[0]), Mouse_Move);
    if (RBool) then
      if WaitUpTextMulti(['option', 'tion'], 100 + Random(100)) then
        WaitOptionMulti(['xamine', 'ancel'], 100 + Random(100));
  end;
end;

(*
MMouseOffClient
~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure MMouseOffClient(Direction: String);

Moves the mouse off the client in the set direction.
   - Vaild Directions: 'top', 'bottom', 'left', 'right' or accepts 'random'
     and 'rand' for a random direction.

.. note::

    Author: Ollybest

Example:

.. code-block:: pascal

  MMouseOffClient('top');

*)
procedure MMouseOffClient(Direction: String);
var
  B: TBoxArray;
  P: TPoint;
  i, W, H: Integer;
begin
  GetClientDimensions(W, H);
  SetArrayLength(B, 4);
  B[0] := IntToBox(-300, -300, W, 0); //top
  B[1] := IntToBox(0, H, W, H +300); //bottom
  B[2] := IntToBox(0-300, 0, 0, H); //left
  B[3] := IntToBox(W, 0, W +300, H); //right

  case Lowercase(Direction) of
    'top': i := 0;
    'bottom':  i := 1;
    'left': i := 2;
    'right': i := 3;
    'rand', 'random': i := Random(4);
    else
      srl_Warn('MMouseOffClient', 'Invaild direction!', warn_AllVersions);
  end;

  P := Point(RandomRange(B[i].X1, B[i].X2), RandomRange(B[i].Y1, B[i].Y2));
  MMouse(P.X, P.Y, 0, 0);
end;

(*
SmallRandomMouse
~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure SmallRandomMouse;

Randomly moves the mouse in a max radius of 80 of its current postion, has alot
of gravity and wind so it can simulate a human flicking/spiraling the mouse.

.. note::

    Author: Flight (edit to work with SRL5 by Ollybest)

Example:

.. code-block:: pascal

  SmallRandomMouse;

*)
procedure SmallRandomMouse;
var
  RandSpeed: Extended;
  x, y, rx, ry, FS, W, H: Integer;
begin
  GetClientDimensions(W, H);
  FS := MouseSpeed;
  MouseSpeed := RandomRange(7, 10);
  RandSpeed := (random(MouseSpeed) / 2.0 + MouseSpeed) / 10.0;
  GetMousePos(x, y);

  rx := RandomRange(x-80, x+80);
  ry := RandomRange(y-80, y+80);

  //make sure mouse stays on ms
  if rx < MSX1 then
    rx := MSX1 + 1;
  if ry < MSY1 then
    ry := MSY1 + 1;
  if rx > W then
    rx := W - 1;
  if ry > H then
    ry := H - 1;

  WindMouse(x, y, rx, ry, 30, 55, (10.0/randSpeed), (12.0/randSpeed), (10.0*randSpeed), (10.0*randSpeed));
  MouseSpeed := FS;
end;

(*
DragRandomInvSlot
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure DragRandomInvSlot;

Moves an item in your invent to another free slot, if your script relys on
static inv slots its suggested not to use.

.. note::

    Author: Ollybest

Example:

.. code-block:: pascal

  DragRandomInvSlot;

*)
procedure DragRandomInvSlot;
var
  i, FullL, EmptyL: integer;
  FullSlots, EmptySlots: TIntegerArray;
begin
  if (not (LoggedIn)) or (InvFull) or (InvEmpty) then
    Exit;

  // collecting full and empty inv slots
  for i := 1 to 28 do
    if ExistsItem(i) then
    begin
      SetLength(FullSlots, Length(FullSlots) + 1);
      FullSlots[FullL] := i;
      Inc(FullL);
    end else
    begin
      SetLength(EmptySlots, Length(EmptySlots) + 1);
      EmptySlots[EmptyL] := i;
      Inc(EmptyL);
    end;

 if Length(FullSlots) and Length(EmptySlots) > 0 then
   DragMouseTBox(InvBox(FullSlots[Random(Length(FullSlots))]),
                 InvBox(EmptySlots[Random(Length(EmptySlots))]));

end;                                                                       

(*
LevelUpEx

.. code-block:: pascal

    function LevelUpEx(ClickCont, ClickSkill: Boolean): Boolean;

Returns true if the player has gained a level.  If ClickCont is set to true it
will click the continue button in the chat box.  If ClickSkill is set to true,
it will click the skill and exit the window.

.. note::

    Author: Flight

Example:

.. code-block:: pascal

  if (LevelUpEx(false, true)) then
    inc(Players[CurrentPlayer].Integers[10]);
*)
function LevelUpEx(ClickSkill: Boolean): Boolean;
var
  i: Integer;
  Skills: TStringArray;
begin
  if (FindNPCChatText('gratu', Nothing) or FindBlackChatMessage('just adva')) then
  begin
    ClickContinue(True);
    Wait(RandomRange(125, 250));
    ClickContinue(True);

    if (ClickSkill) then
    begin
      Wait(RandomRange(50, 110));

      Skills := [
        'Attack', 'Defence', 'Strength', 'Hitpoints', 'Mining', 'Smithing',
        'Woodcutting', 'Firemaking', 'Magic', 'Fletching', 'Hunting', 'Fishing',
        'Construction', 'Herblore', 'Agility', 'Thieving', 'Crafting', 'Ranged',
        'Slayer', 'Farming', 'Prayer', 'Runecrafting', 'Cooking'
      ];

      for i := 0 to High(Skills) do
        if IsChatBoxTextBetween(Skills[i], clMessage, 1, 8) then
          HoverSkill(Skills[i], True);
    end;

    Result := True;
    WriteLn(Players[CurrentPlayer].Name + ' leveled up!');
  end;
end;

(*
LevelUp
~~~~~~~

.. code-block:: pascal

    function LevelUp: Boolean;

Returns true if the player has gained a level.  Will click the "click to
continue" button in the chat box.

.. note::

    Author: Flight

Example:

.. code-block:: pascal

  if (LevelUp) then
    inc(Players[CurrentPlayer].Integers[10]);
*)
function LevelUp: Boolean;
begin
  Result := LevelUpEx(False);
end;

(*
FindMod
~~~~~~~

.. code-block:: pascal

    function FindMod: Boolean;

Results true if a mod is found talking in the chat box.  Will logout and wait
if LogoutOnMod (global boolean) is set to true.

.. note::

    Author: Stupid3ooo

Example:

.. code-block:: pascal

  FindMod();
*)
function FindMod: Boolean;
var
  tX, tY: Integer;
begin
  if (not UseFindMod) or (not LoggedIn) then
    exit;

  if (not SRLBitmapsLoaded) then
    LoadSRLBitMaps;

  if (FindColorTolerance(tX, tY, 14737632, MCX1, MCY1, MCX1 + 40, MCY2, 15)) or
     (FindColorTolerance(tX, tY, 589815, MCX1, MCY1, MCX1 + 40, MCY2, 15)) then
    if (FindBitmapToleranceIn(bmpMod, tX, tY, MCX1, MCY1, MCX1 + 40, MCY2, 15)) or
       (FindBitmapToleranceIn(bmpAdmin, tx, ty, MCX1, MCY1, MCX1 + 40, MCY2, 15)) then
    begin
      Result := True;

      if SRL_HasProc(srl_OnFindMod) then
        SRL_Procs[srl_OnFindMod]();

      if (LogoutOnMod) then
      begin
        Writeln('******** FOUND MOD ********');
        Writeln('Logging out, waiting 1-2 minutes until mod leaves');

        WaitFunc(@Logout, 500, 1500);
        Wait(60000 + Random(60000));
        LoginPlayer;
      end;
    end;
end;

(*
FindDead
~~~~~~~~

.. code-block:: pascal

    function FindDead: Boolean;

Logs out and sets the current player to false if they are found dead. Will not
logout if Reincarnate (global boolean) is set to true.

.. note::

    Author: Stupid3ooo and Cazax

Example:

.. code-block:: pascal

  FindDead();
*)
function FindDead: Boolean;
begin
  Result := False;
  if FindTextTPA(0, 0, MCX1, MCY1, MCX2, MCY2, 'dear', SmallChars, Nothing) then
    if FindTextTPA(0, 0, MCX1, MCY1, MCX2, MCY2, 'dead', SmallChars, Nothing) then
    begin
      Result := True;

      if SRL_HasProc(srl_OnFindDead) then
        SRL_Procs[srl_OnFindDead]();

      if (Reincarnate) then
        exit;

      LogOut;
      Players[CurrentPlayer].Rand := 'Dead';
      Players[CurrentPlayer].Active := False;
    end;
end;

(*
FindDwarvenPopup
~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function FindDwarvenPopup: Boolean;

A simple functinds and closes the "please buy RS Members" popup that happens
when you reach lvl 10 in any skill.

.. note::

    Author: Harry

Example:

.. code-block:: pascal

  FindDwarvenPopup();
*)
function FindDwarvenPopup: Boolean;
begin
  Result := False;
  // Parts of red X, checked in two different spots to reduce false-positives
  if (GetColor(485, 40) = 2569093) then
    if (GetColor(488, 40) = 11189720) then
    begin
      Result := True;

      // Box around the X, to close it.
      MouseBox(482, 35, 492, 44, mouse_left);
      Wait(1000+Random(3000));
    end;
end;

(*
CloseAdWindow
~~~~~~~~~~~~~

.. code-block:: pascal

    function CloseAdWindow(): Boolean;

Finds and exits the wicked hood and dwarven army axe pop up ads.

.. note::

    Author: litoris
    Last Modified: September 2nd, 2012 by litoris

Example:

.. code-block:: pascal

  CloseAdWindow();
*)
function CloseAdWindow(): Boolean;
var
Cross, x, y: Integer;
begin
  Cross := BitmapFromString(10, 9, 'meJzT1jbX0HDWzp6jYxipqOwNRDI' +
          'yXkoq3lKRfSIiKjo6FiCpDX+0pj/QMshQUgqVVE4AsoEikpG9ioqW' +
          'QF0QLpBUMKvRmgFiq02+yyHiJCVlLy3tpaiSDhGEILUpd3nEAtnYj' +
          'GVkDYEKpKSCRLVL4LJi2iU8PE4cnMYiIlpCwpbCUpFA9Zh6ublVOE' +
          'WdIFJAEqgLygbaK2zNzCwlGdkHVS8eCDQQSEIUAN3MyMgNUcApYg0' +
          '0CoKAbKAUE5MQAMPoVvw=');
  if  FindBitmapTolerancein(Cross, x, y, MSCX, MSY1, MSX2, MSCY, 5) then
  begin
    MMouse(x, y, 2, 2);
    if (WaitUptext('lose', 300)) then
    begin
      ClickMouse2(mouse_Left);
      Wait(RandomRange(100, 200));
      Result := True;
    end;
  end;
  FreeBitmap(Cross);
end;
