(*
Frog
====

Stores all the routines to solve the Frog random.  None of these routines
should be used throughout scripts.  They only need to be called in SRL's random
detection methods.

*)

var
  O_MouseSpeed, FROG_ISLAND_DTM, FROG_ISLAND_DTM_BACKUP, FROG_CROWN_BMP, DTM_Royal_Frog: Integer;
  Deg : Extended;

const
  FROG_YELLOW             = 7986172;
  FROG_RED                = 3097339;
  FROG_GREEN              = 879885;
  FROG_SWAMP              = 8031312;
  FROG_CROWN              = 1095911;
  FROG_CROWN_COLOR_BACKUP = 633312;

//function Frog_Speakto: boolean; forward;
function Frog_IsTalkingTo: boolean; forward;
function Frog_FindFrog: boolean; forward;

(*
DoConversationEx
~~~~~~~~~~~~~~

.. code-block:: pascal

    function DoConversationEx(resultText: TStringArray; clickresult: boolean): boolean;

Goes through the initial dialog of a random.  Will keep clicking to continue
until any of the conversation's 'resultText' is found.  Will click to continue when
any 'resultText' is found if 'clickresult' is set to true.  Set 'resultText' to ['']
to click continue until conversation is over.

.. note::

    Author: Coh3n, Flight
    Last Modified: Jun. 15th, 2013 by Flight

Example:

.. code-block:: pascal

    if (DoConversationEx(['thank','nk you'], true)) then
      writeln('Finished conversation');
*)
function DoConversationEx(resultText: TStringArray): boolean;
var
  t,i: integer;
begin
  while (t < 25) do // max of 25 "click to continue's"
  begin
    if (length(resultText) > 0) then
      for i:=0 to high(resultText) do
        if (findNPCChatText(resultText[i], nothing)) then
        begin
          result := true;
          exit;
        end;

    // break if there's no more conversation
    if (not clickContinue(true)) then
      break;

    wait(100 + random(200));
    inc(t);
  end;
end;

(**
 * Author: Justin
 * Description: Detects if we are in the Frog Random. Small chance it would
 * fail to detect due to the frogs being off-screen, checks for Music Track too.
 *)
function Frog_Detect(): boolean;
begin
  if not (tabExists(TAB_MAGIC)) then
  begin
    if Length(GetMinimapDots('npc')) >= 4 then
      if PercentBlackMM >= 35 then
        if (GetMusic = 'Frooland') then
        begin
          Result := true;
          exit;
        end;
    if (CountColorTolerance(FROG_GREEN, MSX1, MSY1, MSX2, MSY2, 30) >= 100) then
      if (CountColorTolerance(FROG_RED, MSX1, MSY1, MSX2, MSY2, 30) >= 20) then
        Result := (CountColorTolerance(FROG_YELLOW, MSX1, MSY1, MSX2, MSY2, 30) >= 5);
  end;
end;

(**
 * Author: Justin
 * Description: Gets our player ready to solve the random.
 *)
procedure Frog_Setup();
begin
  if (not LoggedIn()) then
    exit;
  SetAngle(SRL_ANGLE_HIGH);
  MakeCompass('n');
  O_MouseSpeed := MouseSpeed;
  MouseSpeed := 26;
end;

(**
 * Author: Xtrapsp
 * Description: Loads the DTMs that are used within the random.
 *)
procedure Frog_Set_DTMS;
begin
  FROG_ISLAND_DTM := DTMFromString('mrAAAAHic42BgYDjJxsBwA4qvA/EpID4MxLuAeBMQtwDV9ABxNRAXA3EuEBcBcQkQ1wJxaJAdg3lxAk4sB1SDDzMSwDAAAMr5E3M=');
  FROG_ISLAND_DTM_BACKUP := DTMFromString('maQEAAHicE2RgYLjGxMDwGIjvMEHY54H4NBSfg+KrQHwTqu4BED8H4idAfAmqfgbQnIlA3AvFE4B4CgNEfB4QLwLipVA8H8qfDZUHqV8JxIGeNgxmRfFw7ONiARYD4RBvWzAGsf3dLVHUIWNWoDmUYkYqYAwAAGpfKPw=');
  FROG_CROWN_BMP := BitmapFromString(1, 3, 'meJyTOfnD5NxvmaOfARoQBa8=');
  DTM_Royal_Frog := DTMFromString('mbQAAAHicY2VgYLgDxLeB+CYQ34OyeRgZGDgZIbQAEPMD8cpOYYbfZ1QZDs4RYziuKcbw+5wxgxxQLTpmxoLBAAB7VQzf');
end;

(**
 * Author: Xtrapsp
 * Description: Unloads the DTMs that were used within the random.
 *)
procedure Frog_Free_DTMS;
begin
  FreeDTM(FROG_ISLAND_DTM);
  FreeDTM(Frog_ISLAND_DTM_BACKUP);
  FreeBitmap(FROG_CROWN_BMP);
  FreeDTM(DTM_Royal_Frog);
end;

(**
 * Author: Xtrapsp/Justin
 * Description: Walks our player to the center of the map where the
 * Frog Princess is located. If the DTM fails, will use TPA failsafe.
 *)
function Frog_WalkCenter: boolean;
var
  TPA: TPointArray;
  T, TPAX, TPAY, sx, sy: Integer;
begin
  if (not loggedIn()) then
    exit;
  MakeCompass('N');
  MarkTime(T);
  repeat
  if findcolortolerance(TPAX,TPAY,5861233, MMX1+random(MMX2-MMX1-2), MMY1+random(MMY2-MMY1-2), MMX2, MMY2, 19) then
  if (findcolortolerance(sx,sy,FROG_SWAMP, TPAX - 30, TPAY, TPAX - 15, TPAY, 19) and findcolortolerance(sx,sy,FROG_SWAMP, TPAX + 30, TPAY, TPAX + 45, TPAY, 19)) then
  begin
    Mouse(TPAX, TPAY-4, 4, 2, mouse_Left);
    addToSRLLog('Frog_WalkCenter: Moving to center of cave');
      wait(600 + Random(120));
    FFlag(0);
    result := true;
    addToSRLLog('Frog_WalkCenter[Main]: result: ' + BoolToStr(result));
    break;
  end;
    wait(100+random(50));
  until(timeFromMark(T) > 6000);
  if (not(result = true)) then
  begin
    addToSRLLog('Frog_WalkCenter: Unable to find main DTM, Falling back onto backup');
    if (FindColorsTolerance(TPA, FROG_SWAMP, MMX1, MMY1, MMX2, MMY2, 50)) then
    begin
      MiddleTPAEx(TPA, TPAX, TPAY);
      Mouse(TPAX, TPAY, 8, 8, mouse_Left);
      wait(600 + Random(120));
      FFlag(0);
      result := true;
      addToSRLLog('Frog_WalkCenter[Backup]: result: ' + BoolToStr(result));
    end;
  end;
end;

(**
 * Author: Xtrapsp/Justin
 * Description: Finds the Frog Princess via DTM with a TPA failsafe.
 * If the DTM fails, it will rotate the camera just incase the Frog Princess
 * is off the screen.
 *)
function Frog_FindFrog: boolean;
var
  T, Attempt, tmpCTS, i, fx, fy, arL: integer;
  arP: TPointArray;
  ararP: T2DPointArray;
  P: TPoint;
begin
  addToSRLLog('Frog_FindFrog: Attempting to find the Frog Princess');
  Marktime(T);
  tmpCTS := GetColorToleranceSpeed;
  repeat
    if FindDTM(DTM_Royal_Frog, fx, fy, MSx1, MSy1, MSx2, MSy2) then
    begin
      MMouse(fx-2, fy-2, 2, 2);
      if WaitUpTextMulti(['Frog','to Fr'], 300) then
      begin
        Writeln('Frog_Solve2: Found royal frog');
        ClickMouse2(mouse_right);
        Wait(randomRange(100,250));
        result := waitOptionMulti(['Talk-to Frog','to Fr','Frog'], 500);
        if result then
        begin
          Writeln('Frog_Solve2: Talking to royal frog...');
          break
        end else
          MouseBox(MCx1, MCy1, MCx2, MCy2, mouse_move);
      end;
    end;
    if not result then
    begin
      if FindBitmapToleranceIn(FROG_CROWN_BMP, fx, fy, MSX1, MSY1, MSX2, MSY2, 40)  then
      begin
        MMouse(fx, fy, 4, 4);
        addToSRLLog('Frog_FindFrog: Checking multi uptext');
        wait(150 + random(100));
        if (IsUpTextMultiCustom(['Frog', 'Talk', 'rog'])) then
        begin
            ClickMouse2(mouse_Right);
            Result := WaitOptionMulti(['Talk-to', 'alk-t', 'Frog', 'rog'], 800);
            addToSRLLog('Frog_FindFrog[Backup]: result: ' + BoolToStr(result));
            wait(600 + Random(120));
            FFlag(0);
            if (result) then
              addToSRLLog('Frog_FindFrog: Found Frog Princess');
            exit;
        end else
          addToSRLLog('Frog_FindFrog: Could not find uptext');
    end else
      begin
        addToSRLLog('Frog_FindFrog: Could not find Frog Princess. Falling onto backup');
        MakeCompass(rs_GetCompassAngleDegrees + RandomRange(85, 95));
        wait(800+Random(400));
        ColorToleranceSpeed(2);
        SetColorSpeed2Modifiers(0.02, 0.76);
        if (FindColorsTolerance(arP, FROG_CROWN, MSX1, MSY1, MSX2, MSY2, 12)) then
        begin
          addToSRLLog('Frog_FindFrog: Found TPA color, Moving mouse to TPA');
          SortTPAFrom(arP, Point(MSCX, MSCY));
          ararP := SplitTPAEx(arP, 8, 8);
          arL := High(ararP);
          for i := 0 to arL do
          begin
            P := MiddleTPA(ararP[i]);
            MMouse(P.x, P.y, 5, 5);
            addToSRLLog('Frog_FindFrog: Checking multi uptext');
            Wait(100 + Random(100));
            if (IsUpTextMultiCustom(['Frog', 'Talk', 'rog'])) then
            begin
              ClickMouse2(mouse_Right);
              Result := WaitOptionMulti(['Talk-to', 'alk-t', 'Frog', 'rog'], 500);
              addToSRLLog('Frog_FindFrog[Backup]: result: ' + BoolToStr(result));
              wait(600 + Random(120));
              FFlag(0);
              exit;
          end else
            addToSRLLog('Frog_FindFrog: Could not find uptext');
          end;
        end else
         addToSRLLog('Frog_FindFrog[Backup]: Unable to find TPA');
      end;
    end;
    Inc(Attempt);
    addToSRLLog('Frog_FindFrog: Attempt: ' + inttostr(Attempt));
  until ((Attempt > 5) or (Result));
  ColorToleranceSpeed(tmpCTS);
  SetColorSpeed2Modifiers(0.2, 0.2);
  exit;

end;

{(**
 * Author: Xtrapsp/Justin
 * Description: Handles talking to the Frog Princeess.
 *)
function Frog_SpeakTo: boolean;
var
  T, Attempt: integer;
  TPA: TPointArray;
begin
  addToSRLLog('Frog_SpeakTo: Attempting to speak to the Frog Princess');
  Marktime(T);
  repeat
    if ClickDTMRotatedIn(FROG_CROWN_DTM, MSX1, MSY1, MSX2, MSY2, - Pi, Pi, Pi / 30, ['rog'], mouse_Left) then
    begin
      addToSRLLog('Frog_SpeakTo: Found Frog Princess, Clicking Frog Princess');
      result := true;
      addToSRLLog('Frog_SpeakTo[Main]: result: ' + BoolToStr(result));
      Wait(3500 + Random(1000));
      exit;
    end
    else
    begin
      addToSRLLog('Frog_SpeakTo: Could not find Frog Princess. Falling onto backup');
      if (FindColorsSpiralTolerance(MSCX, MSCY, TPA, FROG_CROWN_COLOR_BACKUP, MSX1, MSY1, MSX2, MSY2, 25)) then
      begin
        Mouse(TPA[0].X, TPA[0].Y, 2, 2, mouse_Move);
        if IsUpTextMultiCustom(['Frog', 'Talk', 'rog']) then
          ClickMouse2(mouse_Left);
        wait(600 + Random(120));
        FFlag(0);
        Result := true;
        addToSRLLog('Frog_SpeakTo[Backup]: result: ' + BoolToStr(result));
      end;
    end;
    Inc(Attempt);
    MakeCompass(rs_GetCompassAngleDegrees + RandomRange(85, 95));
  until ((Attempt > 20) or (Frog_IsTalkingTo))
  if (Attempt > 20) then
    Frog_WalkCenter;
  exit;
end;}

(**
 * Author: Xtrapsp/Justin
 * Description: Detects if we are talking to the Frog Princess or just a Frog.
 *)
function Frog_IsTalkingTo: boolean;
var
  T, ft, i, Attempt: integer;
  responses: TStringArray;
begin
  addToSRLLog('Frog_IsTalkingTo: Speaking to the Frog Princess');
  responses := ['very','orry','hange','lrigh','Okay','kay.','I supp','pose so','yeah','Yeah','Sure','ure'];
  MarkTime(ft);
  repeat
    if areTalking then break;
    wait(100+random(50));
  until(timeFromMark(ft) > 6000);
  MarkTime(ft);
  repeat
    if DoConversationEx(responses) then
    begin
      Writeln('Frog_Solve2: Reached response');
      for i:=0 to High(responses) do
        if findTextTPA(0, 5, MCx1, MCy1, MCx2, MCy2, responses[i], CharsNPC07, ClickLeft) then
        begin
          Writeln('Frog_Solve2: Chose correct option');
          ClickToContinue;
          break;
        end;
    end;
  until(timeFromMark(ft) > 15000);

  MarkTime(ft);
  repeat
    if (not(Frog_Detect())) then
    begin
      Result := True;
      Writeln('Frog_Solve2: Successfully solved the Frog random!');
      break;
    end;
      Wait(100 + Random(50));
  until(timeFromMark(ft) > 10000);

  if not result then
  begin
  repeat
    Result := FindNPCChatText('Hmph. Have you come to apologize for ignoring me?', Nothing);
    if (not(result)) then result:= FindNPCChatText('change', Nothing);
    if (Result or (Attempt > 6)) then
    begin
      addToSRLLog('Frog_IsTalkingTo[backup]: Continuing to chat to Frog Princess');
      Wait(1000 + Random(500));
      DoConversation('', true);
      Wait(1100 + Random(500));
      Mouse(137, 399, 252, 7, True);
      Wait(1100 + Random(500));
      Mouse(153, 449, 130, 5, True);
      Wait(1100 + Random(500));
      Mouse(243, 450, 130, 4, True);
      Wait(2100 + Random(1500));
      exit;
    end
    else
      addToSRLLog('Frog_IsTalkingTo[backup]: Could not continue chat with Frog Princess');
  until ((Attempt > 7) or (TimefromMark(T) > 50000) or Result);
  end;
  if (Attempt > 7) then
  begin
    addToSRLLog('Frog_IsTalkingTo: Attempts are greater than 5');
    Wait(3000 + Random(1000));
    result := false;
  end;
end;

(**
 * Author: Justin & Flight
 * Modified by: Krazy_Meerkat
 * Description: Handles solving the random event.
 *)
function Frog_Solve2(): boolean;
begin
  if (not loggedIn()) then
    exit;
 Deg := RS_GetCompassAngleDegrees;
 Wait(100 + random(50));
  Frog_Setup();
      if Frog_FindFrog then
        result := Frog_IsTalkingTo;
  MouseSpeed := O_MouseSpeed;
  if (not result) then
    addToSRLLog('Frog_Solve2: Frog solver failed or timed out');
  MakeCompass(Deg);
end;

(**
 * Author: Justin
 * Description: Handles solving the random event.
 *)
function Frog_Solve(): boolean;
var
  t: integer;
begin
  if (not loggedIn()) then
    exit;
 Deg := RS_GetCompassAngleDegrees;
 Wait(100 + random(50));
  t := (getSystemTime + (10 * 60000));
  Frog_Setup();
  repeat
    if Frog_WalkCenter then
      if Frog_FindFrog then
        result := Frog_IsTalkingTo;
  until (result or (getSystemTime > t));
  MouseSpeed := O_MouseSpeed;
  if (not result) then
    addToSRLLog('Frog_Solve: Frog solver failed or timed out');
  MakeCompass(Deg);
end;
